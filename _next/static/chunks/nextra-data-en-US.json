{"/AlgDS/DS":{"title":"Description","data":{"":"This LaTeX code produces a diagram using the TikZ package that depicts different categories of data structures. The diagram consists of a central node labeled \"Data Structures\" with four nodes branching out from it, each representing a category of data structures: Linear, NonLinear, Homogeneous, and Heterogeneous. The Linear node contains a list of linear data structures, the NonLinear node contains a list of non-linear data structures, the Homogeneous node contains a list of homogeneous data structures, and the Heterogeneous nodes contain subcategories of heterogeneous data structures each with a box that contains a list of examples of the subcategory. The diagram uses the color scheme of a purpleVue color for the text, and a double line drawn around each of the nodes to differentiate them from one another.","keywords#Keywords":"tikz, nodes, edges, colors, positioning, double lines, minimum height, minimum width, label, itemize, varwidth.","source-code#Source Code":"\\documentclass[tikz,border=5pt, varwidth=false, preview=true]{standalone}\n\\usepackage{tikz}\n\\usepackage{enumerate}\n\\usepackage{enumitem}\n\\usetikzlibrary{positioning, calc, arrows}\n\\definecolor{purpleVue}{rgb}{0.6,0.5,0.9}\n\\usepackage{varwidth}\n\\begin{document}\n\\begin{tikzpicture}[text height=1.5ex,text depth=.25ex]\n% Root Node\n\\node[draw, rounded corners, rectangle, minimum height= 25em, minimum width=55em, label={[anchor=north]north:{\\Large Data Structures}}] (DS) {};\n\n% Linear Node\n\\node[rounded corners, %fill=black,\ntext depth = 5em, minimum width=10em,\ndraw,\ndouble=purpleVue, %% here\ndouble distance =1pt,    %% here\n%font=\\Large,\nminimum height= 15em,\ntext=purpleVue, label={[anchor=north]north:{\\large Linear}}] at ([xshift=5.5em, yshift=0em]\n% See https://tex.stackexchange.com/questions/27843/level-of-boldness-changeable\nDS.west) (L){};\n\\node[draw=none] at ([xshift=17em, yshift=-6em] L.west) {{\\vbox {\n\\begin{itemize}\n\\item Lists\n\\item Sets\n\\item Tuples\n\\item Queues\n\\item Stacks\n\\item Heaps\n\\end{itemize}}\n}};\n\n% % Non Linear Node\n\\node[rounded corners, %fill=black,\ntext depth = 5em, minimum width=10em,\ndraw,\ndouble=purpleVue, %% here\ndouble distance =1pt,    %% here\n%font=\\Large,\nminimum height= 15em,\ntext=purpleVue, label={[anchor=north]north:{\\large NonLinear}}] at ([xshift=5em, yshift=0em]\n% See https://tex.stackexchange.com/questions/27843/level-of-boldness-changeable\nL.east) (NL){};\n\\node[draw=none] at ([xshift=17em, yshift=-6em] NL.west) {{\\vbox {\n\\begin{itemize}\n\\item Trees\n\\item Tables\n\\item Containers\n\\end{itemize}}\n}};\n\n% Homogenous Node\n\\node[rounded corners, %fill=black,\ntext depth = 5em, minimum width=10em,\ndraw,\ndouble=purpleVue, %% here\ndouble distance =1pt,    %% here\n%font=\\Large,\nminimum height= 15em,\ntext=purpleVue, label={[anchor=north]north:{\\large Homogenous}}] at ([xshift=5em, yshift=0em]\n% See https://tex.stackexchange.com/questions/27843/level-of-boldness-changeable\nNL.east) (Ho){};\n\\node[draw=none] at ([xshift=17em, yshift=-6em] Ho.west) {{\\vbox {\n\\begin{itemize}\n\\item 2D Arrays\n\\item MultiDArrays\n\\end{itemize}}\n}};\n\n% Heterogeneous\n\\node[rounded corners, %fill=black,\ntext depth = 5em, minimum width=10em,\ndraw,\ndouble=purpleVue, %% here\ndouble distance =1pt,    %% here\n%font=\\Large,\nminimum height= 15em,\ntext=purpleVue, label={[anchor=north]north:{\\large Heterogeneous}}] at ([xshift=5em, yshift=0em]\nHo.east) (He){};\n\\node[draw=none] at ([xshift=4.5em, yshift=-3em] He.west) {\n{\n\\setlength{\\fboxsep}{0pt}%\n\\setlength{\\fboxrule}{0pt}%\n\\framebox{\\begin{varwidth}{\\linewidth}\n\\begin{itemize}\n\\item Linked Lists\n\\item Ordered Lists\n\\item Unordered Lists\n\\end{itemize}\\end{varwidth}}\n}};\n\n% % Heterogeneous\n\\node[rounded corners, %fill=black,\ntext depth = 5em, minimum width=10em,\ndraw,\ndouble=purpleVue, %% here\ndouble distance =1pt,    %% here\n%font=\\Large,\nminimum height= 15em,\ntext=purpleVue, label={[anchor=north]north:{\\large Heterogeneous}}] at ([xshift=5em, yshift=0em]\nHe.east) (Dy){};\n\\node[draw=none] at ([xshift=3.5em, yshift=-3em] Dy.west)  {\n{\n% This is a better way to set items in a list, such that it doesn't impact the size of the tikzpicture\n\\setlength{\\fboxsep}{0pt}%\n\\setlength{\\fboxrule}{0pt}%\n\\framebox{\\begin{varwidth}{\\linewidth}\n\\begin{itemize}\n\\item Dictionaries\n\\item Treesets\n\\item Sequences\n\\end{itemize}\\end{varwidth}}\n}};\n\\end{tikzpicture}\n\\end{document}"}},"/ArtificialIntelligence/can_mis":{"title":"Description","data":{"":"\"Missionaries and Cannibals\" is a classic puzzle that involves three missionaries and three cannibals who are stranded on one side of a river. They have a small boat that can carry two people at a time. The puzzle requires them to find a way to transport all six people to the other side of the river without any of the missionaries being eaten by the cannibals.The rules for this puzzle are:\nThe boat can carry a maximum of two people.\nIf there are ever more cannibals than missionaries on one side of the river, the cannibals will eat the missionaries.\nAll the people must reach the other side of the river to solve the puzzle.\n\nTo solve this puzzle, the following steps can be taken:\nStart by transporting two cannibals to the other side of the river.\nOne cannibal will remain on the other side of the river, while the other will return to the original side.\nTwo missionaries will then be transported to the other side of the river.\nOne missionary will remain on the other side of the river, while the other will return to the original side.\nTwo cannibals will be transported to the other side of the river.\nOne cannibal will remain on the other side of the river, while the other will return to the original side.\nTwo missionaries will be transported to the other side of the river.\nFinally, one cannibal and one missionary will be transported to the other side of the river.\n\nAt this point, all six people will have been transported to the other side of the river, and none of the missionaries will have been eaten by the cannibals.","keywords#Keywords":"\\documentclass, \\usepackage, \\begin, \\tikzpicture, \\draw, \\node, \\foreach, \\fill, \\coordinate, \\nodepart, \\matrix, \\matrixofnodes, \\path, \\pgfmathsetmacro, \\pgfmathtruncatemacro, \\pgfmathparse.","source-code#Source Code":"% this COMPLETE code diagram illustrates the Missionaries and cannibals problem\n\n\\documentclass[tikz]{standalone}\n\\usepackage{ifthen}\n\\usepackage{fontawesome}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{chains}\n\\usetikzlibrary{shapes.multipart}\n\n% SEE https://tex.stackexchange.com/questions/198813/how-to-make-a-boat-symbol-in-latex\n\\newcommand*{\\myboatleft}{%\n\\protect\\raisebox{-0.0000165em}{%\n\\protect\\begin{tikzpicture}[ x=0.08em, y=0.08em, xscale=0.05, yscale=-0.05, inner\nsep=0pt, outer sep=0pt, rotate=90]\n\\protect\\path[fill=cyan!40] (99.9880,49.1240) .. controls (97.9470,49.1240) and (95.9760,48.6600) ..\n(94.2380,47.8720) .. controls (92.4520,47.0370) and (90.4350,46.5500) ..\n(88.3470,46.5500) .. controls (86.2380,46.5500) and (84.2200,47.0370) ..\n(82.4350,47.8720) .. controls (80.6720,48.6600) and (78.7240,49.1240) ..\n(76.6840,49.1240) .. controls (74.6660,49.1240) and (72.6950,48.6600) ..\n(70.9560,47.8720) .. controls (69.1710,47.0370) and (67.1530,46.5500) ..\n(65.0430,46.5500) .. controls (62.9560,46.5500) and (60.9390,47.0370) ..\n(59.1530,47.8720) .. controls (57.3910,48.6600) and (55.4430,49.1240) ..\n(53.4030,49.1240) .. controls (51.3620,49.1240) and (49.4140,48.6600) ..\n(47.6740,47.8720) .. controls (45.8890,47.0370) and (43.8710,46.5500) ..\n(41.7620,46.5500) .. controls (39.6520,46.5500) and (37.6570,47.0370) ..\n(35.8720,47.8720) .. controls (34.1100,48.6600) and (32.1620,49.1240) ..\n(30.1220,49.1240) .. controls (28.0820,49.1240) and (26.1570,48.6600) ..\n(24.4170,47.8720) .. controls (22.6080,47.0370) and (20.6140,46.5500) ..\n(18.5040,46.5500) .. controls (16.3940,46.5500) and (14.4000,47.0370) ..\n(12.5910,47.8720) .. controls (10.8520,48.6600) and (8.9040,49.1240) ..\n(6.8630,49.1240) -- (6.8630,40.5210) .. controls (8.9040,40.5210) and\n(10.8510,40.0570) .. (12.5910,39.2680) .. controls (14.4000,38.4570) and\n(16.3940,37.9700) .. (18.5040,37.9700) .. controls (20.6140,37.9700) and\n(22.6080,38.4570) .. (24.4170,39.2680) .. controls (26.1560,40.0570) and\n(28.0810,40.5210) .. (30.1220,40.5210) .. controls (32.1630,40.5210) and\n(34.1100,40.0570) .. (35.8720,39.2680) .. controls (37.6570,38.4570) and\n(39.6520,37.9700) .. (41.7620,37.9700) .. controls (43.8710,37.9700) and\n(45.8890,38.4570) .. (47.6740,39.2680) .. controls (49.4130,40.0570) and\n(51.3620,40.5210) .. (53.4030,40.5210) .. controls (55.4430,40.5210) and\n(57.3910,40.0570) .. (59.1530,39.2680) .. controls (60.9380,38.4570) and\n(62.9560,37.9700) .. (65.0430,37.9700) .. controls (67.1530,37.9700) and\n(69.1710,38.4570) .. (70.9560,39.2680) .. controls (72.6940,40.0570) and\n(74.6660,40.5210) .. (76.6840,40.5210) .. controls (78.7240,40.5210) and\n(80.6720,40.0570) .. (82.4350,39.2680) .. controls (84.2200,38.4570) and\n(86.2380,37.9700) .. (88.3470,37.9700) .. controls (90.4350,37.9700) and\n(92.4510,38.4570) .. (94.2380,39.2680) .. controls (95.9760,40.0570) and\n(97.9470,40.5210) .. (99.9880,40.5210) -- (99.9880,49.1240) -- cycle;\n\\protect\\path[fill=gray!30] (76.5680,13.1940) -- (93.4960,14.5150) -- (92.2210,5.8660)\n-- (79.7910,4.9850) .. controls (76.4300,4.8230) and (76.9160,8.1850) ..\n(76.9160,8.1850) -- (76.5680,13.1940) -- cycle;\n\\protect\\path[fill=gray!30] (45.1720,11.2230) .. controls (48.2790,11.2230) and\n(50.7830,8.7190) .. (50.7830,5.6120) .. controls (50.7830,2.5050) and (48.2790,0.0000) .. (45.1720,0.0000) .. controls (42.0650,0.0000) and (39.5610,2.5050) ..\n(39.5610,5.6120) .. controls (39.5610,8.7190) and (42.0640,11.2230) ..\n(45.1720,11.2230) -- cycle;\n\\protect\\path[fill=gray!30] (10.5290,32.8460) .. controls (11.2480,32.6380) and (11.9440,32.3600) ..\n(12.5930,32.0580) .. controls (14.4020,31.2230) and (16.3960,30.7360) ..\n(18.5060,30.7360) .. controls (20.6160,30.7360) and (22.6100,31.2230) ..\n(24.4190,32.0580) .. controls (26.1580,32.8460) and (28.0830,33.3100) ..\n(30.1240,33.3100) .. controls (32.1650,33.3100) and (34.1120,32.8460) ..\n(35.8740,32.0580) .. controls (37.6590,31.2230) and (39.6540,30.7360) ..\n(41.7640,30.7360) .. controls (43.8730,30.7360) and (45.8910,31.2230) ..\n(47.6760,32.0580) .. controls (49.4150,32.8460) and (51.3640,33.3100) ..\n(53.4050,33.3100) .. controls (55.4450,33.3100) and (57.3930,32.8460) ..\n(59.1550,32.0580) .. controls (60.9400,31.2230) and (62.9580,30.7360) ..\n(65.0450,30.7360) .. controls (67.1550,30.7360) and (69.1730,31.2230) ..\n(70.9580,32.0580) .. controls (72.6960,32.8460) and (74.6680,33.3100) ..\n(76.6860,33.3100) .. controls (78.7260,33.3100) and (80.6740,32.8460) ..\n(82.4370,32.0580) .. controls (84.2220,31.2230) and (86.2400,30.7360) ..\n(88.3490,30.7360) .. controls (90.4370,30.7360) and (92.4530,31.2230) ..\n(94.2400,32.0580) .. controls (95.9780,32.8460) and (97.9270,33.3100) ..\n(99.9670,33.3100) -- (98.0660,17.9710) -- (27.6910,12.0810) --\n(38.3110,1.3680) -- (33.6500,0.9510) -- (23.0500,11.6870) -- (0.0010,9.7860)\n.. controls (-0.1380,17.6460) and (8.6270,30.7130) .. (10.5290,32.8460) --\n(10.5290,32.8460) -- cycle;\n\n\\protect\\end{tikzpicture}}\n~}\n\n\n\\newcommand*{\\myboatright}{%\n\\protect\\raisebox{-0.0000165em}{%\n\\protect\\begin{tikzpicture}[draw=none, x=0.08em, y=0.08em, xscale=0.05, yscale=0.05, inner\nsep=0pt, outer sep=0pt, rotate=90]\n\\protect\\path[fill=cyan!40] (99.9880,49.1240) .. controls (97.9470,49.1240) and (95.9760,48.6600) ..\n(94.2380,47.8720) .. controls (92.4520,47.0370) and (90.4350,46.5500) ..\n(88.3470,46.5500) .. controls (86.2380,46.5500) and (84.2200,47.0370) ..\n(82.4350,47.8720) .. controls (80.6720,48.6600) and (78.7240,49.1240) ..\n(76.6840,49.1240) .. controls (74.6660,49.1240) and (72.6950,48.6600) ..\n(70.9560,47.8720) .. controls (69.1710,47.0370) and (67.1530,46.5500) ..\n(65.0430,46.5500) .. controls (62.9560,46.5500) and (60.9390,47.0370) ..\n(59.1530,47.8720) .. controls (57.3910,48.6600) and (55.4430,49.1240) ..\n(53.4030,49.1240) .. controls (51.3620,49.1240) and (49.4140,48.6600) ..\n(47.6740,47.8720) .. controls (45.8890,47.0370) and (43.8710,46.5500) ..\n(41.7620,46.5500) .. controls (39.6520,46.5500) and (37.6570,47.0370) ..\n(35.8720,47.8720) .. controls (34.1100,48.6600) and (32.1620,49.1240) ..\n(30.1220,49.1240) .. controls (28.0820,49.1240) and (26.1570,48.6600) ..\n(24.4170,47.8720) .. controls (22.6080,47.0370) and (20.6140,46.5500) ..\n(18.5040,46.5500) .. controls (16.3940,46.5500) and (14.4000,47.0370) ..\n(12.5910,47.8720) .. controls (10.8520,48.6600) and (8.9040,49.1240) ..\n(6.8630,49.1240) -- (6.8630,40.5210) .. controls (8.9040,40.5210) and\n(10.8510,40.0570) .. (12.5910,39.2680) .. controls (14.4000,38.4570) and\n(16.3940,37.9700) .. (18.5040,37.9700) .. controls (20.6140,37.9700) and\n(22.6080,38.4570) .. (24.4170,39.2680) .. controls (26.1560,40.0570) and\n(28.0810,40.5210) .. (30.1220,40.5210) .. controls (32.1630,40.5210) and\n(34.1100,40.0570) .. (35.8720,39.2680) .. controls (37.6570,38.4570) and\n(39.6520,37.9700) .. (41.7620,37.9700) .. controls (43.8710,37.9700) and\n(45.8890,38.4570) .. (47.6740,39.2680) .. controls (49.4130,40.0570) and\n(51.3620,40.5210) .. (53.4030,40.5210) .. controls (55.4430,40.5210) and\n(57.3910,40.0570) .. (59.1530,39.2680) .. controls (60.9380,38.4570) and\n(62.9560,37.9700) .. (65.0430,37.9700) .. controls (67.1530,37.9700) and\n(69.1710,38.4570) .. (70.9560,39.2680) .. controls (72.6940,40.0570) and\n(74.6660,40.5210) .. (76.6840,40.5210) .. controls (78.7240,40.5210) and\n(80.6720,40.0570) .. (82.4350,39.2680) .. controls (84.2200,38.4570) and\n(86.2380,37.9700) .. (88.3470,37.9700) .. controls (90.4350,37.9700) and\n(92.4510,38.4570) .. (94.2380,39.2680) .. controls (95.9760,40.0570) and\n(97.9470,40.5210) .. (99.9880,40.5210) -- (99.9880,49.1240) -- cycle;\n\\protect\\path[fill=gray!30] (76.5680,13.1940) -- (93.4960,14.5150) -- (92.2210,5.8660)\n-- (79.7910,4.9850) .. controls (76.4300,4.8230) and (76.9160,8.1850) ..\n(76.9160,8.1850) -- (76.5680,13.1940) -- cycle;\n\\protect\\path[fill=gray!30] (45.1720,11.2230) .. controls (48.2790,11.2230) and\n(50.7830,8.7190) .. (50.7830,5.6120) .. controls (50.7830,2.5050) and (48.2790,0.0000) .. (45.1720,0.0000) .. controls (42.0650,0.0000) and (39.5610,2.5050) ..\n(39.5610,5.6120) .. controls (39.5610,8.7190) and (42.0640,11.2230) ..\n(45.1720,11.2230) -- cycle;\n\\protect\\path[fill=gray!30] (10.5290,32.8460) .. controls (11.2480,32.6380) and (11.9440,32.3600) ..\n(12.5930,32.0580) .. controls (14.4020,31.2230) and (16.3960,30.7360) ..\n(18.5060,30.7360) .. controls (20.6160,30.7360) and (22.6100,31.2230) ..\n(24.4190,32.0580) .. controls (26.1580,32.8460) and (28.0830,33.3100) ..\n(30.1240,33.3100) .. controls (32.1650,33.3100) and (34.1120,32.8460) ..\n(35.8740,32.0580) .. controls (37.6590,31.2230) and (39.6540,30.7360) ..\n(41.7640,30.7360) .. controls (43.8730,30.7360) and (45.8910,31.2230) ..\n(47.6760,32.0580) .. controls (49.4150,32.8460) and (51.3640,33.3100) ..\n(53.4050,33.3100) .. controls (55.4450,33.3100) and (57.3930,32.8460) ..\n(59.1550,32.0580) .. controls (60.9400,31.2230) and (62.9580,30.7360) ..\n(65.0450,30.7360) .. controls (67.1550,30.7360) and (69.1730,31.2230) ..\n(70.9580,32.0580) .. controls (72.6960,32.8460) and (74.6680,33.3100) ..\n(76.6860,33.3100) .. controls (78.7260,33.3100) and (80.6740,32.8460) ..\n(82.4370,32.0580) .. controls (84.2220,31.2230) and (86.2400,30.7360) ..\n(88.3490,30.7360) .. controls (90.4370,30.7360) and (92.4530,31.2230) ..\n(94.2400,32.0580) .. controls (95.9780,32.8460) and (97.9270,33.3100) ..\n(99.9670,33.3100) -- (98.0660,17.9710) -- (27.6910,12.0810) --\n(38.3110,1.3680) -- (33.6500,0.9510) -- (23.0500,11.6870) -- (0.0010,9.7860)\n.. controls (-0.1380,17.6460) and (8.6270,30.7130) .. (10.5290,32.8460) --\n(10.5290,32.8460) -- cycle;\n\n\\protect\\end{tikzpicture}}\n~}\n\n\\newcommand*\\drawitem[6]%\n{%\n\\ifnum#1=0\n\\edef\\mylist{}\n\\else\n\\ifnum#1=1\n\\edef\\mylist{0,1}\n\\else\n\\edef\\mylist{1,...,#1}\n\\fi\n\\foreach \\x in \\mylist\n{\\draw[color=#4, xscale=0.5,yscale=0.5] (#2)\nnode[draw=none, xshift=-\\x*0.20cm + #6, yshift=#5, font=\\small] (s\\x) {\\tiny{#3}};}\n\\fi\n}\n\n\n\\begin{document}\n\n\\tikzset{\npics/can_mission/.style args={#1/#2/#3/#4/#5}{\ncode = {\n\\node[river,draw=none] (root) {\n\\nodepart{one}\n\\nodepart[color=blue, draw=none]{two}\n\\ifthenelse{\\equal{\\detokenize{#3}}{\\detokenize{left}}}\n{ {\\myboatleft} }\n{ {\\myboatright} }\n\\nodepart{three}\n};\n% Cannibals left, implementation using ifthenelse, kept for reference\n% \\ifthenelse{\\equal{#1}{0}}\n% {\\foreach \\x in {}}\n% { \\ifthenelse{\\equal{#1}{1}}\n%\t{\\foreach \\x in {0,1}}\n%\t{\\foreach \\x in {1,...,#1}}\n% }\n% Cannibals left\n\\drawitem{#1}{root.one}{\\faHandScissorsO}{red}{0.15cm}{0cm};\n% Missionaries left\n\\drawitem{#2}{root.one}{\\faHandPaperO}{green}{-0.15cm}{0cm};\n\n% Cannibals right\n\\drawitem{#4}{root.three}{\\faHandScissorsO}{red}{0.15cm}{0.45cm};\n% Missionaries right\n\\drawitem{#5}{root.three}{\\faHandPaperO}{green}{-0.15cm}{0.45cm};\n}\n},\n% Adding cannibals and missionaries background\nriver/.style={rotate=90, rectangle split, minimum width= 1 cm, rectangle split parts=3,draw, anchor=center,  rectangle split part fill={white!60,blue!60,white!60}},\n}\n\\begin{tikzpicture}[draw=none]\n\\draw pic {can_mission=3/3/right/3/3};\n\\hfill \\break\n\\end{tikzpicture}\n\n\\end{document}\n\n% END COMPLETE CODE"}},"/ArtificialIntelligence/crossover":{"title":"Description","data":{"":"The code above is a LaTeX document that creates a diagram using the TikZ package. The diagram consists of four rectangles, each of which is divided into two parts using the \"rectangle split\" option of TikZ. Two of the rectangles are labeled \"Set of Parents\" and the other two are labeled \"Set of Children\". The rectangles in each set are colored with different shades of blue, red, yellow, and green.The four rectangles are arranged in a specific way, with the two rectangles in the Set of Parents arranged horizontally and the two rectangles in the Set of Children arranged below the Set of Parents with some vertical separation. The rectangles are connected using arrows, which are drawn using the \"\\path\" command with the \"->\" option. The arrows connect specific parts of the rectangles, as specified by the \"one\" and \"two\" options of the \"nodepart\" command. The result is a simple diagram that shows how the two sets of rectangles are connected.","keywords#Keywords":"tikz, shapes.multipart, positioning, rectangle split, nodepart, styles, nodes, paths, edges.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.multipart}\n\\usetikzlibrary{positioning}\n\n\\tikzset{\nchromosome/.style 2 args={\nrectangle split ,\nrectangle split parts=2,\nrectangle split horizontal,\nrectangle split part fill={#1,#2},\ndraw=black, very thick,\nminimum height=2.5em,\ntext width=3.0cm,\ninner sep=2pt,\ntext centered,\n}\n}\n\n\\begin{document}\n\\begin{tikzpicture}\n%% Rectangles\n% Set of Parents\n\\node [chromosome={blue!15}{red!20}] (a) { \\nodepart{two} } ;\n\\node [chromosome={yellow!30}{green!20}, right = of a] (b) { \\nodepart{two} } ;\n% Set of Children\n\\node [chromosome={blue!15}{yellow!30}, below = 2 cm of a] (c) { \\nodepart{two} } ;\n\\node [chromosome={red!20}{green!20}, right = of c] (d) { \\nodepart{two} } ;\n\n% Labels\n\\node[right = of b] () {\\textbf{Set of Parents}};\n\n\\node[right = of d] () {\\textbf{Set of Children}};\n\n% Paths\n\\path [->, very thick] (a.one south) edge[] node {}(c.one north);\n\\path [->, very thick] (a.two south) edge[out=-90, in=90] node {}(d.one north);\n\n\\path [->, very thick] (b.one south) edge[out=-90, in=90] node {}(c.two north);\n\n\\path [->, very thick] (b.two south) edge[] node {}(d.two north);\n\n\\end{tikzpicture}\n\\end{document}"}},"/ArtificialIntelligence/feature_selection":{"title":"Description","data":{"":"The code above is a LaTeX document that uses the TikZ package to create a flowchart diagram. The diagram depicts the steps of an evolutionary algorithm, showing a population of individuals that are subject to various operations, including crossover, inversion, and mutation, and that undergo survivor selection to produce the next generation of parents. The diagram also shows that the algorithm starts with a random initialization and ends when a termination condition is met. The diagram includes various nodes with different styles and positions, as well as arrows connecting the nodes to indicate the flow of the algorithm. The nodes include a population, parents, and offspring, as well as nodes for random initialization and termination, with the latter node including a label that describes the specific termination condition used in the algorithm.","keywords#Keywords":"tikz, arrows, shadows, positioning, nodes, font, styles, rectangle, draw, text width, centered, minimum height, drop shadow, fill, rounded corners, line, latex, termination, population, parents, offspring, random initialization, survivor selection, crossover, inversion, mutation, features, maximum features.","source-code#Source Code":"\\documentclass[margin=3pt]{standalone}\n\\usepackage[utf8]{inputenc}\n\\usepackage{tikz}\n\\usetikzlibrary{arrows,shadows,positioning}\n\n\\tikzset{\nframe/.style={\nrectangle, draw,\ntext width=6em, text centered,\nminimum height=4em,drop shadow,fill=yellow!40,\nrounded corners,\n},\nline/.style={\ndraw, -latex',rounded corners=3mm,\n}\n}\n\n\\begin{document}\n\\begin{tikzpicture}[font=\\small\\sffamily\\bfseries,very thick,node distance = 4cm]\n\\node [frame] (pop) {Population};\n\\node [above=2cm, text width=2cm, align=center, left of=pop] (init) {Random \\\\ Initialisation};\n\\node [below=2cm, text width = 2cm, align = center, left of=pop] (term) {Termination};\n\\node [frame, above=2cm, right of=pop] (parents)  {Parents};\n\\node [frame, below=2cm, right of=pop] (off)  {Offspring};\n\n% termination condition label\n\\node [draw=none, text width=3cm, above right = -0.1cm and -1cm of term ] () {(unique features \\\\ less than $\\frac{1}{3}$ of \\\\ maximum features)};\n\\path [line] (parents)\n-- node[right,align=left,pos=.5] {Crossover\\\\[3mm]Inversion\\\\[3mm]Mutation}\n(off);\n\\path [line] (init) |- (pop.170);\n\\path [line] (pop.190) -| (term);\n\\path [line] (off) -| node[below,pos=.25, align=center] {Survivor\\\\ selection}(pop);\n\\path [line] (pop) |- node[above,pos=.75, align=center] {Parents\\\\ selection}(parents);\n\\end{tikzpicture}\n\\end{document}"}},"/ArtificialIntelligence/ga":{"title":"Description","data":{"":"The code above defines a simple flowchart using the TikZ package in LaTeX. The flowchart consists of several blocks representing different stages of a genetic algorithm. The blocks are defined using the \\texttt{tikzstyle} command with different styles, such as \\texttt{decision} and \\texttt{block}. The edges between the blocks are drawn using the \\texttt{line} and \\texttt{path} styles. The nodes are positioned using the \\texttt{positioning} TikZ library.The flowchart starts with a block for population initialization, followed by fitness assignment, selection, crossover, mutation, and inversion. The flow then cycles back to the selection block until a termination criterion is met, at which point the algorithm finishes and reaches the final \"Done\" block.","keywords#Keywords":"Keywords: tikz, nodes, edges, styles, diamond, rectangle, draw, fill, text width, text badly centered, node distance, inner sep, rounded corners, minimum height, color, latex'.","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage[margin=1.0in]{geometry}\n\\usepackage{tikz}\n\\usetikzlibrary{arrows,shapes,positioning}\n\n\\begin{document}\n\\tikzstyle{decision}=[diamond, draw, fill=yellow!20,\ntext width=4em, text badly centered, node distance=3cm,\ninner sep=0pt]\n\\tikzstyle{block}=[rectangle, draw, fill=blue!20,\ntext width=8em, text badly centered, rounded corners,\nminimum height=4em]\n\\tikzstyle{line}=[draw, very thick, color=black!75, -latex']\n\n\\tikzstyle{path}=[draw, very thick, color=black!75, -]\n\n\\begin{tikzpicture}[node distance=2cm, auto]\n% Place nodes\n\\node [block] (pop_init) {Population Initialization};\n\\node [block, below of=pop_init] (fit_ass)\n{Fitness Assignment};\n\\node [block, below of=fit_ass] (selection)\n{Selection};\n\\node [draw=none, right of=selection] (pointer)\n{};\n\\node [block, below of=selection] (crossover)\n{Crossover};\n\n\\node [block, below of=crossover] (mutation)\n{Mutation};\n\n\\node [block, below of=mutation] (inversion)\n{Inversion};\n\n\\node [block, left = 2cm of selection] (done)\n{Done};\n\n\n% Draw edges\n\\path [line] (pop_init) -- (fit_ass);\n\\path [line] (fit_ass) -- (selection);\n\\path [line] (selection) -- (crossover);\n\\path [line] (crossover) -- (mutation);\n\\path [line] (mutation) -- (inversion);\n\\path [path] (inversion) -| (pointer.center);\n\n\\path [line] (pointer.center) -- (selection);\n\n\\path [line] (selection) -- (done);\n\\end{tikzpicture}\n\\end{document}"}},"/ArtificialIntelligence/genetic_crossover":{"title":"Description","data":{"":"The code above produces a simple TikZ diagram that shows a single point of crossover between two parent chromosomes during genetic algorithm crossover. The diagram consists of two parallel nodes on the left and right sides, each of which displays a string of digits representing a chromosome. A dashed line indicates the point of crossover, and an arrow connects the two nodes to indicate the crossover operation. The textls command is used to adjust the letter spacing of the digits in the chromosome strings. The document class is set to standalone, which produces a single PDF image output. The fontenc package is used to set the font encoding to T1, and the lmodern and microtype packages are used to improve the overall appearance of the text.","keywords#Keywords":"tikz, draw, dashed, node, text width, textls, arrow, midways","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usepackage[T1]{fontenc}\n\\usepackage{lmodern}\n\\usepackage{microtype}\n\\begin{document}\n\\begin{tikzpicture}\n\\node[draw=none, text width=3.5cm] at (0, 0)   (start) {Parent 1: \\textls[100]{1324421} \\hfill \\newline Parent 2: \\textls[100]{2751421}};\n\\draw[thick,dashed] (0.45,0.5) -- (0.45,-0.5);\n\\draw[->] (1.5, 0) -- (3, 0) node[below,midway] {crossover};\n\n\\node[draw=none, text width=3.5cm] at (4.9, 0)   (start) {Parent 1: \\textls[100]{1321421} \\hfill \\newline Parent 2: \\textls[100]{2754421}};\n\\draw[thick,dashed] (5.35,0.5) -- (5.35,-0.5);\n% \\node[draw=none, text width=3cm] at (3.5, 0)   (start) {Parent 2: 2754421};\n\\end{tikzpicture}\n\\end{document}"}},"/ArtificialIntelligence/tictactoe":{"title":"Description","data":{"":"The code above is a LaTeX document that produces a game tree diagram using the TikZ and Forest packages. The game tree diagram represents the game of tic-tac-toe with the use of a ternary tree.The Forest package is used to define the styles of the nodes in the tree, such as the content of each node, the label positions, and the edge styles. The make tab style defines a tabular environment for the content of each node. The label position style is used to specify the position of the label for each node. The TTT and TTT* styles define the content and edge styles for the tree, with TTT* being a special style for empty nodes.The code defines a root node with no content and three children, each representing a possible first move in tic-tac-toe. The children of each of these nodes represent the second move, and so on until the end of the game is reached. The content of each node in the tree represents the state of the game at that point, with \"x\" and \"o\" representing the players' moves. The label of each node shows the score for the corresponding player, given as an integer value. The edges represent the possible moves that can be made from one state to another.The resulting diagram shows all possible game states and their corresponding scores for the two players. It is a helpful visual representation of the possible outcomes of the game.","keywords#Keywords":"forest, tree, tikz, game, tic-tac-toe, chart, table","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usepackage{forest,calc}\n\\forestset{\nmake tab/.style args={#1:#2:#3/#4:#5:#6/#7:#8:#9}{%\ncontent={%\n\\tabcolsep=.4\\tabcolsep\n\\begin{tabular}{p{\\widthof{x}}|p{\\widthof{x}}|p{\\widthof{x}}}\n#1 & #2 & #3\\\\\\hline#4&#5&#6\\\\\\hline#7&#8&#9\n\\end{tabular}}},\nlabel position r/.initial=right,\nlabel position b/.initial=below\n}\n\\begin{document}\n\\begin{forest}\nTTT/.style args={#1:#2}{\nmake tab/.expanded=\\forestove{content},\nlabel={\\pgfkeysvalueof{/forest/label position #1}:$#2$},\nedge={->}\n},\nTTT*/.style={\nmake tab=::/::/::,\ncontent/.expand once=%\n\\expandafter\\vphantom\\expandafter{\\romannumeral-`0\\forestov{content}},\ndraw=none,\nappend after command={(\\tikzlastnode.north) edge (\\tikzlastnode.south)},\nfor descendants={before computing xy={l*=1.8}},\n},\nth/.style=very thick,\nfor tree={node options=draw, inner sep=+0pt, parent anchor=south, child anchor=north}\n%\n[::/::/::, TTT=r:0\n[x::/::/::, TTT=r:-1\n[x:o:/::/::, TTT=b: 1, th]\n[x::/:o:/::, TTT=b:-1]\n[x::o/::/::, TTT=b: 0, th]\n[x::/::/::o, TTT=b: 0, th]\n[x::/::o/::, TTT=b: 1, th]\n]\n[::/::x/::, TTT=r:0,\n[,TTT* % this is just cheating :(\n[o::/::x/::, TTT=b:1]\n[:o:/::x/::, TTT=b:0]\n]\n]\n[:x:/::/::, TTT=r:-2\n[:x:o/::/::, TTT=b:-1, th]\n[:x:/:o:/::, TTT=b:-2]\n[:x:/::/:o:, TTT=b: 0, th]\n[:x:/::/o::, TTT=b:-1, th]\n[:x:/o::/::, TTT=b: 0, th]\n]\n]\n\\end{forest}\n\\end{document}"}},"/BlogDiagrams/buildingDapp":{"title":"Description","data":{"":"The LaTeX code above uses the smartdiagram package and the tikz package to create a connected constellation diagram. The planet and satellite styles are defined with a regular polygon shape with six sides. The diagram is created using the \\smartdiagram command, which takes the connected constellation diagram option to specify the type of diagram to create. The diagram consists of seven nodes representing steps to build a Dapp, with each node connected to the next by an arrow. The nodes are labeled with text split across two lines, and some nodes have a forward slash to split the text into two parts. The connection planet satellite style is used to draw the arrow connections between nodes in the shape of a hexagon with a color that is defined by the color scheme used by the smartdiagram package.","keywords#Keywords":"smartdiagram, tikz, shapes.geometric, calc, planet, satellite, connected constellation diagram, build a dapp, set up truffle box, build smart contracts, automated testing, build front end, ci/cd, documentation, polishing.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usepackage{smartdiagram}\n\\usetikzlibrary{shapes.geometric,calc}\n\\begin{document}\n\\tikzset{\nplanet/.append style={regular polygon, regular polygon sides=6},\nsatellite/.append style={regular polygon, regular polygon sides=6},\nevery picture/.append style={rotate=30},\nconnection planet satellite/.style={\nbend right/.style=,\nevery edge/.style={fill=\\col},\nto path={\n\\pgfextra\n\\path[draw=none, fill=none] (\\tikztostart)\n-- coordinate[at start] (@start@) coordinate[at end] (@target@) (\\tikztotarget);\n\\endpgfextra\n\\ifnum\\xi<\\maxsmitem % to disable the last arrow\n($(@start@)!.6cm!90:(@target@)$) -- ($(@target@)!.25cm!-90:(@start@)$)\n-- ($(@target@)!.25cm!90:(@start@)$) -- ($(@start@)!.6cm!-90:(@target@)$)\n-- cycle\n\\fi}}}\n\\smartdiagram[connected constellation diagram]{\nBuild a Dapp,\nSet up truffle box,\nBuild Smart Contracts,\nAutomated Testing,\nBuild Front /\\\\ End,\nCI/CD,\nDocumentation / \\\\ Polishing}\n\\end{document}"}},"/BlogDiagrams/chat-decision-tree":{"title":"Description","data":{"":"The code above is a LaTeX document that produces a decision tree using the Forest package. The decision tree is used to illustrate the possible paths of a conversation with a chatbot. The tree has four main branches: Resume, Education, Personal, and Chatbot. Each of these branches represents a possible topic of conversation that the user can engage in with the chatbot.The branches are color-coded using a gradient shading technique that goes from one color to another, indicating different levels of the tree. The colors used are cyan, blue, pink, wild strawberry, spring green, and forest green. The gradient shading is achieved using the \"branch shade\" style, which takes two arguments: the starting color and the ending color.The \"family tree\" style is used to define the general structure of the decision tree. This style creates forked edges, rounded corners, and minimum width and height for each node. The edges are drawn with an arrowhead and are thick. The font used is sans-serif, and the text is centered.The \"gap\" and \"twist\" styles are used to define the spacing between the nodes and the level at which the tree branches. The \"gap\" style sets the distance between nodes to 10mm, and the \"twist\" style sets the level at which the tree branches to 2.The decision tree itself is defined using the \"forest\" environment, which is provided by the Forest package. The root node of the tree is the chatbot, and its children are the Resume, Education, and Personal branches. Each of these branches has one or more children representing subtopics of conversation.Overall, the decision tree is a useful tool for visualizing the possible paths of a conversation with a chatbot and can be used to help design more effective chatbot interactions.","keywords#Keywords":"tikz, matrix, positioning, arrows, shapes.","source-code#Source Code":"% Decision Tree for conversation\n\n\\documentclass[border=10pt,multi,tikz,dvipsnames,svgnames,rgb]{standalone}\n\\usepackage[edges]{forest}\n\\usetikzlibrary{arrows.meta}\n\\forestset{\ndeclare dimen register=gap,\ngap'=10mm,\ndeclare count register=twist,\ntwist'=2,\nfamily tree/.style={\nforked edges,\nfor tree={\nrounded corners,\nminimum width/.wrap pgfmath arg={##1}{(\\textwidth-6*(gap))/3},\nminimum height=4ex,\nedge={-Latex},\nfont=\\sffamily,\ntext centered,\n% blur shadow,\nedge=thick,\n},\nwhere={level()<(twist)}{%\nparent anchor=children,\nl sep+=10pt,\ns sep'+=10pt,\n}{%\nfolder,\ngrow'=0,\nl sep'+=2pt,\nif={level()==(twist)}{%\nbefore typesetting nodes={child anchor=north},\n!u.s sep'+=10pt,\nedge path'={%\n(!u.parent anchor) -- ++(0,-10pt) -| (.child anchor)\n},\n}{},\n},\n},\nbranch shade/.style args={from #1 to #2}{\nbefore typesetting nodes={\ntempcountc/.max={level}{current,tree},\ntempcountb/.option=level,\ntempcounta=(tempcountc)-(tempcountb)+1,\ntemptoksa/.option=name,\nTeX/.wrap pgfmath arg={\n\\colorlet{##1col1}{#1}\n\\colorlet{##1col2}{#2}\n}{name()},\nfor tree={\nrounded corners,\ntop color/.wrap 2 pgfmath args={##2col2!##1!##2col1}{100*((level()-(tempcountb))/(tempcounta))}{(temptoksa)},\n+edge/.wrap 2 pgfmath args={##2col2!##1!##2col1}{100*((level()-(tempcountb))/(tempcounta))}{(temptoksa)},\nbottom color/.wrap 2 pgfmath args={##2col2!##1!##2col1}{100*((level()-(tempcountb)+1)/(tempcounta))}{(temptoksa)},\ndraw/.wrap 2 pgfmath args={##2col2!##1!##2col1}{100*((level()-(tempcountb)+1)/(tempcounta))}{(temptoksa)},\nthick,\n},\n}\n},\n}\n\\begin{document}\n\\begin{forest}\nfamily tree,\n[Chatbot, left color=cyan, right color=SpringGreen, middle color=Pink, draw=Silver\n[Resume, branch shade=from cyan to blue\n[Co-op\n[ENGR 001 \\& 002\n[ENGR 003 \\& 004]\n]\n]\n[Github\n[Projects]\n[Academic]\n]\n]\n[Education, branch shade=from Pink to WildStrawberry\n[UVIC\n[SENG]\n[CENG]\n]\n]\n[Personal, branch shade=from SpringGreen to ForestGreen\n[Blockchain\n[Ethereum]\n[Hashgraph]\n]\n]\n]\n\\end{forest}\n\n\\end{document}"}},"/BlogDiagrams/ciComparsionTable":{"title":"Description","data":{"":"The code above is a LaTeX document that creates a table comparing different continuous integration tools: Travis CI, GitLab CI, and CircleCI.The document uses the standalone document class and loads several packages, including xcolor, tabu, and colortbl. It defines the row colors to be used in the table using the taburowcolors command with the colors orange and black!20.The table itself is defined using the tabu environment with four columns, one of which is right-aligned and has an orange background with black text. The other columns use the X column type to fill the remaining space equally. The table has a black background with the header row having a darker background of black!80. The table cells have a small font size of sffamily\\footnotesize and a row separation of 6pt.The table compares the three CI tools with respect to their use of Docker images, support for private builds, and ease of use. The corresponding cells are marked as \"Yes\", \"No\", or \"Yes (Education)\".","keywords#Keywords":"latex, tabu, colortbl, tabular, rowcolors, cellcolor, color","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{xcolor}\n\\usepackage{tabu}\n\\usepackage{colortbl}\n\n\\begin{document}\n\n\\taburowcolors[2]{orange .. black!20}\n\n\\sffamily\\footnotesize\n\\tabulinesep=6pt\n\\begin{tabu}{|>{\\cellcolor{orange!60}\\color{black}}r|X[cm]|X[cm]|X[cm]|}\n\\hline\n\\rowcolor{black!80}\\strut  & \\color{black}Travis CI & \\color{black} GitLab CI & \\color{black} CircleCI \\\\\nDocker Images & \\color{black}No & \\color{black}Yes & \\color{black}Yes \\\\\nPrivate Builds & Yes (Education) & Yes & Yes \\\\\nEasy To Use & \\color{black}Yes & \\color{black}Yes & \\color{black}Yes \\\\\n\\hline\n\\end{tabu}\n\n\\end{document}"}},"/BlogDiagrams/circle-ci-pipeline":{"title":"Description","data":{"":"The code above is a LaTeX document that uses the TikZ package to create a diagram. The diagram shows a CI/CD pipeline with different components and stages. The diagram is created using different TikZ styles to define the shape and appearance of different nodes and lines, and it uses the positioning library to arrange the nodes on the canvas. The diagram includes rectangular blocks representing Git Commit, CI Pipeline, Jobs, and Infura Deployment, and dashed rectangular blocks representing Truffle Tests, Documentation, and Test Coverage. It also includes three other rectangular blocks representing Ropsten, Rinkeby, and Kovan, and an arrowed line connecting the different nodes to show the flow of the pipeline. The fontawesome5 package is used to include the thumbs-up icon in the diagram.","keywords#Keywords":"fontawesome5, tikz, fit, arrows, calc, positioning, rectangle, draw, fill, text width, text centered, minimum height, dashed, inner sep, -latex', auto, above, below.","source-code#Source Code":"\\documentclass[border=10pt]{standalone}\n\\usepackage{fontawesome5}\n\\usepackage{tikz}\n\\usetikzlibrary{fit,arrows,calc,positioning}\n\n\\begin{document}\n\n\\tikzstyle{block} = [rectangle, draw, fill=white,text width=16em,  text centered, minimum height=4em, thick]\n\n\\tikzstyle{blks} = [rectangle, draw, fill=white, text width=6em,  text centered, minimum height=4em, dashed]\n\n\\tikzstyle{big} = [rectangle, draw, inner sep=0.5cm]\n\n\\tikzstyle{line} = [draw, -latex',thick]\n\n\\begin{tikzpicture}[auto]\n\\node [block](exe) {\\textbf{Git Commit}};\n\\node [block, below=of exe] (mgm) {\\textbf{CI Pipeline}};\n\\node [blks, below=2cm of mgm] (fin) {Truffle Tests};\n\\node [blks, right=of fin] (prod) {Documentation};\n\\node [blks, left=of fin] (resch) {Test Coverage};\n\n\\node[above =0.2cm of  fin] (A) {\\textbf{Jobs}};\n\\node [below = 0.3 of mgm, big,fit=(fin) (prod)(resch)(A), inner sep=0.5cm] (dept) {};\n\n\\node [blks, below=2.5cm of fin] (ropsten) {\\faThumbsUp Ropsten};\n\\node [blks, right=of ropsten] (rinkeby) {\\faThumbsUp Rinkeby};\n\\node [blks, left=of ropsten] (kovan) {Kovan};\n\n\\node[above =0.2cm of  ropsten] (B) {\\textbf{Infura Deployment}};\n\\node [below = 0.3 of mgm, big,fit=(ropsten) (rinkeby)(kovan)(B), inner sep=0.5cm] (infura) {};\n\n\n\n\\path [line] (exe)--(mgm);\n\\path [line] (mgm) -- (dept);\n\\path [line] (resch)--(fin);\n\\path [line] (fin)--(prod);\n\\path [line] (dept) -- (infura);\n\n\\end{tikzpicture}\n\\end{document}"}},"/BlogDiagrams/circleDia":{"title":"Description","data":{"":"The given LaTeX code produces a diagram depicting the Sensor Observation Sample Actuator (SOSA) model with various components labeled on it. The diagram is circular in shape with the SOSA model at the center and various components arranged around it as arcs.The components depicted in the diagram are:\nSemantic Sensor Network (SSN)\nSystem Capabilities\nSystem Relation\nO&M Alignment Module\nPROV Alignment Module\nOBOE Alignment Module\nDolce-UltraLite Alignment Module\nSSNX Alignment Module\n\nEach component is represented as an arc with a label on it, and arrows are drawn from the SOSA model to each component to indicate their relationship. The colors used for the arcs are ocre, sky, and skybox.","keywords#Keywords":"The keywords for the LaTeX diagram above are: TikZ, nodes, styles, edges, arrows, positioning, text, fonts, shapes, colors.","source-code#Source Code":"\\documentclass[border=5pt]{standalone}\n\\usepackage{xcolor}\n\\definecolor{ocre}{HTML}{800000}\n\\definecolor{sky}{HTML}{C6D9F1}\n\\definecolor{skybox}{HTML}{5F86B3}\n\\usepackage{tikz}\n\\usepackage{pgfmath}\n\\usetikzlibrary{decorations.text, arrows.meta,calc,shadows.blur,shadings}\n\\renewcommand*\\familydefault{\\sfdefault} % Set font to serif family\n\n% arctext from Andrew code with modifications:\n%Variables: 1: ID, 2:Style 3:box height 4: Radious 5:start-angl 6:end-angl 7:text {format along path}\n\\def\\arctext[#1][#2][#3](#4)(#5)(#6)#7{\n\n\\draw[#2] (#5:#4cm+#3) coordinate (above #1) arc (#5:#6:#4cm+#3)\n-- (#6:#4) coordinate (right #1) -- (#6:#4cm-#3) coordinate (below right #1) arc (#6:#5:#4cm-#3) coordinate (below #1)\n-- (#5:#4) coordinate (left #1) -- cycle;\n\\def\\a#1{#4cm+#3}\n\\def\\b#1{#4cm-#3}\n\\path[\ndecoration={\nraise = -0.5ex, % Controls relavite text height position.\ntext  along path,\ntext = {#7},\ntext align = center,\n},\ndecorate\n]\n(#5:#4) arc (#5:#6:#4);\n}\n\n%arcarrow, this is mine, for beerware purpose...\n%Function: Draw an arrow from arctex coordinate specific nodes to another\n%Arrow start at the start of arctext box and could be shifted to change the position\n%to avoid go over another box.\n%Var: 1:Start coordinate 2:End coordinate 3:angle to shift from acrtext box\n\\def\\arcarrow(#1)(#2)[#3]{\n\\draw[thick,->,>=latex]\nlet \\p1 = (#1), \\p2 = (#2), % To access cartesian coordinates x, and y.\n\\n1 = {veclen(\\x1,\\y1)}, % Distance from the origin\n\\n2 = {veclen(\\x2,\\y2)}, % Distance from the origin\n\\n3 = {atan2(\\y1,\\x1)} % Angle where acrtext starts.\nin (\\n3-#3: \\n1) -- (\\n3-#3: \\n2); % Draw the arrow.\n}\n\n\\begin{document}\n\\begin{tikzpicture}[\n% Environment Cfg\nfont=\\sf    \\scriptsize,\n% Styles\nmyarrow/.style={\nthick,\n-latex,\n},\nCenter/.style ={\ncircle,\nfill=ocre,\ntext=white,\nalign=center,\nfont =\\footnotesize\\bf,\ninner sep=1pt,\n},\nRedArc/.style ={\ncolor=black,\nthick,\nfill=ocre,\nblur shadow, %Tikzedt not suport online view\n},\nSkyArc/.style ={\ncolor=skybox,\nthick,\nfill=sky,\nblur shadow, %Tikzedt not suport online view\n},\n]\n\n% Drawing the center\n\\node[Center](SOSA) at (0,0) { Sensor \\\\ Observation, \\\\ Sample, and \\\\ Actuator \\\\(SOSA)};\n\\coordinate (SOSA-R) at (0:1.2); % To make compatible with \\arcarrow macro.\n\n% Drawing the Tex Arcs\n\n% \\Arctext[ID][box-style][box-height](radious)(start-angl)(end-angl){|text-styles| Text}\n\n\\arctext[SSN][RedArc][8pt](2.25)(180)(60){|\\footnotesize\\bf\\color{white}| Semantic Sensor Network (SSN)};\n\\arctext[SCap][RedArc][8pt](2.25)(50)(-20){|\\footnotesize\\bf\\color{white}| System Capabilities};\n\\arctext[SRel][SkyArc][8pt](2.25)(190)(255){|\\footnotesize\\color{black}| System Relation};\n\\arctext[OMAM][RedArc][5pt](3.5)(205)(265){|\\scriptsize\\bf\\color{white}| O{\\&}M Alignment Module};\n\\arctext[PROV][SkyArc][5pt](3.5)(270)(320){|\\scriptsize| PROV Alignment Module};\n\\arctext[OBOE][SkyArc][5pt](3.5)(-35)(20){|\\scriptsize| OBOE Alignment Module};\n\\arctext[DUAM][SkyArc][5pt](4.5)(215)(150){|\\scriptsize| Dolce-UltraLite Alingment Module};\n\\arctext[SSNX][SkyArc][5pt](4.5)(145)(80){|\\scriptsize| SSNX Alingment Module};\n\n%ADITIONAL\n\\arctext[NEW][\ncolor=white,\nshade,\nupper left=red,\nupper right=black!50,\nlower left=blue,\nlower right=blue!50,\nrounded corners = 8pt\n][8pt](5.2)(100)(-20){|\\footnotesize\\bf\\color{white}| You can create and use all the style options for shapes and text};\n\n%Drawing the Arrows\n%\\arcarrow(above/below ID)(abobe/below ID)[shift]\n\\arcarrow(below DUAM)(above SRel)[15];\n\\arcarrow(below SSNX)(above SSN)[35];\n\\arcarrow(below SSN)(SOSA-R)[60];\n\\arcarrow(below right OMAM)(SOSA-R)[4];\n\\arcarrow(below right PROV)(SOSA-R)[25];\n\\arcarrow(below OBOE)(SOSA-R)[-5];\n\n%Same level Arrows\n\\draw[myarrow] (left SSNX) -- (right DUAM);\n\\draw[myarrow] (left SSN) -- (left SRel);\n\\draw[myarrow] (left SCap) -- (right SSN);\n\n\\draw[myarrow] (-5,-3.5) coordinate (legend) -- ++(.8,0) node[anchor=west] {owl: imports (extends)};\n\\draw[RedArc] (legend)++(0,-0.4) rectangle ++(.8,-.3)++(0,.2) node[anchor=west] {normative};\n\\draw[SkyArc] (legend)++(0,-1) rectangle ++(.8,-.3)++(0,.2) node[anchor=west, color=black] {non-normative};\n\n\\end{tikzpicture}\n\n\\end{document}"}},"/BlogDiagrams/discordDiagram":{"title":"Description","data":{"":"The code above is a LaTeX document that creates a diagram using TikZ. The diagram consists of four rectangular blocks arranged horizontally, with each block containing a matrix of nodes. The nodes are formatted using the \"myiblock\" style, which gives them a colored background, rounded corners, and white text. Each block has a different color scheme, and the nodes within them are labeled with various icons from the Font Awesome package. The nodes are arranged in a matrix using the \"myoblock\" style, and the labels for each matrix are set using the \"mylabel\" style. The overall effect is a visually appealing and informative diagram showing various software tools and services related to code repositories, entertainment, information, and tracking.","keywords#Keywords":"standalone, fontawesome, tikz, matrix, positioning, color, iblock, oblock, label, faRss, Bitbucket, Github, Gitlab, Tech Books, Games, Rep & Elo, EthDev, BChain, AI, Code, Tracking, Web Hooks, Redmine, Apis, Trello, faBook, faGamepad, faStackOverflow, faReddit, faBitcoin, faTrophy, faCode, faThLarge, faTicket.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{fontawesome}\n\n\\usepackage{tikz}\n\\usetikzlibrary{matrix, positioning}\n\n\\definecolor{bluei}{RGB}{83,116,191}\n\\definecolor{blueii}{RGB}{207,212,232}\n\\definecolor{greeni}{RGB}{135,200,81}\n\\definecolor{greenii}{RGB}{216,235,207}\n\\definecolor{redi}{RGB}{238, 150, 140}\n\\definecolor{redii}{RGB}{100,60,50}\n\n\\definecolor{purpi}{RGB}{141, 108, 171}\n\\definecolor{purpii}{RGB}{100,60,50}\n\\tikzset{\nmyiblock/.style 2 args={\ndraw=white,\nfill=#1,\nline width=1pt,\nrounded corners,\nminimum height=1cm,\nalign=center,\ntext=white,\nfont=\\sffamily,\ntext width=#2\n},\nmyoblock/.style={\nmatrix of nodes,\nfill=#1,\nrounded corners,\nalign=center,\ninner xsep=10pt,\ndraw=none,\nrow sep=0.5cm\n},\nmylabel/.style={\nblack,\nminimum height=0pt\n}\n}\n\n\\begin{document}\n\n\n%\\resizebox{14cm}{3cm}{%\n\\begin{tikzpicture}\n\\node[inner sep=0pt] (russell) at (6.5,3)\n{ {\\Huge RSS \\ \\faRss \\ Discord }};\n\n\\matrix (A) [myoblock={blueii}, nodes={myiblock={bluei}{2cm}}]\n{|[label={[mylabel]Code Repos}]|{ \\faBitbucket \\ Bitbucket }\\\\\n\\faGithub \\ Github \\\\\n\\faGitlab \\ Gitlab \\\\\n};\n\n\\matrix (B) [myoblock={greenii}, nodes={myiblock={greeni}{2.5cm}},\nrow sep=3pt, right=5mm of A.north east, anchor=north west]\n{|[label={[mylabel]Entertainment}]|\n\\faBook \\ Tech Books \\\\\n\\faGamepad \\ Games\\\\\n\\faStackOverflow \\ Rep \\& Elo \\\\\n\\faReddit \\ EthDev \\\\\n};\n\n\\matrix (C) [myoblock={redi}, nodes={myiblock={redii}{2cm}},\nrow sep=15pt, right=5mm of B.north east, anchor=north west]\n{|[label={[mylabel]\\faInfo \\ Information}]|\n\\faBitcoin \\ BChain \\\\\n\\faTrophy \\ AI \\\\\n\\faCode \\ Code \\\\\n};\n\n\\matrix (D) [myoblock={purpi}, nodes={myiblock={purpii}{2cm}},\nright=5mm of C.north east, anchor=north west]\n{|[label={[mylabel] Tracking}]|\n\\faTrello \\ Web Hooks \\\\\n\\faTicket \\ Redmine \\\\\n\\faThLarge \\ Apis \\\\\n};\n\\end{tikzpicture}\n\n%}\n\n\n\\end{document}"}},"/BlogDiagrams/folderSetup":{"title":"Description","data":{"":"The code above is a LaTeX document that creates a directory tree diagram using the Forest package. The tree is defined using the forest environment and each node in the tree is represented by a folder icon, which is defined by the \\myfolder command. The folders are colored in blue by default, but can be changed to green by passing the optional argument [fgreen] to the \\myfolder command. The contents of the folders are represented by child nodes in the tree, and each child node is also a folder icon. The tree is arranged such that each folder node is aligned to the left and its child nodes are indented to the right. The code also defines the fblue and fgreen colors using the xcolor package and the tikzpicture environment is used to draw the folder icon.","keywords#Keywords":"forest, tikzpicture, scope, filldraw, rounded corners, top color, bottom color, child anchor, parent anchor, calign, edge, edge path, phantom, fit, s sep, l.","source-code#Source Code":"\\documentclass[border=10pt]{standalone}\n\\usepackage{forest}\n\n\\definecolor{fblue}{RGB}{92,144,192}\n\\definecolor{fgreen}{RGB}{34,162,70}\n\n\\newcommand\\myfolder[2][fblue]{%\n\\begin{tikzpicture}[overlay]\n\\begin{scope}[xshift=20pt]\n\\filldraw[rounded corners=1pt,fill=#1,draw=white,double=black]\n(-23pt,10pt) -- ++(3pt,5pt) -- ++(18pt,0pt) -- ++(40:3pt) -- ++(9pt,0pt) -- ++(-40:3pt)\n-- (20pt,15pt) -- (23pt,10pt) -- cycle;\n\\filldraw[rounded corners,draw=white,double=black,top color=#1,bottom color=#1!30]\n(-22pt,-12pt) -- ++(44pt,0pt) -- (25pt,12pt) coordinate (topr) -- ++(-50pt,0pt) coordinate (topl) -- cycle;\n\\end{scope}\n\\end{tikzpicture}%\n\\makebox[35pt]{\\raisebox{-3pt}{{\\ttfamily/#2}}}%\n}\n\n\\begin{document}\n\n\\begin{forest}\nfor tree={\nfont=\\sffamily,\nminimum height=0.75cm,\nrounded corners=4pt,\ngrow'=0,\ninner ysep=8pt,\nchild anchor=west,\nparent anchor=south,\nanchor=west,\ncalign=first,\nedge={rounded corners},\nedge path={\n\\noexpand\\path [draw, \\forestoption{edge}]\n(!u.south west) +(12.5pt,0) |- (.child anchor)\\forestoption{edge label};\n},\nbefore typesetting nodes={\nif n=1\n{insert before={[,phantom,minimum height=18pt]}}\n{}\n},\nfit=band,\ns sep=12pt,\nbefore computing xy={l=25pt},\n}\n[\\myfolder{}\n[\\myfolder{jhunt}]\n[\\myfolder{dev}\n[{\\myfolder[fgreen]{bchain}}]\n[{\\myfolder[fgreen]{other}}]\n]\n[{\\myfolder[fgreen]{games}}\n[{\\myfolder[fgreen]{vns}}]\n[{\\myfolder[fgreen]{other}}]\n]\n[\\myfolder{music}]\n[\\myfolder{other}]\n]\n\\end{forest}\n\n\\end{document}"}},"/BlogDiagrams/genericTcolorTable":{"title":"Description","data":{"":"The code above is a LaTeX document that creates a table using the tabularx package and places it in a tcolorbox. The table has three columns and six rows with alternating background colors using the \\rowcolors command. The text in the table is set in sans-serif font using the \\sffamily command, and the headers for each column are in boldface text. The table cells are filled with placeholder text, which can be replaced with actual data. The background color of the headers is orange with 40% transparency, and the text color is black. The tcolorbox is enhanced with the enhanced option and has no title, and the upper part of the box is clipped with the clip upper option.","keywords#Keywords":"tikz, table, border, array, tabularx, tcolorbox, rowcolors, enhanced, notitle, clip upper, fontupper, cellcolor, color, textbf.","source-code#Source Code":"\\documentclass[tikz,table,border=2mm]{standalone}\n% \\usepackage{PTSansNarrow}\n% \\usepackage[T1]{fontenc}\n\\usepackage{array,tabularx}\n\\usepackage[most]{tcolorbox}\n\n\\begin{document}\n\n\\rowcolors{1}{blue!15}{white}\n\\begin{tcolorbox}[enhanced, notitle, clip upper, fontupper=\\sffamily,%\ntabularx={>{\\centering\\arraybackslash}X%\n>{\\centering\\arraybackslash}X%\n>{\\centering\\arraybackslash}X}]\n\\cellcolor{orange!40} \\color{black} \\textbf{Traditional} &\\cellcolor{orange!40}\\color{black} \\textbf{Chosen} &\\cellcolor{orange!40}\\color{black} \\textbf{Other} \\\\\ncell1  & cell2  & cell3  \\\\\ncell4  & cell5  & cell6  \\\\\ncell7  & cell8  & cell9  \\\\\ncell10 & cell11 & cell12 \\\\\ncell13 & cell14 & cell15  \\\\\ncell16 & cell17 & cell18 \\\\\n\\end{tcolorbox}\n\\end{document}"}},"/BlogDiagrams/ipfs-dapp":{"title":"Description","data":{"":"The TikZ code is creating a matrix of nodes with different styles, with some styles defining a background color, a box style and a title style. There is also a style to create a cylinder shape that is not used in the current code.The matrix of nodes is named \"stack\" and has 5 columns, and the nodes are filled row-wise. The first row of the matrix is empty, and the second row has three nodes with no shadows. The third row has five nodes, where the first three have no shadows, the fourth node has a blue background, and the fifth node has no shadows. The fourth row has six nodes, where the first four have no shadows, the fifth node has a blue background, and the sixth node has no shadows. The fifth row has five nodes with no shadows. The middle node in the third row and the fifth node in the fourth row have titles in white font color. The first and last column are empty, and there is a horizontal space of 1cm between the fourth and fifth column.","keywords#Keywords":"The keywords for the LaTeX diagram above are: TikZ, nodes, arrows, edges, positioning, styles, shapes, text.","source-code#Source Code":"\\documentclass[border=3mm]{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{backgrounds,shadows,positioning,fit,matrix,shapes.geometric, shapes.arrows} % add shadows #1\n\n% a way to cut shadows in a cell #2\n%https://tex.stackexchange.com/questions/129318/remove-drop-shadow-from-one-node\n\\makeatletter\n\\tikzset{no shadows/.code=\\let\\tikz@preactions\\pgfutil@empty}\n\\makeatother\n\n\\tikzset{background/.style={rectangle, fill=red!10, inner sep=0.2cm},\nbackgroundN/.style={rectangle, fill=white, inner sep=0.3cm},\nbackgroundNN/.style={rectangle, fill=red!10, inner sep=0.2cm}}\n\n\\tikzset{back/.style={rectangle, fill=blue!10, inner sep=0.2cm},\nbackgroundN/.style={rectangle, fill=white, inner sep=0.3cm},\nbackgroundNN/.style={rectangle, fill=red!10, inner sep=0.2cm}}\n\n\\definecolor{mybluei}{RGB}{124,156,205}\n\\definecolor{myblueii}{RGB}{73,121,193}\n\\definecolor{mygreen}{RGB}{202,217,126}\n\\definecolor{mypink}{RGB}{233,198,235}\n\\definecolor{rinkeby}{HTML}{F6C343}\n\\definecolor{kovan}{HTML}{7057ff}\n\\definecolor{ropsten}{HTML}{FF4A8D}\n\\definecolor{mainnet}{HTML}{29B6AF}\n\\definecolor{antiquefuchsia}{rgb}{0.57, 0.36, 0.51}\n\\definecolor{byzantium}{rgb}{0.44, 0.16, 0.39}\n\\definecolor{darkcandyapplered}{rgb}{0.64, 0.0, 0.0}\n\\definecolor{darkbyzantium}{rgb}{0.36, 0.22, 0.33}\n\\definecolor{jasper}{rgb}{0.84, 0.23, 0.24}\n\\definecolor{pastelred}{rgb}{1.0, 0.41, 0.38}\n\\definecolor{pinkpearl}{rgb}{0.91, 0.67, 0.81}\n\\definecolor{blue(pigment)}{rgb}{0.2, 0.2, 0.6}\n\n\\newcommand\\widernode[5][widebox]{\n\\node[\n#1,\nfit={(#2) (#3)},\nlabel=center:{\\sffamily\\bfseries\\color{black}#4}] (#5) {};\n}\n\n\\begin{document}\n\n\\begin{tikzpicture}[node distance=2pt,outer sep=0pt, % just do nothing after modification\nboxstyle/.style={\ndraw=white,\nfill=#1,\nrounded corners, drop shadow, %to get a shadow in below a node\nfont={\\sffamily\\bfseries\\color{white}},\nalign=center,\nminimum height=30pt\n},\nbox/.style={\nboxstyle=#1,\ntext width=2.5cm},\nbox/.default=mybluei,\ntitle/.style={font={\\sffamily\\bfseries\\color{black}}},\nwidebox/.style={draw=white,inner sep=0pt, rounded corners,fill=#1,drop shadow},\nwidebox/.default=mybluei,\nmylabel/.style={font={\\sffamily\\bfseries\\color{black}}},\ndatabase/.style={\ncylinder,\ncylinder uses custom fill,\ncylinder body fill=yellow!50,\ncylinder end fill=yellow!50,\nshape border rotate=90,\naspect=0.25,\ndraw\n}\n]\n\n\n\\matrix (stack) [%  boxstyle=mybluei!40,%will overpaint blocks with background\ncolumn sep=10pt, row sep=10pt, inner sep=4mm,%\nmatrix of nodes,\nnodes={box, outer sep=0pt, anchor=center, inner sep=3pt},%\nnodes in empty cells=false,% #3\nrow 1/.style={nodes={fill=none,draw=none,minimum height=3mm}},\n]\n{\n|[no shadows]| & & & [1cm] & & |[no shadows]| \\\\ % #5\n|[no shadows]| & & |[no shadows]| & |[no shadows]|&  &|[no shadows]| \\\\\n|[no shadows]|  &  |[no shadows]|  &  |[no shadows]|  &|[no shadows]| & |[no shadows]|& |[box=blue(pigment)]| Web3 \\\\\n|[no shadows]|& |[no shadows]| &|[no shadows]| & |[no shadows]| &|[no shadows]| & |[box=blue(pigment)]| Truffle \\\\\n||[no shadows]| & |[no shadows]| & |[no shadows]| & |[no shadows]| & |[no shadows]| & |[box=blue(pigment)]| React \\\\};\n\n\n\\widernode[]{stack-1-1}{stack-1-6}{File track Dapp Architecture Architecture}{EPF} %#5\n\n\\widernode[widebox=mygreen]{stack-2-1}{stack-2-3}{Blockchain Stack}{SM}\n\n\\widernode[widebox=pastelred]{stack-2-4}{stack-2-6}{Front End Stack}{FE}\n\\widernode[widebox=mainnet]{stack-3-1}{stack-3-3}{Infura}{Ethereum}\n\n\\widernode{stack-3-4}{stack-3-5}{Metamask}{MM}\n\\widernode[widebox=rinkeby]{stack-4-1}{stack-4-3}{Solidity}{Solidity}\n\\widernode{stack-4-4}{stack-4-5}{Webpack}{BB}\n\n\\widernode[widebox=kovan]{stack-5-1}{stack-5-3}{IPFS}{IPFS}\n\\widernode{stack-5-4}{stack-5-5}{Drizzle}{DC}\n\n\\begin{pgfonlayer}{background}\n\\coordinate (aux) at ([xshift=1mm]stack-5-6.east);\n\\node [back,\nfit=(stack-1-1) (stack-5-1) (aux), draw, drop shadow,\n] {};\n\\end{pgfonlayer}\n\n%    % smth to create an arbitrary block with a border and shadow\n%Background for smart contracts\n\\begin{pgfonlayer}{background}\n\\coordinate (aux) at ([xshift=1mm]stack-5-3.east);\n\\node [background,\nfit=(stack-2-1) (stack-5-1) (aux), draw, drop shadow,\n] {};\n\\end{pgfonlayer}\n\n\\begin{pgfonlayer}{background}\n\\coordinate (aux) at ([xshift=1mm]stack-5-6.east);\n\\node [background,\nfit=(stack-2-4) (stack-5-4) (aux), draw, drop shadow,\n] {};\n\\end{pgfonlayer}\n\\end{tikzpicture}\n\n\\end{document}"}},"/BlogDiagrams/latex_user_sw_levels":{"title":"Description","data":{"":"A software architecture composed of multiple layers. It is divided into two main sections, the \"User Level\" and the \"Blockchain/Ethereum Level.\"The \"User Level\" section is drawn in a 3D-like isometric view, with a slanted perspective that is set by the commands that follow \\newcommand. The different agents or components of the system are drawn as circles with fill color set to red, and are labeled with names such as \"UI/UX,\" \"API,\" and \"Database.\"The \"Blockchain/Ethereum Level\" section is also drawn in a slanted perspective, set by the same commands, and is placed beneath the \"User Level.\" This section shows different agents or components of a blockchain-based system, such as \"Dapp,\" \"IPFS,\" \"Metamask,\" and \"Solidity.\" The connections between these components are illustrated using arrows, which indicate the flow of data or interaction between them.","keywords#Keywords":"tikzpicture, draw, rectangle, node, above, below, left, right, edge, dashed.","source-code#Source Code":"% tikz diagram with a 3d perspective illustrating how web3\n% and metamask can interactive with IPFS and Solidity\n\n\\documentclass{article}\n\\usepackage{tikz}\n\n\\usepackage{verbatim}\n\\usepackage[active,tightpage]{preview}\n\\PreviewEnvironment{tikzpicture}\n\\setlength\\PreviewBorder{5pt}%\n\n\\usetikzlibrary{positioning}\n\n\\newcommand{\\yslant}{0.5}\n\\newcommand{\\xslant}{-0.6}\n\\begin{document}\n\\begin{tikzpicture}[scale=1.1,every node/.style={minimum size=1cm},on grid]\n\n% Software level\n\\begin{scope}[\nyshift=-120,\nevery node/.append style={yslant=\\yslant,xslant=\\xslant},\nyslant=\\yslant,xslant=\\xslant\n]\n% The lower frame:\n\\draw[black, dashed, thick] (-1.3,0) rectangle (8.2,4.8);\n% Agents:\n\\draw[fill=red]\n(7.5,2) circle (.1) % .pdf file\n(5,2) circle (.1) % .ps file\n(2,2) circle (.1) % .dvi file\n(-0.5,2) circle (.1); % .tex file\n% Flows:\n\\draw[-latex,ultra thick,shorten <=5pt,shorten >=5pt]\n(-0.5,2) to[out=0,in=-180] (2,2); % latex\n\\draw[-latex,ultra thick,shorten <=5pt,shorten >=5pt]\n(2,2) to[out=0,in=-180] (5,2); % dvi2ps\n\\draw[latex-latex,ultra thick,shorten <=5pt,shorten >=5pt]\n(5,2) to[out=0,in=-180] (7.5,2); % ps2pdf, pdf2ps\n\\draw[-latex,ultra thick,shorten <=5pt,shorten >=5pt]\n(-0.5,2) to[out=90,in=-180] (3.5,3.8) to[out=0,in=90] (7.5,2); % pdflatex\n\\draw[-latex,ultra thick,shorten <=5pt,shorten >=5pt]\n(2,2) to[out=90,in=-180] (2.7,3.0) to[out=0,in=-180] (6.7,3.0) to[out=0,in=135] (7.5,2); % ps2pdfm\n% Labels:\n\\fill[black]\n(1.0,2) node[above=-3pt, scale=0.9] {\\textsf{\\bfseries file}}\n(3.5,2) node[above=-5pt, scale=0.9] {\\textsf{\\bfseries hash}}\n(6.25,2) node[above=-5pt, scale=0.9] {\\textsf{\\bfseries interacts}}\n\n(3.5,3.8) node[xshift=2ex,below=-5pt, scale=0.9] {\\textsf{\\bfseries logic contained in}}\n(4.3,3.0) node[xshift=2ex,below=-5pt, scale=0.9] {\\textsf{\\bfseries complements}}\n(1.3,0.1) node[above=-2pt, scale=1.1] {\\textbf{Blockchain/Ethereum Level}}\n(-0.5,2) node[below,scale=.9]{\\textsf{\\bfseries Dapp} }\n(2,2) node[below,scale=.9]{\\textsf{\\bfseries IPFS}}\n(5,2) node[below,scale=.9]{\\textsf{\\bfseries Metamask}}\n(7.5,2) node[below,scale=.9]{\\textsf{\\bfseries Solidity}};\n\\end{scope}\n\n% vertical lines for linking agents on the 2 levels\n\\draw[thick](6.3,5.1) to (6.3,0.9);\n\\draw[thick](3.8,4) to (3.8,-0.32);\n\\draw[thick](0.8,2.4) to (.8,-1.8);\n\\draw[thick](-1.70,1.02) to (-1.70,-3);\n\n% User level\n\\begin{scope}[\nyshift=0,\nevery node/.append style={yslant=\\yslant,xslant=\\xslant},\nyslant=\\yslant,xslant=\\xslant\n]\n% The upper frame:\n\\fill[white,fill opacity=.70] (-3.1,0) rectangle (9.9,6); % Opacity\n\\draw[black, dashed, thick] (-3.1,0) rectangle (9.9,6);\n% Agents:\n\\draw [fill=red]\n(7.5,2) circle (.1) % .pdf file\n(5,2) circle (.1) % .ps\n(2,2) circle (.1) % .dvi\n(-0.5,2) circle (.1); % .tex file\n\n% the icons\n\\node[anchor=south,inner sep=0,xshift=-20pt,yshift=10pt,fill=white] at (-0.5,2)\n{\\includegraphics[width=2.5cm]{truffle.png}};\n\\node[anchor=south,inner sep=0,xshift=0pt,yshift=8pt] at (2,2)\n{\\includegraphics[width=2.5cm]{ipfs-logo.png}};\n\\node[anchor=south,inner sep=0,xshift=-5pt,yshift=8pt] at (5,2)\n{\\includegraphics[width=3.0cm]{metamask.png}};\n\\node[anchor=south,inner sep=0,xshift=20pt,yshift=8pt] at (7.5,2)\n{\\includegraphics[width=3.5cm]{ethereum.png}};\n\n\\fill[black]\n(7.5,2) node[below right,,xshift=-20pt,yshift=-5pt,scale=.9,text width=2.5cm,align=left,fill=white]\n{\\textsf{\\bfseries \\mbox{Smart Contracts}}\\\\ \\textsf{\\bfseries IPFS Hashes}\n\\\\ \\textsf{\\bfseries Authentication}}\n(-2.5,5.5) node[anchor=west,inner sep=0, scale=1.1] {\\textbf{User level}}\n(5.1,1.9) node[below right,xshift=-20pt,scale=.9,text width=2cm,align=left,fill=white]\n{\\textsf{\\bfseries Transactions}\\\\ \\textsf{\\bfseries Ethereum Browser} }\n(1.9,1.9) node[below right,xshift=-10pt,scale=.9,text width=2cm,align=left,fill=white]\n{\\textsf{\\bfseries File Storage}\\\\ \\textsf{\\bfseries Peer to Peer}}\n(-0.5,2) node[below right,xshift=-20pt,yshift=-5pt,scale=.9,text width=2.5cm,align=left,fill=white]\n{\\textsf{\\bfseries Drizzle}\\\\ \\textsf{\\bfseries React}\\\\\n\\textsf{\\bfseries Truffle}}\n;\n\\end{scope}\n\\end{tikzpicture}\n\\end{document}"}},"/BlogDiagrams/osiModel":{"title":"Description","data":{"":"The code you provided is a LaTeX code that generates a network protocol poster. It uses the tcolorbox package to create the boxes and organize them into rows and columns. The resulting poster shows different network protocols organized by their layers in the OSI model, and it also shows some communication technologies.The code defines a tcolorbox environment called tcbposter, which is used to create a poster with a specific layout. The layout is defined by setting the number of rows and columns, their width and height, and the spacing between them. Each box is defined by a posterbox command, which specifies its column and row position, its content, and its style.The first row of the poster shows some application layer protocols, including HTTP, MQTT, and FTP. The second row shows some time protocols, including SMTP and DNS. The third row shows some transport layer protocols, including TCP and UDP. The fourth row shows the network layer protocol, which is IPv4 and IPv6. The fifth row shows some link layer protocols, including ARP and Auto-IP. The sixth row shows some control protocols, including ICMP and IGMP. The seventh row shows some communication technologies, including Ethernet and Wi-Fi. The right column shows the layers of the OSI model and the protocols that belong to each layer.Overall, the code generates a very informative and visually appealing poster that can be used to teach or learn about different network protocols and their organization in the OSI model.","keywords#Keywords":"tikz, node, draw, circle, fill, text, above, below, left, right, edge, thick, dashed.","source-code#Source Code":"\\documentclass[border=2mm]{standalone}\n\n\\usepackage[most]{tcolorbox}\n\\usepackage{lmodern}\n\\usepackage{lipsum}\n%\\usepackage{geometry}\n\n\\standaloneenv{tcbposter}\n\n%\\pagestyle{empty}\n\\begin{document}\n\n\\begin{tcbposter}[%\nposter = {columns=8, rows=9, width=17cm, height=8cm, spacing=1mm},% showframe},\nboxes = {colback=cyan!80!black,\nboxrule=0pt, arc=2mm,\ncolframe=cyan!80!black,\nhalign=center, valign=center,\ncolupper=white,\nfontupper=\\sffamily\\bfseries, size=small}\n]\n%1st row\n\\posterbox{column=1, row=1}{HTTP}\n\\posterbox{column=2, row=1}{HTTP/2}\n\\posterbox{column=3, row=1}{MQTT}\n\\posterbox{column=4, row=1}{CoAP}\n\\posterbox{column=5, row=1}{FTP}\n\\posterbox{column=6, row=1}{TFTP}\n\n%2nd row\n\\posterbox{column=1, row=2}{SMTP}\n\\posterbox{column=2, row=2}{SNTP}\n\\posterbox{column=3, row=2}{DNS}\n\\posterbox{column=4, row=2}{NetBIOS}\n\\posterbox{column=5, row=2, span=2}{SNMPv1/v2c/v3}\n\n%3rd row\n\\posterbox{column=1, row=3, span=2}{WebSocket}\n\\posterbox{column=3, row=3}{mDNS}\n\\posterbox{column=4, row=3}{DNS-SD}\n\\posterbox{column=5, row=3}{DHCP}\n\\posterbox{column=6, row=3}{DHCPv6}\n\n%4th row\n\\posterbox{column=1, row=4,span=6}{Socket}\n\n%5th row\n\\posterbox{column=1, row=5, span=2.5}{TCP}\n\\posterbox{column*=5, row=5, span=2.5}{UDP}\n\\posterbox{column=6, row=5}{RAW}\n\n%6th row\n\\posterbox{column=1, row=6, span=3}{IPv4}\n\\posterbox{column=4, row=6, span=3}{IPv6}\n\n%7th row\n\\posterbox{column=1, row=7, span=1.5}{ARP}\n\\posterbox{column*=3, row=7, span=1.5}{Auto-IP}\n\\posterbox{column=4, row=7, span=1.5}{NDP}\n\\posterbox{column*=6, row=7, span=1.5}{SLAAC}\n\n%8th row\n\\posterbox{column=1, row=8, span=1.5}{ICMP}\n\\posterbox{column*=3, row=8, span=1.5}{IGMPv2}\n\\posterbox{column=4, row=8, span=1.5}{ICMPv6}\n\\posterbox{column*=6, row=8, span=1.5}{MLDv1}\n\n%9th row\n%5 boxes and 4 separations should use\n%equivalent to 6 original boxes plus 5\n%separations\n\\newlength{\\mylength}\n\\pgfmathsetlength{\\mylength}{(6*\\tcbpostercolwidth+\\tcbpostercolspacing)/5}%\n\n%Use `width` instead of `span` to fix box size\n\\posterbox[width=\\mylength]{name=91, column=1, row=9}{Ethernet}\n\\posterbox[width=\\mylength]{name=92, column=1, row=9, xshift=\\mylength+\\tcbpostercolspacing}{Wi-Fi}\n\\posterbox[width=\\mylength]{name=92, column=1, row=9, xshift=2*\\mylength+2*\\tcbpostercolspacing}{PPP}\n\\posterbox[width=\\mylength]{name=92, column=1, row=9, xshift=3*\\mylength+3*\\tcbpostercolspacing}{USB/RNDIS}\n\\posterbox[width=\\mylength]{column*=6, row=9}{G3-PLC}\n\n%Right column\n\\posterbox[colback=gray, colframe=gray, colupper=black]{column=7, row=1, span=2, rowspan=3}{7 - Application}\n\\posterbox[colback=gray!80, colframe=gray!80, colupper=black]{column=7, row=4, span=2}{5 - Session}\n\\posterbox[colback=gray!60, colframe=gray!60, colupper=black]{column=7, row=5, span=2}{4 - Transport}\n\\posterbox[colback=gray!40, colframe=gray!40, colupper=black]{column=7, row=6, span=2, rowspan=3}{3 - Network}\n\\posterbox[colback=gray!20, colframe=gray!20, colupper=black]{column=7, row=9, span=2}{2 - Data Link}\n\n\\end{tcbposter}\n\n\\end{document}"}},"/BlogDiagrams/redmineOrg":{"title":"Description","data":{"":"tikz, node, draw, circle, fill, text, above, below, left, right, edge, thick, dashed.","keywords#Keywords":"tikzpicture, draw, rectangle, node, below, right, left, above, text, midway, coordinate, line, thick, fill, circle, inner sep, outer sep.","source-code#Source Code":"% ateb: https://tex.stackexchange.com/a/271349/ addaswyd o gwestiwn OOzy Pal: https://tex.stackexchange.com/q/271170/\n\\documentclass[border=20pt,tikz]{standalone}\n\\usepackage[edges]{forest}\n\n\\forestset{\ndirection switch/.style={\nfor tree={edge+=thick, font=\\sffamily},\nwhere level>=1{folder, grow'=0}{for children=forked edge},\nwhere level=3{}{draw},\n},\n}\n\\begin{document}\n\n\\begin{forest}\n% forest preamble: determine layout and format of tree\ndirection switch\n[Redmine Project Organization\n[Blockchain\n[HashGraph\n]\n[Vue-Dapp\n[Docsaurus]\n[Deploy to MainNet]\n[Update Todolist]\n]\n[IPFS Dapp\n[Drizzle Truffle]\n[Solidity Contract]\n[Deploy to Surge]\n]\n]\n[Academic\n[ENGR Year 4\n[CENG 4B]\n[CENG 4A]\n]\n[Tutorials\n[Voting Dapp]\n]\n[Article Summary\n[Vyper + Truffle]\n[Tensorflow]\n[HashGraph]\n]\n]\n[Job Hunt\n[First Job\n[Blockchain]\n[AI]\n]\n[Scripts\n[Go-api]\n[Indeed Scrapper]\n[Uvic Scrapper]\n]\n]\n[AI\n[Chatbots]\n[Tensorflow]\n]\n[Projects\n[Portfolio Website]\n[Notes --- Vuepress]\n]\n]\n\\end{forest}\n\\end{document}"}},"/BlogDiagrams/tech-stack":{"title":"Description","data":{"":"It seems that you have missed a part of the code in your latest message, could you please provide the full code so that I can assist you better?","keywords#Keywords":"documentclass, usepackage, tikzpicture, node, draw, fill, rectangle, coordinate, path, right, of, above, left, scale, label, text, center, circle, dotted, edge, arrow, bend left, bend right, dashed.","source-code#Source Code":"% this code draws an layer tech architecture\n\\documentclass[border=3mm]{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{backgrounds,shadows,positioning,fit,matrix,shapes.geometric, shapes.arrows} % add shadows #1\n\n% a way to cut shadows in a cell #2\n%https://tex.stackexchange.com/questions/129318/remove-drop-shadow-from-one-node\n\\makeatletter\n\\tikzset{no shadows/.code=\\let\\tikz@preactions\\pgfutil@empty}\n\\makeatother\n\n\\tikzset{background/.style={rectangle, fill=red!10, inner sep=0.2cm},\nbackgroundN/.style={rectangle, fill=white, inner sep=0.3cm},\nbackgroundNN/.style={rectangle, fill=red!10, inner sep=0.2cm}}\n\n\\definecolor{mybluei}{RGB}{124,156,205}\n\\definecolor{myblueii}{RGB}{73,121,193}\n\\definecolor{mygreen}{RGB}{202,217,126}\n\\definecolor{mypink}{RGB}{233,198,235}\n\\definecolor{rinkeby}{HTML}{F6C343}\n\\definecolor{kovan}{HTML}{7057ff}\n\\definecolor{ropsten}{HTML}{FF4A8D}\n\\definecolor{mainnet}{HTML}{29B6AF}\n\\definecolor{antiquefuchsia}{rgb}{0.57, 0.36, 0.51}\n\\definecolor{byzantium}{rgb}{0.44, 0.16, 0.39}\n\\definecolor{darkcandyapplered}{rgb}{0.64, 0.0, 0.0}\n\\definecolor{darkbyzantium}{rgb}{0.36, 0.22, 0.33}\n\\definecolor{jasper}{rgb}{0.84, 0.23, 0.24}\n\\definecolor{pastelred}{rgb}{1.0, 0.41, 0.38}\n\\definecolor{pinkpearl}{rgb}{0.91, 0.67, 0.81}\n\\definecolor{blue(pigment)}{rgb}{0.2, 0.2, 0.6}\n\n\\newcommand\\widernode[5][widebox]{\n\\node[\n#1,\nfit={(#2) (#3)},\nlabel=center:{\\sffamily\\bfseries\\color{black}#4}] (#5) {};\n}\n\n\\begin{document}\n\n\\begin{tikzpicture}[node distance=2pt,outer sep=0pt, % just do nothing after modification\nboxstyle/.style={\ndraw=white,\nfill=#1,\nrounded corners, drop shadow, %to get a shadow in below a node\nfont={\\sffamily\\bfseries\\color{white}},\nalign=center,\nminimum height=30pt\n},\nbox/.style={\nboxstyle=#1,\ntext width=2.5cm},\nbox/.default=mybluei,\ntitle/.style={font={\\sffamily\\bfseries\\color{black}}},\nwidebox/.style={draw=white,inner sep=0pt, rounded corners,fill=#1,drop shadow},\nwidebox/.default=mybluei,\nmylabel/.style={font={\\sffamily\\bfseries\\color{black}}},\ndatabase/.style={\ncylinder,\ncylinder uses custom fill,\ncylinder body fill=yellow!50,\ncylinder end fill=yellow!50,\nshape border rotate=90,\naspect=0.25,\ndraw\n}\n]\n\n\n\\matrix (stack) [%  boxstyle=mybluei!40,%will overpaint blocks with background\ncolumn sep=10pt, row sep=10pt, inner sep=4mm,%\nmatrix of nodes,\nnodes={box, outer sep=0pt, anchor=center, inner sep=3pt},%\nnodes in empty cells=false,% #3\nrow 1/.style={nodes={fill=none,draw=none,minimum height=3mm}},\n]\n{\n|[no shadows]| & & & [1cm] & & |[no shadows]| \\\\ % #5\n%RCP main & Authoring & Browsing & Publishing & Search&|[no shadows]| \\\\\n|[no shadows]| & & |[no shadows]| & |[no shadows]|&  &|[no shadows]| \\\\\n|[no shadows]|  &  |[no shadows]|  &  |[no shadows]|  &|[no shadows]| & |[no shadows]|& |[box=blue(pigment)]| Web3 \\\\\n|[no shadows]|& |[no shadows]| &|[no shadows]| & |[no shadows]| &|[no shadows]| & |[box=blue(pigment)]| Truffle \\\\\n||[no shadows]| & |[no shadows]| & |[no shadows]| & |[no shadows]| & |[no shadows]| & |[box=blue(pigment)]| React \\\\};\n\n\n\\widernode[]{stack-1-1}{stack-1-6}{File track Dapp Architecture Architecture}{EPF} %#5\n\n\\widernode[widebox=mygreen]{stack-2-1}{stack-2-3}{Blockchain Stack}{SM}\n\n\\widernode[widebox=pastelred]{stack-2-4}{stack-2-6}{Front End Stack}{FE}\n\\widernode[widebox=mainnet]{stack-3-1}{stack-3-3}{Infura}{Ethereum}\n\n\\widernode{stack-3-4}{stack-3-5}{Metamask}{MM}\n% \\widernode{stack-3-6}{stack-3-6}{Web3}{AA}\n\\widernode[widebox=rinkeby]{stack-4-1}{stack-4-3}{Solidity}{Solidity}\n\\widernode{stack-4-4}{stack-4-5}{Webpack}{BB}\n%  \\widernode{stack-4-6}{stack-4-6}{Truffle}{CC}\n\n\\widernode[widebox=kovan]{stack-5-1}{stack-5-3}{IPFS}{IPFS}\n\\widernode{stack-5-4}{stack-5-5}{Drizzle}{DC}\n\n\n\\begin{pgfonlayer}{background}\n\\coordinate (aux) at ([xshift=1mm]stack-5-6.east);\n\\node [back,\nfit=(stack-1-1) (stack-5-1) (aux), draw, drop shadow,\n] {};\n\n\\end{pgfonlayer}\n\n%    % smth to create an arbitrary block with a border and shadow\n%Background for smart contracts\n\\begin{pgfonlayer}{background}\n\\coordinate (aux) at ([xshift=1mm]stack-5-3.east);\n\\node [background,\nfit=(stack-2-1) (stack-5-1) (aux), draw, drop shadow,\n] {};\n\n\\end{pgfonlayer}\n\n\\begin{pgfonlayer}{background}\n\\coordinate (aux) at ([xshift=1mm]stack-5-6.east);\n\\node [background,\nfit=(stack-2-4) (stack-5-4) (aux), draw, drop shadow,\n] {};\n\n\\end{pgfonlayer}\n\\end{tikzpicture}\n\n\\end{document}"}},"/BlogDiagrams/webApp":{"title":"Description","data":{"":"I'm sorry, I cannot see any diagram or code snippet in your message. Could you please re-send it?","keywords#Keywords":"tikzpicture, node, draw, rectangle, ellipse, arrow, edge, label.","source-code#Source Code":"% this diagram shows how webpack works\n\n\\documentclass[tikz,border=3.14mm]{standalone}\n\\usetikzlibrary{shapes.geometric,shapes.symbols,fit,positioning,shadows}\n% https://tex.stackexchange.com/a/12039/121799\n\\makeatletter\n\\pgfkeys{/pgf/.cd,\nparallelepiped offset x/.initial=2mm,\nparallelepiped offset y/.initial=2mm\n}\n\\pgfdeclareshape{parallelepiped}\n{\n\\inheritsavedanchors[from=rectangle] % this is nearly a rectangle\n\\inheritanchorborder[from=rectangle]\n\\inheritanchor[from=rectangle]{north}\n\\inheritanchor[from=rectangle]{north west}\n\\inheritanchor[from=rectangle]{north east}\n\\inheritanchor[from=rectangle]{center}\n\\inheritanchor[from=rectangle]{west}\n\\inheritanchor[from=rectangle]{east}\n\\inheritanchor[from=rectangle]{mid}\n\\inheritanchor[from=rectangle]{mid west}\n\\inheritanchor[from=rectangle]{mid east}\n\\inheritanchor[from=rectangle]{base}\n\\inheritanchor[from=rectangle]{base west}\n\\inheritanchor[from=rectangle]{base east}\n\\inheritanchor[from=rectangle]{south}\n\\inheritanchor[from=rectangle]{south west}\n\\inheritanchor[from=rectangle]{south east}\n\\backgroundpath{\n% store lower right in xa/ya and upper right in xb/yb\n\\southwest \\pgf@xa=\\pgf@x \\pgf@ya=\\pgf@y\n\\northeast \\pgf@xb=\\pgf@x \\pgf@yb=\\pgf@y\n\\pgfmathsetlength\\pgfutil@tempdima{\\pgfkeysvalueof{/pgf/parallelepiped offset x}}\n\\pgfmathsetlength\\pgfutil@tempdimb{\\pgfkeysvalueof{/pgf/parallelepiped offset y}}\n\\def\\ppd@offset{\\pgfpoint{\\pgfutil@tempdima}{\\pgfutil@tempdimb}}\n\\pgfpathmoveto{\\pgfqpoint{\\pgf@xa}{\\pgf@ya}}\n\\pgfpathlineto{\\pgfqpoint{\\pgf@xb}{\\pgf@ya}}\n\\pgfpathlineto{\\pgfqpoint{\\pgf@xb}{\\pgf@yb}}\n\\pgfpathlineto{\\pgfqpoint{\\pgf@xa}{\\pgf@yb}}\n\\pgfpathclose\n\\pgfpathmoveto{\\pgfqpoint{\\pgf@xb}{\\pgf@ya}}\n\\pgfpathlineto{\\pgfpointadd{\\pgfpoint{\\pgf@xb}{\\pgf@ya}}{\\ppd@offset}}\n\\pgfpathlineto{\\pgfpointadd{\\pgfpoint{\\pgf@xb}{\\pgf@yb}}{\\ppd@offset}}\n\\pgfpathlineto{\\pgfpointadd{\\pgfpoint{\\pgf@xa}{\\pgf@yb}}{\\ppd@offset}}\n\\pgfpathlineto{\\pgfqpoint{\\pgf@xa}{\\pgf@yb}}\n\\pgfpathmoveto{\\pgfqpoint{\\pgf@xb}{\\pgf@yb}}\n\\pgfpathlineto{\\pgfpointadd{\\pgfpoint{\\pgf@xb}{\\pgf@yb}}{\\ppd@offset}}\n}\n}\n% https://tex.stackexchange.com/a/103691/121799\n\\pgfdeclareshape{document}{\n\\inheritsavedanchors[from=rectangle] % this is nearly a rectangle\n\\inheritanchorborder[from=rectangle]\n\\inheritanchor[from=rectangle]{center}\n\\inheritanchor[from=rectangle]{north}\n\\inheritanchor[from=rectangle]{north east}\n\\inheritanchor[from=rectangle]{north west}\n\\inheritanchor[from=rectangle]{south}\n\\inheritanchor[from=rectangle]{south east}\n\\inheritanchor[from=rectangle]{south west}\n\\inheritanchor[from=rectangle]{west}\n\\inheritanchor[from=rectangle]{east}\n\\backgroundpath{%\n\\southwest \\pgf@xa=\\pgf@x \\pgf@ya=\\pgf@y\n\\northeast \\pgf@xb=\\pgf@x \\pgf@yb=\\pgf@y\n\\pgf@xc=\\pgf@xb \\advance\\pgf@xc by-5pt % this should be a parameter\n\\pgf@yc=\\pgf@ya \\advance\\pgf@yc by5pt\n\\pgfpathmoveto{\\pgfpoint{\\pgf@xa}{\\pgf@ya}}\n\\pgfpathlineto{\\pgfpoint{\\pgf@xa}{\\pgf@yb}}\n\\pgfpathlineto{\\pgfpoint{\\pgf@xb}{\\pgf@yb}}\n\\pgfpathlineto{\\pgfpoint{\\pgf@xb}{\\pgf@yc}}\n\\pgfpathlineto{\\pgfpoint{\\pgf@xc}{\\pgf@ya}}\n\\pgfpathclose\n% add little corner\n\\pgfpathmoveto{\\pgfpoint{\\pgf@xc}{\\pgf@ya}}\n\\pgfpathlineto{\\pgfpoint{\\pgf@xc}{\\pgf@yc}}\n\\pgfpathlineto{\\pgfpoint{\\pgf@xb}{\\pgf@yc}}\n\\pgfpathclose\n}\n}\n\\makeatother\n\\begin{document}\n\\tikzset{doc/.style={document,fill=blue!10,draw,thin,minimum\nheight=1.2cm,align=center},\npics/.cd,\npack/.style={code={%\n\\draw[fill=blue!50,opacity=0.2] (0,0) -- (0.5,-0.25) -- (0.5,0.25) -- (0,0.5) -- cycle;\n\\draw[fill=blue!50,opacity=0.2] (0,0) -- (-0.5,-0.25) -- (-0.5,0.25) -- (0,0.5) -- cycle;\n\\draw[fill=blue!60,opacity=0.2] (0,0) -- (-0.5,-0.25) -- (0,-0.5) -- (0.5,-0.25) -- cycle;\n\\draw[fill=blue!60] (0,0) -- (0.25,0.125) -- (0,0.25) -- (-0.25,0.125) -- cycle;\n\\draw[fill=blue!50] (0,0) -- (0.25,0.125) -- (0.25,-0.125) -- (0,-0.25) -- cycle;\n\\draw[fill=blue!50] (0,0) -- (-0.25,0.125) -- (-0.25,-0.125) -- (0,-0.25) -- cycle;\n\\draw[fill=blue!50,opacity=0.2] (0,-0.5) -- (0.5,-0.25) -- (0.5,0.25) -- (0,0) -- cycle;\n\\draw[fill=blue!50,opacity=0.2] (0,-0.5) -- (-0.5,-0.25) -- (-0.5,0.25) -- (0,0) -- cycle;\n\\draw[fill=blue!60,opacity=0.2] (0,0.5) -- (-0.5,0.25) -- (0,0) -- (0.5,0.25) -- cycle;\n}}}\n\\begin{tikzpicture}[font=\\sffamily,every label/.append\nstyle={font=\\small\\sffamily,align=center}]\n\\node[cylinder, cylinder uses custom fill, cylinder end fill=blue!25,\ncylinder body fill=blue!50,shape border rotate=90,text=white,\naspect=0.4,minimum width=1cm,minimum height=1.4cm](Store){Store};\n\\node[right=1cm of Store,regular polygon,regular polygon sides=6,fill=orange,\nxscale=1.2,text=white] (Router) {Router};\n\\node[fit=(Store) (Router)](fit1){};\n\\node[below=1cm of fit1,tape, draw,thin, tape bend top=none,fill=purple,\ntext=white,minimum width=2.2cm,double copy shadow,minimum height=1.5cm]\n(Components) {Components};\n\\node[draw,dashed,rounded corners,fit=(Store) (Router) (Components),inner\nsep=10pt,label={above:{Universal\\\\ Application Code}}](fit2){};\n\\node[right=1cm of fit2,doc] (js) {app.js};\n\\node[above right=1cm of js,doc] (Server) {Server\\\\ entity};\n\\node[below right=1cm of js,doc] (Client) {Client\\\\ entry};\n\\draw(fit2.east) -- (js);\n\\draw[-latex] (js) |- (Server);\n\\draw[-latex] (js) |- (Client);\n\\draw[-] (Client) -- ++ (1,0) |- (Server) coordinate[pos=0.25] (aux1);\n\\node[draw,dashed,rounded corners,fit=(fit2) (aux1),inner\nxsep=10pt,inner ysep=30pt,label={above:{Source}}](fit3){};\n%\n\\pic[right=2cm of aux1,local bounding box=Webpack,scale=2] (Webpack) {pack};\n\\node[below=1mm of Webpack,font=\\small\\sffamily,align=center]{Webpack\\\\ build};\n%\n\\node[above right=1cm and 2cm of Webpack.east,doc,fill=red!10] (ServerBundle)\n{Server\\\\ bundle};\n\\node[below right=1cm and 2cm of Webpack.east,doc,fill=red!10] (ClientBundle) {Client\\\\\nbundle};\n\\node[right=2cm of ServerBundle,parallelepiped,draw=yellow,fill=red!80,\nminimum width=2cm,minimum height=1.5cm,align=center,text=white]\n(BundleRenderer)   {Bundle\\\\ Renderer};\n\\node[right=2cm of ClientBundle,doc,fill=yellow,minimum width=2cm,minimum height=1.5cm] (HTML) {HTML};\n\\draw[-latex] (aux1) -- (Webpack);\n\\draw[-latex] (Webpack) -- ++ (2,0) coordinate(aux2) |- (ServerBundle);\n\\draw[-latex] (aux2) |- (ClientBundle);\n\\draw[-latex] (ClientBundle) -- (HTML) node[midway,below,font=\\small\\sffamily]{Hydrate};\n\\draw (ServerBundle) -- (BundleRenderer);\n\\draw[-latex] (BundleRenderer) -- (HTML) node[midway,right,font=\\small\\sffamily]{Render};\n%\n\\node[draw,dashed,rounded corners,fit=(ServerBundle) (BundleRenderer),inner\nsep=10pt,label={above:{Node server}}](fit4){};\n\\node[draw,dashed,rounded corners,fit=(ClientBundle) (HTML),inner\nsep=10pt,label={below:{Browser}}](fit5){};\n\\end{tikzpicture}\n\\end{document}"}},"/Circuits/2ASources":{"title":"Description","data":{"":"This is a complete LaTeX document with a document class of standalone. It includes the packages circuitikz, siunitx, amsmath, and amssymb. The circuitikz package is used to draw an electronic circuit diagram. The circuit consists of two voltage sources, two resistors, and a current source connected in a circuit. The diagram is drawn using the circuitikz environment within a tikz environment. The nodes in the circuit are connected using the to command, and various options are specified for the circuit elements using different parameters. The circuit elements include resistors (R), voltage sources (V), and a current source (I). Labels for the circuit elements are specified using $ delimiters, and various parameters like i> and l^= are used to customize the appearance of the circuit elements. The siunitx package is used to typeset units and quantities with correct spacing and formatting.","keywords#Keywords":"circuitikz, siunitx, amsmath, amssymb, documentclass, usepackage, tikz, circuit","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usepackage{circuitikz}\n\\usepackage{siunitx}\n\\usepackage{amsmath,amssymb}\n\\begin{document}\n\\begin{circuitikz}\n\\draw (0,0) to[I,i>=$2\\si{\\ampere}$] (0,2) %% Note _>= instead of >=\nto [short,-*] (2,2)\nto [R=$50\\si{\\ohm}$,v=$v_o$](2,0);\n\\draw (2,2) to [R,l^=$1\\si{\\ohm}$] (4,2)\nto [V,v<=$45 \\si{\\volt}$](4,0)\nto [R,l^=$4\\si{\\ohm}$] (2,0);\n\\draw (0,0) to [short,-*] (2,0);\n\\end{circuitikz}\n\\end{document}"}},"/Circuits/CircuitB":{"title":"Description","data":{"":"This is a complete LaTeX document with a document class of standalone. It includes the packages amsmath, amsthm, and tikz. The tikz package is used to draw a block diagram of a control system. The diagram is drawn using the tikzpicture environment within a standalone documentclass. The different elements of the control system are represented by nodes of different shapes and styles, such as input, sum, controller, block, and output, and are positioned using the positioning library. The arrows between the nodes represent the flow of signals between them and are specified using the draw command with the -> option to indicate the direction of the arrow. The text labels for the arrows are specified using the node command with appropriate positioning options. The diagram also includes some mathematical expressions specified in the node text using $ delimiters.","keywords#Keywords":"tikz, standalone, amsmath, amsthm, positioning, shapes, arrows, input, sum, controller, block, output.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{amsmath, amsthm}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes,arrows}\n\n\\begin{document}\n\\begin{tikzpicture}[auto, >=latex']\n% Nodes\n\\node [input] (input) {};\n\\node [sum, right = 1cm of input] (sum) {};\n\\node [controller, right = 1cm of sum] (con1) {$\\frac{s+p_c}{s+z_c}$};\n\\node [controller, right = 1cm of con1] (con2) {$K_D s + K_P$};\n\\node [block, right = 1cm of con2] (system2) {$\\frac{k}{ms^2}$};\n\\node [output, right = 2cm of system2] (output) {};\n\\node [input, below = 0.5cm of con2] (m) {};\n% Arrows\n\\draw [draw,->] (input) -- node {$Z_\\re$} (sum);\n\\draw [->] (sum) -- (con1);\n\\draw [->] (con1) -- (con2);\n\\draw [->] (con2) -- node {$I$} (system2);\n\\draw [->] (system2) -- node (y) {$Z$}(output);\n\\draw [-] (y) |- (m) {} ;\n\\draw [->] (m) -| node[pos=0.99] {$-$}  node [near end] {} (sum);\n\\end{tikzpicture}\n\\end{document}"}},"/Circuits/CircuitE300N1":{"title":"Description","data":{"":"The code defines a circuit diagram using the TikZ package with the Circuitikz library. The circuit has a voltage source labeled \"NI\" connected to a resistor \"R1\", which is connected to another resistor \"R2\" and so on, forming a series circuit. Each resistor is labeled with its resistance value and a different color. The circuit also includes arrows indicating the direction of the current flowing through each resistor, labeled as phi_1, phi_2, and phi_3. Finally, there are labels for the voltage drop across each resistor, labeled as F_1, F_2, F_3, F_4, and F_g, where F_g is the voltage drop across the last resistor \"Rg\".","keywords#Keywords":"Circuit, diagram, circuitikz, resistors, voltage, current, colors.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usepackage{circuitikz}\n\\usepackage{siunitx}\n\\usepackage{amsmath,amssymb}\n\\begin{document}\n\\begin{circuitikz}\n\\draw (0,4) to [V,l_=$ NI$] (0,0)\n(0,4) to  [R,i>=$\\phi_1$, l^= ${R}_{1}$,v_>=${F}_1$, color=purple] (4,4)\n(4,0) -- (0,0)\n(4,4) to [R,i^>=$\\phi_2$, l^= ${R}_{2}$,v_>=${F}_2$, color=blue] (4,0)\n(4,4) to [R,l^= ${R}_{3}$,v_>=${F}_3$, color=red] (8,4)\n(8,4) to [R,i^>=$\\phi_3$, l^= ${R}_{g}$,v_>=${F}_g$, color=cyan] (8,0)\n(8,0) to [R, l^= ${R}_{4}$,v_>=${F}_4$, color=green] (4,0);\n\\draw[thin, <-, >=triangle 45] (6,2) node{$\\phi_3$}   ++(-90:1) arc (-90:100:1);\n\\draw[thin, <-, >=triangle 45] (2,2) node{$\\phi_2$}   ++(-90:1) arc (-90:100:1);\n%\t\t\\node (phi) at (4.25,0.5) {$\\phi_2$};\n%\t\t\\draw[-stealth]  (4.25,2.5) to [bend left=90] (phi);\n\\end{circuitikz}\n\\end{document}"}},"/Circuits/FirstOrderSystem":{"title":"Description","data":{"":"The given code is a LaTeX document that produces a block diagram using the TikZ package. The diagram shows a closed-loop control system with a setpoint input, a feedback signal, and two blocks representing the plant and controller. The controller block is represented by a red rectangle with the transfer function  and the plant block is represented by a blue rectangle with the transfer function . The setpoint input is connected to the summing junction with a blue circle representing the summing operation. The output of the plant is connected to the feedback loop, which is represented by a node with the feedback signal  and a line connecting it to the summing junction. Finally, there is a negative feedback loop formed between the output of the feedback node and the summing junction with a line and a minus sign in the middle.","keywords#Keywords":"tikz, positioning, shapes, arrows, block, controller, sum, input, output, nodes, auto, coordinate.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usepackage{amsmath,amssymb}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes,arrows}\n\n\\tikzstyle{block} = [draw, fill=blue!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{controller} = [draw, fill=red!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{sum} = [draw, fill=blue!20, circle, node distance=1cm]\n\\tikzstyle{input} = [coordinate]\n\\tikzstyle{output} = [coordinate]\n\n\\begin{document}\n\n\\begin{tikzpicture}[auto, >=latex']\n% Nodes\n\\node [input] (input) {};\n\\node [sum, right = 1cm of input] (sum) {};\n\\node [controller, right = 1cm of sum] (system) {$\\frac{K}{s}$};\n\\node [block, right = 1cm of system] (system2) {$\\frac{1}{Ts+1}$};\n\\node [output, right = 2cm of system2] (output) {};\n\\node [input, below = 0.5cm of system] (m) {};\n% Arrows\n\\draw [draw,->] (input) -- node {$R$} (sum);\n\\draw [->] (sum) -- node {} (system);\n\\draw [->] (system) --  (system2);\n\\draw [->] (system2) -- node (y) {$C$}(output);\n\\draw [-] (y) |- (m) {} ;\n\\draw [->] (m) -| node[pos=0.99] {$-$}  node [near end] {} (sum);\n\\end{tikzpicture}\n\\end{document}"}},"/Circuits/LagCompensation":{"title":"Description","data":{"":"The code is a LaTeX document that uses the TikZ package to draw a control system diagram. The diagram consists of several blocks, which are defined using the tikzstyle command. The nodes in the diagram are defined using the node command. The arrows between the nodes are defined using the draw command, and the labels on the arrows are defined using the node command with the label text in curly braces. The diagram represents a control system with input  and output , with several intermediate components including a summing junction, two controllers, and a block representing a system with a transfer function of .","keywords#Keywords":"tikz, amsmath, amssymb, positioning, shapes, arrows, block, controller, sum, input, output.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usepackage{amsmath,amssymb}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes,arrows}\n\n\\begin{document}\n\\tikzstyle{block} = [draw, fill=blue!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{controller} = [draw, fill=red!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{sum} = [draw, fill=blue!20, circle, node distance=1cm]\n\\tikzstyle{input} = [coordinate]\n\\tikzstyle{output} = [coordinate]\n\\begin{tikzpicture}[auto, >=latex']\n% Nodes\n\\node [input] (input) {};\n\\node [sum, right = 1cm of input] (sum) {};\n\\node [controller, right = 1cm of sum] (con1) {$\\frac{s+p_c}{s+z_c}$};\n\\node [controller, right = 1cm of con1] (con2) {$K_D s + K_P$};\n\\node [block, right = 1cm of con2] (system2) {$\\frac{k}{ms^2}$};\n\\node [output, right = 2cm of system2] (output) {};\n\\node [input, below = 0.5cm of con2] (m) {};\n% Arrows\n\\draw [draw,->] (input) -- node {$Z_\\re$} (sum);\n\\draw [->] (sum) -- (con1);\n\\draw [->] (con1) -- (con2);\n\\draw [->] (con2) -- node {$I$} (system2);\n\\draw [->] (system2) -- node (y) {$Z$}(output);\n\\draw [-] (y) |- (m) {} ;\n\\draw [->] (m) -| node[pos=0.99] {$-$}  node [near end] {} (sum);\n\\end{tikzpicture}\n\\end{document}"}},"/Circuits/NodeAnalysis":{"title":"Description","data":{"":"This is a LaTeX code that generates a circuit diagram using the circuitikz package. The circuit diagram depicts a voltage source connected to two half bridges, with a voltmeter connected across one of the resistors in the right half bridge. The siunitx and amsmath packages are also included.The circuit diagram consists of several components and parameters specified using various circuitikz commands. The voltage source is created using the V command, with a voltage of 20 volts and labeled with the v parameter. The resistors are created using the R command, with their values specified using the l parameter, and their orientation specified using the - and * parameters. The voltmeter is created using another R command, and is labeled with the i parameter. The american voltages option is used to display voltages in the diagram in the American style.","keywords#Keywords":"circuit, voltage, resistor, voltmeter.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usepackage{circuitikz}\n\\usepackage{siunitx}\n\\usepackage{amsmath,amssymb}\n\\begin{document}\n\\begin{circuitikz}[american voltages]\n% Voltage source\n\\draw (0,0) to [V, v>=$20 \\si{\\volt}$](0, 6) to (6, 6)\n% Left half bridge\nto [R, l_=$2 \\si{k\\ohm}$, *-*] (3,3) % Top left resistor\nto [R, l_=$5 \\si{k\\ohm}$, -*] (6,0);  % Bottom left resistor\n% Right half bridge\n\\draw (6,6)\nto [R, l_=$1 \\si{k\\ohm}$, -*] (9, 3) % Top right resistor\nto [R, l_=$30 \\si{k\\ohm}$, -*] (6,0)  % Bottom left resistor\n% Draw connection to (-) terminal of voltage source\nto (6, 0) to (0,0);\n\n% Draw voltmeter\n\\draw (3, 3) to [R, l_=$5 \\si{k\\ohm}$,i_=$i_o$, -*] (9, 3);\n\\end{circuitikz}\n\\end{document}"}},"/Circuits/ProportionalDeriviateControl":{"title":"Description","data":{"":"The LaTeX code defines a diagram of a control system using the TikZ package. The diagram consists of several nodes representing different components of the control system and arrows connecting the nodes to show the flow of signals. The components include an input, a summing point, a controller, a block, and an output. The controller is represented by a rectangle with the label \"K_D s + K_P\" and the block is represented by a rectangle with the label \"k/ms^2\". The input and output are represented by coordinate nodes, and the summing point is represented by a circle with the label \"+\". The diagram also includes a node below the controller labeled \"m\". The arrows show the flow of signals from the input to the output, passing through the summing point, the controller, and the block. The arrow from the output is split to connect to the node labeled \"m\" and the summing point, indicating feedback.","keywords#Keywords":"TikZ, positioning, shapes, arrows, circuitikz, nodes, input, output, sum, block, controller, arrows.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{graphicx} % Required for inserting images\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes,arrows}\n\\newcommand{\\sse}{\\mathrm{ss}}\n\\newcommand{\\re}{\\mathrm{ref}}\n\\usepackage{amsmath, amsthm}\n\\usepackage{booktabs}\n\\usepackage{tabularx}\n\\usepackage{circuitikz}\n\\tikzstyle{block} = [draw, fill=blue!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{controller} = [draw, fill=red!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{sum} = [draw, fill=blue!20, circle, node distance=1cm]\n\\tikzstyle{input} = [coordinate]\n\\tikzstyle{output} = [coordinate]\n\n\\begin{document}\n\\begin{tikzpicture}[auto, >=latex']\n% Nodes\n\\node [input] (input) {};\n\\node [sum, right = 1cm of input] (sum) {};\n\\node [controller, right = 1cm of sum] (system) {$K_D s + K_P$};\n\\node [block, right = 1cm of system] (system2) {$\\frac{k}{ms^2}$};\n\\node [output, right = 2cm of system2] (output) {};\n\\node [input, below = 0.5cm of system] (m) {};\n% Arrows\n\\draw [draw,->] (input) -- node {$Z_\\re$} (sum);\n\\draw [->] (sum) -- node {} (system);\n\\draw [->] (system) -- node {$I$} (system2);\n\\draw [->] (system2) -- node (y) {$Z$}(output);\n\\draw [-] (y) |- (m) {} ;\n\\draw [->] (m) -| node[pos=0.99] {$-$}  node [near end] {} (sum);\n\\end{tikzpicture}\n% \\end{lateximage}% NEW\n% \\caption{Proportional-derivative control.}\n\\end{document}"}},"/Circuits/SuperPosition":{"title":"Description","data":{"":"This code defines a standalone LaTeX document with a TikZ environment for creating an electrical circuit diagram. It includes the necessary packages for creating circuit diagrams, using SI units, and typesetting mathematical symbols.The circuit consists of a voltage source with a value of 4 volts connected in series to a resistor with a value of 10 ohms. The voltage at the top of the resistor is connected to a controlled voltage source with a voltage of 3 times the voltage between nodes a and b. The bottom of the controlled voltage source is connected to a current source with a value of 2 amperes. Nodes a and b are connected to the top and bottom of the circuit respectively. An open circuit element with a label of Vab is added to the right of the circuit to represent the voltage between nodes a and b.","keywords#Keywords":"circuitikz, siunitx, voltage source, resistor, current-controlled voltage source, current source, open circuit.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usepackage{circuitikz}\n\\usepackage{siunitx}\n\\usepackage{amsmath,amssymb}\n\\begin{document}\n\\begin{circuitikz}\n\\draw (0,2) to[V,l_=$4 \\si{\\volt}$] (0,0); %% Note _>= instead of >=\n\\draw (0,2)to [R,l^=$10 \\si{\\ohm}$] (2,2);\n\\draw (2,2)to [cV,l^=$3V_{ab}$] (4,2);\n\\draw (4,0) to  [I,l^=$2\\si{\\ampere}$](4,2);\n\\draw (4,2) to [short,-*] (6,2)\nnode[label={[font=\\footnotesize]right:$a$}] {};\n\\draw (0,0) to [short,-*] (6,0)\nnode[label={[font=\\footnotesize]right:$b$}] {};\n\\draw (6,2) to [open,v_>=$V_{ab}$] (6,0);\n\\end{circuitikz}\n\\end{document}"}},"/Circuits/TableOfCircuits":{"title":"Description","data":{"":"The code is a LaTeX document that creates a table with three columns. The first column contains circuit diagrams created using the circuitikz package, which is used for drawing electrical circuits. The second column contains block diagrams created using the tikz package, which is a powerful package for creating graphics and diagrams. The third column contains the gain equations for each circuit.The first circuit in the table is a non-inverting op-amp amplifier circuit, which takes an input voltage  and amplifies it to produce an output voltage . The gain of this circuit is given by the equation .The second circuit in the table is an inverting op-amp amplifier circuit, which also takes an input voltage  and amplifies it to produce an output voltage , but with an inverted polarity. The gain of this circuit is given by the equation .The third circuit in the table is a summing op-amp amplifier circuit, which takes multiple input voltages , , and , and sums them to produce an output voltage . The gain of this circuit is given by the equation , where  is the feedback resistor and , , and  are the input resistors.","keywords#Keywords":"tikzpicture, node, draw, rectangle, fill, text, above, left, right, below, circle.","source-code#Source Code":"% Copied this table from the textbook\n\\documentclass{standalone}\n\\usepackage{graphicx} % Required for inserting images\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes,arrows}\n\\newcommand{\\sse}{\\mathrm{ss}}\n\\newcommand{\\re}{\\mathrm{ref}}\n\\usepackage{amsmath, amsthm}\n\\usepackage{booktabs}\n\\usepackage{tabularx}\n\\usepackage{circuitikz}\n\n\\usetikzlibrary{decorations.text}\n\\tikzset{add/.style n args={4}{\nminimum width=6mm,\npath picture={\n\\draw[black]\n(path picture bounding box.south east) -- (path picture bounding box.north west)\n(path picture bounding box.south west) -- (path picture bounding box.north east);\n\\node at ($(path picture bounding box.south)+(0,0.13)$)     {\\tiny #1};\n\\node at ($(path picture bounding box.west)+(0.13,0)$)      {\\tiny #2};\n\\node at ($(path picture bounding box.north)+(0,-0.13)$)        {\\tiny #3};\n\\node at ($(path picture bounding box.east)+(-0.13,0)$)     {\\tiny #4};\n}\n}\n}\n\n\\begin{document}\n\\begin{tabular}{c c c}\n%\t\t\\toprule\n\nCircuit & Block Diagram & Gains \\\\\n\n\\begin{circuitikz}[american voltages,scale =0.8] \\draw\n(0,0) node[op amp,xscale=1,yscale=-1] (amp) {}\n(amp.out) to[short] (2,0) node[right](target) {}\n(2,0) to [short,*-] (2, -1.55)\n(-2,-1.55) to [R, l_= $Z_1$] (1,-1.55) -- (1,-1.55)\n(1,-1.55) to [short] (2, -1.55)\n(2,0) to [short, -o] (2.5,0) node[right](end){$v_o$}\n(amp.+) to [short, -o] (-2.5,0.6)node[left](){$v_1$}\n(amp.-) to [short] (-2,-0.6)\n(-2,-0.6) to [short, -*] (-2,-1.55)\n(-2,-1.55) to [R, l_= $Z_1$] (-2,-3) node[ground]{}\nnode[below of = target,label={[align=right]Noninverter}, xshift= -0.5cm, yshift = -1.5cm]{};\n;\\end{circuitikz} &\n\n\\begin{tikzpicture}[node distance=1.5cm,auto,>=latex']\n\\tikzstyle{int}=[draw, fill=blue!20, minimum size=2em]\n\\tikzstyle{init} = [pin edge={to-,thick,black}]\n\\node [int, pin={[init]left:$v_1$}] (a) {$K$};\n\\node (end) [right of=a, node distance=1.5cm]{$v_o$};\n\\draw[->] (a) -- (end) ;\n%\\draw[->] (c) edge node {$p$} (end) ;\n\\end{tikzpicture}  &\n$ K_1 = \\dfrac{Z_1+Z_2}{Z_2} $\n\\\\\n\\begin{circuitikz}[american voltages,scale =0.8] \\draw (0,0) node[op amp](amp9){}\n(amp9.out) to[short] (2,0) node[right](target) {}\n(2,1.5)  to[short,*-] (2,0)\n(2,1.5) to [short, -o] (2.5,1.5) node[right](end){$v_o$}\n(-2,1.5) to [R, l^= $Z_2$] (1,1.5) -- (1,1.5)\n(1,1.5) -- (2,1.5)\n(-2,1.5)to[short, *-](-2,0.60)\n(-2,0.60)to[short](amp9.-)\n(amp9.+) to[short] (-2,-0.6)\n(-2,1.5) to [R, l_= $Z_1$,-o] (-4,1.5) -- (-4,1.5) node[left](v1){$v_1$}\n(-2,-0.6) node[ground]{}\nnode[below of = target,label={[align=right]Inverter}, xshift= -0.5cm, yshift = -0.1cm]{};\n\\end{circuitikz}\n&\n\n\\begin{tikzpicture}[node distance=1.5cm,auto,>=latex']\n\\tikzstyle{int}=[draw, fill=blue!20, minimum size=2em]\n\\tikzstyle{init} = [pin edge={to-,thick,black}]\n\\node [int, pin={[init]left:$v_1$}] (a) {$K$};\n\\node (end) [right of=a, node distance=1.5cm]{$v_o$};\n\\draw[->] (a) -- (end) ;\n%\\draw[->] (c) edge node {$p$} (end) ;\n\\end{tikzpicture}\n&\n\n$ K = -\\dfrac{Z_2}{Z_1} $\n\\\\\n\n\\begin{circuitikz}[american voltages,scale =0.8] \\draw (0,0) node[op amp](amp8){}\n(amp8.out) to[short] (2,0) node[right](target) {}\n(2,1.5)  to[short,*-] (2,0)\n(2,1.5) to [short, -o] (2.5,1.5) node[right](end){$v_o$}\n(-2,1.5) to [R, l^= $Z_F$] (1,1.5) -- (1,1.5)\n(1,1.5) -- (2,1.5)\n(-2,1.5)to[short, *-](-2,0.60)\n(-2,0.60)to[short](amp8.-)\n(amp8.+) to[short] (-2,-0.6)\n(-2,1.5) to [R, l_= $Z_1$,-o] (-4,1.5) -- (-4,1.5) node[left](v1){$v_1$}\n(-2.25,0.6) to [R, l^= $Z_2$,-o] (-4,0.6) -- (-4,0.6) node[left](v2){$v_2$}\n(-2.25,0.6) -- (-2,1.5)\n(-2,-0.6) node[ground]{}\nnode[below of = target,label={[align=right]Inverting\\\\Summer}, xshift= -0.5cm, yshift = -0.4cm]{};\n\\end{circuitikz}\n&\n\n\\begin{tikzpicture}[node distance=2cm,auto,>=latex']\n\\tikzstyle{int}=[draw, fill=blue!20, minimum size=2em]\n\\tikzstyle{init} = [pin edge={to-,thick,black}]\n(0,0) \\node [int, pin={[init]left:$v_1$}] (a) {$K_1$};\n\\node [int, pin={[init]left:$v_2$},below of=a] (b) {$K_2$};\n\\node[draw,circle,add={+}{}{+}{},right of =a, yshift=-1cm](mixer){};\n\\node (end) [right of=mixer, node distance=1.5cm]{$v_o$};\n\\node [coordinate,right of =a](a2){};\n\\node [coordinate,right of =b](b2){};\n%\\node (end) [right of=a, node distance=1.5cm]{$v_o$};\n\\draw[->] (mixer) -- (end) ;\n\\draw[-] (a) -- (a2) ;\n\\draw[-] (b) -- (b2) ;\n\\draw[->] (a2) -- (mixer) ;\n\\draw[->] (b2) -- (mixer) ;\n\\end{tikzpicture}\n&\n\n$ K_1 = -\\dfrac{Z_F}{Z_1} $\n$\tK_2 = -\\dfrac{Z_F}{Z_2} $\n\n\n\n\\\\\n\n\\begin{circuitikz}[american voltages,scale =0.8] \\draw (0,0) node[op amp](amp7){}\n(amp7.out) to[short] (2,0) node[right](target) {}\n(2,1.5)  to[short,*-] (2,0)\n(2,1.5) to [short, -o] (2.5,1.5) node[right](end){$v_o$}\n(-2,1.5) to [R, l^= $Z_2$] (1,1.5) -- (1,1.5)\n(1,1.5) -- (2,1.5)\n(-2,1.5)to[short, *-](-2,0.60)\n(-2,0.60)to[short](amp7.-)\n(amp7.+) to[short] (-2,-0.6)\n(-2,1.5) to [R, l_= $Z_1$,-o] (-4,1.5) -- (-4,1.5) node[left](v1){$v_1$}\n(-2.25,-0.6) to [R, l^= $Z_3$,-o] (-4,-0.6) -- (-4,-0.6) node[left](v2){$v_2$}\n(-2.25,-0.6) -- (-2,-0.6)\n(-2,-0.6) to [R, l^= $Z_4$,*-] (-2, -2.25)node[ground]{}\nnode[below of = target,label={[align=right]Subtractor}, xshift= -0.5cm, yshift = -0.5cm]{};\n\\end{circuitikz}\n&\n\n\\begin{tikzpicture}[node distance=2cm,auto,>=latex']\n\\tikzstyle{int}=[draw, fill=blue!20, minimum size=2em]\n\\tikzstyle{init} = [pin edge={to-,thick,black}]\n(0,0) \\node [int, pin={[init]left:$v_1$}] (a) {$K_1$};\n\\node [int, pin={[init]left:$v_2$},below of=a] (b) {$K_2$};\n\\node[draw,circle,add={+}{}{+}{},right of =a, yshift=-1cm](mixer){};\n\\node (end) [right of=mixer, node distance=1.5cm]{$v_o$};\n\\node [coordinate,right of =a](a2){};\n\\node [coordinate,right of =b](b2){};\n%\\node (end) [right of=a, node distance=1.5cm]{$v_o$};\n\\draw[->] (mixer) -- (end) ;\n\\draw[-] (a) -- (a2) ;\n\\draw[-] (b) -- (b2) ;\n\\draw[->] (a2) -- (mixer) ;\n\\draw[->] (b2) -- (mixer) ;\n\\end{tikzpicture}\n&\n\n$ K_1 = -\\dfrac{Z_2}{Z_1} $\n$\tK_2 = \\left(\\dfrac{Z_1+Z_2}{Z_1} \\right) \\left(\\dfrac{Z_4}{Z_3+Z_4} \\right)$\n\n\\\\\n\n\\begin{circuitikz}[american voltages,scale =0.8] \\draw (0,0) node[op amp](amp5){}\n(amp5.out) to[short] (2,0) node[right](target) {}\n(2,1.5)  to[short,*-] (2,0)\n(2,1.5) to [short, -o] (2.5,1.5) node[right](end){$v_o$}\n(-2,1.5) to [C, l^= $C$] (1,1.5) -- (1,1.5)\n(1,1.5) -- (2,1.5)\n(-2,1.5)to[short, *-](-2,0.60)\n(-2,0.60)to[short](amp5.-)\n(amp5.+) to[short] (-2,-0.6)\n(-2,1.5) to [R, l_= $R$,-o] (-4,1.5) -- (-4,1.5) node[left](v1){$v_1$}\n(-2,-0.6) node[ground]{}\nnode[below of = target,label={[align=right]Integrator}, xshift= -0.5cm, yshift = -0.35cm]{};\n\\end{circuitikz}\n&\n\n\\begin{tikzpicture}[node distance=2cm,auto,>=latex']\n\\tikzstyle{int}=[draw, fill=blue!20, minimum size=2em]\n\\tikzstyle{init} = [pin edge={to-,thick,black}]\n(0,0) \\node [int, pin={[init]left:$v_1$}] (a2) {$K$};\n\\node [int,right of=a2] (b2) {$\\int$};\n\\draw [->] (a2) to (b2);\n\\node(end2) [right of=b2, node distance=1.5cm] {$v_o$};\n\\draw [->] (b2) to (end2);\n\n%  \\draw[->]b2 -- end2;\n\\end{tikzpicture}\n&\n\n$ K = -\\dfrac{1}{RC} $\n\\\\\n\n\\begin{circuitikz}[american voltages,scale =0.8] \\draw (0,0) node[op amp](amp4){}\n(amp4.out) to[short] (2,0) node[right](target) {}\n(2,1.5)  to[short,*-] (2,0)\n(2,1.5) to [short, -o] (2.5,1.5) node[right](end){$v_o$}\n(-2,1.5) to [R, l^= $R$] (1,1.5) -- (1,1.5)\n(1,1.5) -- (2,1.5)\n(-2,1.5)to[short, *-](-2,0.60)\n(-2,0.60)to[short](amp4.-)\n(amp4.+) to[short] (-2,-0.6)\n(-2,1.5) to [C, l_= $C$,-o] (-4,1.5) -- (-4,1.5) node[left](v1){$v_1$}\n(-2,-0.6) node[ground]{}\nnode[below of = target,label={[align=right]Differentiator}, xshift= -0.5cm, yshift = -0.4cm]{};\n\\end{circuitikz}\n&\n\n\\begin{tikzpicture}[node distance=2cm,auto,>=latex']\n\\tikzstyle{int}=[draw, fill=blue!20, minimum size=2em]\n\\tikzstyle{init} = [pin edge={to-,thick,black}]\n(0,0) \\node [int, pin={[init]left:$v_1$}] (a2) {$K$};\n\\node [int,right of=a2] (b2) {${\\partial}{ \\partial t}$};\n\\draw [->] (a2) to (b2);\n\\node(end2) [right of=b2, node distance=1.5cm] {$v_o$};\n\\draw [->] (b2) to (end2);\n\n%  \\draw[->]b2 -- end2;\n\\end{tikzpicture}\n&\n\n$$ K = -RC $$\n\\\\\n\n\\begin{circuitikz}[american voltages,scale =0.8] \\draw (0,0) node[op amp,yscale=-1](amp2){}\n(amp2.out) to[short] (1.5,1.5) node[right](target) {}\n(2,1.5)  to[short,*-] (1.5,1.5)\n(2,1.5) to [short, -o] (2.5,1.5) node[right](end){$v_o$}\n(-2,1.5)to[short, -*](-2,0.60)\n(-2,-0.60)to[short](amp2.-)\n(amp2.+) to[short] (-2,0.6)\n(-2,1.5) to [R, l_= $Z_1$,-o] (-4,1.5) -- (-4,1.5) node[left](v1){$v_1$}\n(-2.25,0.6) to [R, l^= $Z_2$,-o] (-4,0.6) -- (-4,0.6) node[left](v2){$v_2$}\n(2,1.5) to [R, l^= $R_A$,-*] (2,-0.25) -- (2,-0.25)\n(2,-0.25) to [R, l^= $R_B$] (2,-2) -- (2,-2)\n(-2.25,0.6) -- (-2,0.6)\n(-2,-0.6) -- (-2,-2)\n(-2,-2)\t-- (1,-2)\n(1,-2) -- (1, -0.25)\n(1, -0.25) -- (2, -0.25)\n(2,-2) node[ground]{}\nnode[below of = target,label={[align=right]Noninverting Summer}, xshift= -0.5cm, yshift = -3.25cm]{};\n\\end{circuitikz}\n&\n\n\\begin{tikzpicture}[node distance=2cm,auto,>=latex']\n\\tikzstyle{int}=[draw, fill=blue!20, minimum size=2em]\n\\tikzstyle{init} = [pin edge={to-,thick,black}]\n(0,0) \\node [int, pin={[init]left:$v_1$}] (a) {$K_1$};\n\\node [int, pin={[init]left:$v_2$},below of=a] (b) {$K_2$};\n\\node [int,right of=mixer] (c) {$K_{AMP}$};\n\\node[draw,circle,add={+}{}{+}{},right of =a, yshift=-1cm](mixer){};\n\\node (end) [right of=c, node distance=1.5cm]{$v_o$};\n\\node [coordinate,right of =a](a2){};\n\\node [coordinate,right of =b](b2){};\n%\\node (end) [right of=a, node distance=1.5cm]{$v_o$};\n\\draw[->] (mixer) -- (c) ;\n\\draw[->] (c) -- (end) ;\n\\draw[-] (a) -- (a2) ;\n\\draw[-] (b) -- (b2) ;\n\\draw[->] (a2) -- (mixer) ;\n\\draw[->] (b2) -- (mixer) ;\n\\end{tikzpicture}\n&\n\n$ K_1 = -\\dfrac{Z_2}{Z_1+Z_2} $\n$ K_2 = -\\dfrac{Z_1}{Z_1+Z_2} $\n$ K_{AMP} = \\dfrac{R_A+R_B}{R_B} $\n\\\\\n%\\tikzset{component/.style={draw,thick,circle,fill=white,minimum size =0.75cm,inner sep=0pt}}\n\\ctikzset{bipoles/length=0.8cm}\n\n\\begin{circuitikz}[american voltages,scale =0.8] \\draw (0,0) node[op amp](amp3){}\n(amp3.out) to[short, -o] (2,0) node[right](target) {$v_0$}\n(1,0) to[short,*-] (1,1.5)\n(1,1.5) to[short] (-2,1.5)\n(-2,1.5)to[short](-2,0.60)\n(-2,0.60)to[short](amp3.-)\n(amp3.+) to[short, -o] (-2,-0.6)node[left] {$v_1$};\n\\node[below of = target, xshift= -0.75cm, yshift = 0.25cm]{Follower};\n\\end{circuitikz}\n\n&\n\\tikzstyle{int}=[draw, fill=blue!20, minimum size=2em]\n\\tikzstyle{init} = [pin edge={to-,thick,black}]\n\n\\begin{tikzpicture}[node distance=1.5cm,auto,>=latex']\n\\node [int, pin={[init]left:$v_1$}] (a) {$K$};\n\\node (end) [right of=a, node distance=1.5cm]{$v_o$};\n\\draw[->] (a) -- (end) ;\n%\\draw[->] (c) edge node {$p$} (end) ;\n\\end{tikzpicture}&\tK = 1\t\\\\\n\\bottomrule\n\\end{tabular}\n\n\\end{document}"}},"/Circuits/TheveinEquivalent":{"title":"Description","data":{"":"This is a LaTeX document that uses the standalone document class and several packages including circuitikz, siunitx, and amsmath. The circuitikz package provides the tools to draw electronic circuits, while siunitx provides support for typesetting units and amsmath provides additional math symbols.The code uses the circuitikz environment to draw a circuit diagram with several components. The circuit consists of a voltage source (V), resistors (R), a current-controlled current source (cI), and a current-controlled voltage source (cV). The components are connected using to commands, and labels are added to indicate the values of resistors and sources, as well as the direction and name of currents and voltages. Labels are also added to nodes in the circuit for later reference.","keywords#Keywords":"circuitikz, siunitx, amsmath, tikz, resistor, voltage source, current source, node, label.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usepackage{circuitikz}\n\\usepackage{siunitx}\n\\usepackage{amsmath,amssymb}\n\\begin{document}\n\\begin{circuitikz}\n\\draw (0,2) to[V,v>=$100\\si{\\ampere}$] (0,0); %% Note _>= instead of >=\n\\draw (0,2) to [R,l^=$2.5 \\si{k\\ohm}$,i_>=$i_1$,-*] (2,2)\nto [R=$625\\si{\\ohm}$,-*](2,0);\n\\draw (2,2) to [short] (4,2);\n\\draw (4,0)to [cI,l_=$10^{-3}v_2$] (4,2);\n\\draw (4,0)\nto [R,l^=$4\\si{\\ohm}$] (2,0);\n\\draw (0,0) to [short,-*] (2,0);\n\n\\draw (4,0) to [short,-*] (8,0);\n\\draw (8,2)to [cV,l_=$5000i_1$](8,0)\nto [short] (10,0);\n\\draw (8,2)\nto [R,l^=$4\\si{k \\ohm}$] (10,2)\nto [R,l^=$6\\si{k \\ohm}$,v_>=$v_2$] (10,0)\nto [short, -*] (12,0)\nnode[label={[font=\\footnotesize]above:$b$}] {}\n;\n\n\\draw (10,2) to [short, -*] (12,2)\nnode[label={[font=\\footnotesize]above:$a$}] {}\n;\n\\end{circuitikz}\n\\end{document}"}},"/Circuits/TheveinEquvialentSimplified":{"title":"Description","data":{"":"This code is a LaTeX document that uses the circuitikz package to draw a circuit diagram. The circuit consists of a voltage source V_TH connected to a resistor R_TH in series. The voltage source is labeled with the voltage value 60 V, and the resistor is labeled with the resistance value 1.5 kohm. The nodes on either end of the circuit are labeled a and b, respectively, using the label option. The resulting diagram shows a simple circuit with a voltage source and a resistor.","keywords#Keywords":"circuit, tikz, voltage, resistance","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usepackage{circuitikz}\n\\usepackage{siunitx}\n\\usepackage{amsmath,amssymb}\n\\begin{document}\n\\begin{circuitikz}\n\\draw (0,2) to[V,l_=$V_{TH} \\equal 60 \\si{\\volt}$] (0,0); %% Note _>= instead of >=\n\\draw (0,2)to [R,l^=$R_{TH} \\equal 1.5 \\si{k\\ohm}$,-o] (4,2)\nnode[label={[font=\\footnotesize]right:$a$}] {};\n\\draw (0,0) to [short,-o] (4,0)\nnode[label={[font=\\footnotesize]right:$b$}] {};\n\\end{circuitikz}\n\\end{document}"}},"/ControlSystems/CSI/BlockDiagramex2":{"title":"Description","data":{"":"The code above is a LaTeX document that creates a block diagram using the blox and tikz packages. The block diagram consists of several blocks and arrows that represent a system of interconnected components. The code defines the layout and styling of the blocks and arrows using various blox commands and tikz drawing commands. The document begins with the \\documentclass command, which specifies the document class as standalone. The necessary packages are then loaded using the \\usepackage command. Finally, the tikzpicture environment is used to create the block diagram using the defined blox and tikz commands.","keywords#Keywords":"tikzpicture, blox, positioning, bXLineStyle, bXInput, bXComp, bXLink, bXCompa, bXSumb, bXBloc, bXBranchx, bXBranchy.","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\n\\begin{document}\n\\begin{tikzpicture}\n%\\bXLineStyle{red, dotted}\n\\bXLineStyle{very thick}\n\\bXInput{A}\n\\bXComp{B}{A}\n\\bXLink[R]{A}{B}\n\\bXCompa{C}{B}\n\\bXLink{B}{C}\n\\bXSumb{D}{C}\n\\bXLink{C}{D}\n\\bXBloc[2]{E}{$G_1$}{D}\n\\bXLink{D}{E}\n\\bXBloc[2]{F}{$G_2$}{E}\n\\bXLink{E}{F}\n\n\\bXBranchx[5]{F}{FX1}\n\n\\bXBranchy[5]{FX1}{FDown1}\n\\draw[-,very thick] (F) -- (FX1.center);\n\\draw[-,very thick] (FX1.center) -- (FDown1.center);\n\\bXBranchx[-5.5]{FDown1}{FRight1}\n\\draw[->,very thick] (FDown1.center) -- (FRight1.center);\n\\bXBloc[-3.5]{H1}{$H_1$}{FRight1}\n\\bXBranchy[5]{D}{DDown1}\n\\draw[->,very thick] (DDown1.center) -- (D);\n\\draw[-,very thick] (H1) -- (DDown1.center);\n\n\\bXBloc[2]{G}{$G_3$}{FX1}\n%\\draw[-,very thick]  (F)  -- (FX1);\n\\draw[->,very thick] (F) -- (G);\n\n\\bXBranchx[3]{G}{GX1}\n\\bXBranchx[3]{GX1}{GX2}\n\\draw[-,very thick] (G) -- (GX2);\n\\bXBranchx[3]{GX2}{GX3}\n\\bXBranchy[-5]{GX2}{GUp1}\n\n\\bXBranchx[1.5]{GX2}{GX4}\n\\bXBranchy[7.5]{GX4}{GDown1}\n%\\draw[-,very thick] (G) -- (GX1.center);\n%\\draw[-,very thick] (G) -- (GX1.center);\n%\\draw[-,very thick] (GX1.center) -- (GUp1.center);\n%\\bXLinkxy{GX1}{GUp1}\n\\draw[-,very thick] (GX1.center) -- (GX2.center);\n\\draw[-,very thick] (GX2.center) -- (GUp1.center);\n\\draw[->,very thick] (GX2.center) -- (GX3.center);\n\\node[right = 0.05cm of GX3] (end) {$C$};\n\n\\draw[-,very thick] (GX4.center) -- (GDown1.center);\n\n\\bXBranchy[7.5]{B}{BDown1}\n\\bXLink{BDown1.center}{B}\n\\draw[-,very thick] (GDown1.center) -- (BDown1.center);\n\n\n%% Top Part\n\n\\bXBranchx[-20]{GUp1}{GLUp1}\n\\bXBloc[-0]{BlockHG}{$\\frac{H_2}{G_1}$}{GLUp1}\n\\draw[->,very thick] (GUp1.center) -- (BlockHG);\n\\bXLinkxy{BlockHG}{C}\n\\end{tikzpicture}\n\\end{document}"}},"/ControlSystems/CSI/Mason":{"title":"Description","data":{"":"The code above is a LaTeX document that uses the TikZ package to create a diagram of a second-order mechanical system with a feedback control loop. The diagram consists of five nodes representing the different components of the system, namely the input function , the output , the intermediate state variable , and the two other intermediate variables  and . The connections between the nodes are drawn as arrows with labeled markers representing the transfer functions of the components. The options and styles used in the TikZ picture include \"label revd\" which is a conditional that decides whether the label should be above or below the arrow depending on the value of the \"labrev\" boolean flag. The picture also defines a custom style called \"amark\" that applies a decoration to the arrow, consisting of a marker at the middle of the arrow with a label above or below it depending on the value of the \"labrev\" flag. Finally, the picture uses the \"terminal\" style to define the nodes, which are circles with an inner label and optional label position.","keywords#Keywords":"tikz, decorations.markings, newif, terminal, amark","source-code#Source Code":"\\documentclass{article}\n\\usepackage{tikz}\n\\usetikzlibrary{decorations.markings}\n\\newif\\iflabrev\n\\begin{document}\n\\begin{tikzpicture}\n[\nlabel revd/.is if=labrev,\n%label revd/.default=true,\namark/.style={\ndecoration={\nmarkings,\nmark=at position {0.5} with {\n\\arrow{stealth},\n\\iflabrev \\node[above] {#1};\\else \\node[below] {#1};\\fi\n}\n},\npostaction={decorate}\n},\nterminal/.style 2 args={draw,circle,inner sep=2pt,label={#1:#2}},\n]\n\n%Place the nodes\n\\node[terminal={below}{$f(t)$}] (a) at (0,0) {};\n\\node[terminal={below left}{$y_1$}] (b) at (3cm,0) {};\n\\node[terminal={below left}{$\\ddot{y}_2$}] (c) at (6cm,0) {};\n\\node[terminal={[xshift=-4mm]below right}{$\\dot{y}_2=x_2$}] (d) at (9cm,0) {};\n\\node[terminal={below right}{$y_2=x_1$}] (e) at (12cm,0) {};\n%Draw the connections\n\\draw[amark=$1/K$] (a) to (b);\n\\draw[amark=$K/M$] (b) to (c);\n\\draw[amark=$s^{-1}$] (c) to (d);\n\\draw[amark=$s^{-1}$] (d) to (e);\n\\draw[amark=$-B/M$] (d) to[bend left=45] (c);\n\\draw[amark=$1$,label revd] (e) to[bend left=50] (b);\n\\draw[amark=$-K/M$,label revd] (e) to[bend right=50] (c);\n\\end{tikzpicture}\n\\end{document}"}},"/ControlSystems/CSI/Q10BlockDiagram":{"title":"Description","data":{"":"The code above creates a block diagram using the TikZ package. It defines several block components using the \"blox\" package, including an input (labeled \"A\"), a computation block (labeled \"B\"), a block for a transfer function with the label \"G(s)\", an output block (labeled \"E\"), and a return block. It connects these blocks with arrows labeled with either transfer functions or block names. The diagram represents a feedback control system with an input labeled \"R(s)\", a transfer function \"G(s)\", and an output labeled \"C(s)\". The return block connects the output of the system back to the input of the computation block, forming a closed loop.","keywords#Keywords":"amsmath, amssymb, blox, tikz, tikzpicture, bXInput, bXComp, bXLink, bXBloc, bXOutput, bXReturn.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{amsmath}  % For math\n\\usepackage{amssymb}  % For more math\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\begin{document}\n\\begin{tikzpicture}\n\\bXInput{A}\n\\bXComp{B}{A}\n\\bXLink[$R(s)$]{A}{B}\n\\bXBloc[2]{C}{$\\displaystyle G(s)$}{B}\n\\bXLink{B}{C}\n\\bXOutput[4]{E}{C}\n\\bXLink[$C(s)$]{C}{E}\n\\bXReturn{C-E}{B}{}\n\\end{tikzpicture}\n\n\\end{document}"}},"/ControlSystems/CSI/Q1Diagram67":{"title":"Description","data":{"":"The code above creates a block diagram using the TikZ package in LaTeX. The diagram includes several components, including an input node labeled \"A\", a computation node labeled \"B\", a block node labeled \"C\" with the transfer function , another block node labeled \"D\" with the transfer function , and an output node labeled \"E\". There are also several links between these components, including a link labeled \"\" from node A to node B, a link from node B to node C, a link from node C to node D, and a link labeled \"\" from node D to node E. Finally, there is a return link from the output node E to the computation node B.","keywords#Keywords":"amsmath, amssymb, blox, tikz, Input, Comp, Link, Bloc, Output, Return.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{amsmath}  % For math\n\\usepackage{amssymb}  % For more math\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\begin{document}\n\\begin{tikzpicture}\n\\bXInput{A}\n\\bXComp{B}{A}\n\\bXLink[$R(s)$]{A}{B}\n\\bXBloc[2]{C}{$K\\cfrac{s+1}{s+5}$}{B}\n%\\bXLink[$V_1$]{B}{C}\n\\bXLink{B}{C}\n\\bXBloc[2]{D}{$\\cfrac{2}{s^2(s+2)}$}{C}\n\\bXLink{C}{D}\n\\bXOutput[4]{E}{D}\n\\bXLink[$C(s)$]{D}{E}\n\\bXReturn{D-E}{B}{}\n\\end{tikzpicture}\n\n\\end{document}"}},"/ControlSystems/CSI/Q2Circuit":{"title":"Description","data":{"":"The code above is a LaTeX document that uses several packages, including circuitikz for drawing circuit diagrams, graphicx for including images, and mathrsfs for using a script font in math mode. The document defines a custom command \\equal that produces an equals sign. It then creates a circuit diagram using circuitikz that consists of four components (two resistors, one capacitor, and one inductor) connected in a series with an input voltage source and an output voltage source. The circuit diagram also includes arrows indicating the direction of current flow in the circuit. The document also includes commented-out code for another circuit diagram.","keywords#Keywords":"latexmk, pdfLaTeX, circuitikz, graphicx, mathrsfs, latexsym, amssymb, amsmath.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage[american]{circuitikz}\n\\usepackage{graphicx}\n\\usepackage{mathrsfs}\n\\usepackage{latexsym,amssymb,amsmath}\n\\newcommand{\\equal}{=}\n\\begin{document}\n\\begin{circuitikz}\n%\\draw (0,4) to [open,v^>=$v_1(t)$,o-o]  (0,0) -- Open Short\n\\draw (0,3) to [open,l=$e_i$,o-o]  (0,0) % input\n(0,3) to  [R, l^= $R_1$,-*] (3,3)\t%R1\n(3,3) to  [L, l^= $L$,-*] (3,0)\t%C1\n(3,3) to [R, l^= $R_2$,-* ] (6,3)\t%R2\n(6,3) to  [C, l^= $C$,-*] (6,0)\t%C2\n(8,3) to [open,l_=$e_o$,o-o]  (8,0) \t% output\n(0,0) -- (8,0) % wire in bottom\n(6,3) -- (8,3) % wire to output\n;\n\n% Current flows in tikz\n\\draw[thin, <-, >=triangle 45] (1.5,1.5) node{$i_1$}   ++(-90:0.75) arc (-90:100:0.75);\n\\draw[thin, <-, >=triangle 45] (4.5,1.5) node{$i_2$}   ++(-90:0.75) arc (-90:100:0.75);\n%\t\t\\node (phi) at (4.25,0.5) {$i_2$};\n%\t\t\\draw[-stealth]  (4.25,2.5) to [bend left=90] (phi);\n\\end{circuitikz}\n%\t\\begin{circuitikz}\n%\t\t%\\draw (0,4) to [open,v^>=$v_1(t)$,o-o]  (0,0) -- Open Short\n%\t\t\\draw (0,4) to [open,l^=$e_1$,o-o]  (0,0)\n%\t\t(0,4) to  [R,i>=$\\phi_1$, l^= $\\mathscr{R}_{1}$,v_>=$\\mathscr{F}_1$, color=purple] (4,4)\n%\t    (4,0) -- (0,0)\n%\t     (4,4) to [R,i^>=$\\phi_2$, l^= $\\mathscr{R}_{2}$,v_>=$\\mathscr{F}_2$, color=blue] (4,0)\n%\t\t(4,4) to [R,l^= $\\mathscr{R}_{3}$,v_>=$\\mathscr{F}_3$, color=red] (8,4)\n%\t\t(8,4) to [R,i^>=$\\phi_3$, l^= $\\mathscr{R}_{g}$,v_>=$\\mathscr{F}_g$, color=cyan] (8,0)\n%\t\t(8,0) to [R, l^= $\\mathscr{R}_{4}$,v_>=$\\mathscr{F}_4$, color=green] (4,0);\n%\t\t\\draw[thin, <-, >=triangle 45] (6,2) node{$\\phi_3$}   ++(-90:1) arc (-90:100:1);\n%\t\t\\draw[thin, <-, >=triangle 45] (2,2) node{$\\phi_2$}   ++(-90:1) arc (-90:100:1);\n%%\t\t\\node (phi) at (4.25,0.5) {$\\phi_2$};\n%%\t\t\\draw[-stealth]  (4.25,2.5) to [bend left=90] (phi);\n%\t\\end{circuitikz}\n\\label{fig:q1fig}\n\\end{document}"}},"/ControlSystems/CSI/Q2Diagram614":{"title":"Description","data":{"":"The code above is a LaTeX document that defines a TikZ picture environment to create a block diagram. It uses the \"blox\" package and \"tikz\" package to draw the blocks and arrows in the diagram. The block diagram represents a feedback control system with an input signal , a controller block with transfer function , and an output signal . The blocks are labeled with letters A, B, C, and E, and arrows are labeled with text to indicate the input and output signals. The \"amsmath\" and \"amssymb\" packages are also loaded to allow for mathematical notation in the diagram.","keywords#Keywords":"Keywords: TikZ, blox, control systems, block diagram, transfer function.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{amsmath}  % For math\n\\usepackage{amssymb}  % For more math\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\begin{document}\n\\begin{tikzpicture}\n\\bXInput{A}\n\\bXComp{B}{A}\n\\bXLink[$R(s)$]{A}{B}\n\\bXBloc[2]{C}{$\\cfrac{K}{s(s^2+4s+5)}$}{B}\n%\\bXLink[$V_1$]{B}{C}\n\\bXLink{B}{C}\n\\bXOutput{E}{C}\n\\bXLink[$C(s)$]{C}{E}\n\\bXReturn{C-E}{B}{}\n\\end{tikzpicture}\n\n\\end{document}"}},"/ControlSystems/CSI/Q3Circuit":{"title":"Description","data":{"":"The code above is a LaTeX document that creates a circuit diagram using the circuitikz package. The circuit diagram shows an op-amp voltage amplifier with an input voltage source e_i and output voltage source e_o. The op-amp is connected to a capacitor C and a resistor R_1 on the input side, and to two resistors R_2 and R_3 on the output side. The input and output sources are connected to open circuit symbols, which indicate that they are not connected to anything else in the circuit. The op-amp is represented by a rectangular box with a + and - sign, which denotes its non-inverting and inverting inputs, respectively. The circuit is drawn using various commands, including draw, to, open, node, ground, and short. The values of the components in the circuit are specified using labels, such as $C$, $R_1$, $R_2$, and $R_3$.","keywords#Keywords":"circuitikz, graphicx, mathrsfs, latexsym, amssymb, amsmath, op amp, C, R, ground","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage[american]{circuitikz}\n\\usepackage{graphicx}\n\\usepackage{mathrsfs}\n\\usepackage{latexsym,amssymb,amsmath}\n\\newcommand{\\equal}{=}\n\\begin{document}\n\\begin{circuitikz}\n%\\draw (0,4) to [open,v^>=$v_1(t)$,o-o]  (0,0) -- Open Short\n\\draw (0,6) to [open,l=$e_i$,o-o]  (0,1) % input\n(0,6) to  [C, l^= $C$,-*] (2,6)\t%C\n(2,6) to  [R, l^=$R_1$,-*] (2,1)\t%R1\n(2,1) -- (2,0.5) node[ground]{}\t%ground\n(5, 5.5) node[op amp,yscale=-1] (opamp) {}\n(2,\t6) to [open, -*] (3.5,6) node[above]{$A$}\n(2,6) -- (opamp.+)\n(3.5,5) node[left]{$B$} to [short,*-] \t(opamp.-)\n(opamp.out)  to [short,-*]  (6.5,5.5)\nto [R, l_=$R_2$,-*] (6.5,3) %R2\nto [R, l_=$R_3$, -*] (6.5,1)\n(6.5,3) -- (3.5,3)\t% connect B to middle of resistors\n(3.5,3) -- (3.5,5)\t% vertical connection to B\n(6.5,5.5) -- (7.5,5.5)\n(7.5,5.5) to [open,l_=$e_o$,o-o]  (7.5,1) % output\n(0,1) -- (7.5,1) % wire\n;\n\\end{circuitikz}\n\\end{document}"}},"/ControlSystems/CSI/Q3Circuit2":{"title":"Description","data":{"":"The code above is a LaTeX document that generates a circuit diagram using the circuitikz package. The circuit diagram consists of an input voltage source labeled , a capacitor labeled , a resistor labeled , an operational amplifier, two resistors labeled  and , and an output voltage source labeled . The circuit is drawn using various commands from the circuitikz package, such as \"to\" for drawing wires and \"node\" for labeling components. The \"dotted\" and \"rectangle\" commands are used to draw boxes around components  and , respectively. The document uses various LaTeX packages such as graphicx, mathrsfs, amsmath, and amssymb to generate the circuit and add math symbols.","keywords#Keywords":"circuitikz, graphicx, mathrsfs, latexsym, amssymb, amsmath.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage[american]{circuitikz}\n\\usepackage{graphicx}\n\\usepackage{mathrsfs}\n\\usepackage{latexsym,amssymb,amsmath}\n\\newcommand{\\equal}{=}\n\\begin{document}\n\\begin{circuitikz}\n%\\draw (0,4) to [open,v^>=$v_1(t)$,o-o]  (0,0) -- Open Short\n\\draw (0,6) to [open,l_=$e_i$,o-o]  (0,1) % input\n(0,6) to  [C, l_= $C$,-*] (2,6)\t%C\n(1,6) node[] (Z2) {}\t% used for drawing rectangle\n(2,6) to  [R, l_=$R_1$,-*] (2,1)\t%R1\nnode[] (Z2end) {}\t% used for drawing rectangle\n(2,1) -- (2,0.5) node[ground]{}\t%ground\n(5, 5.5) node[op amp] (opamp) {}\n(2,\t6) to [open, -*] (3.5,6) node[above]{$A$}\n(2,6) -- (opamp.-)\n(3.5,5) node[left]{$B$} to [short,*-] \t(opamp.+)\n(opamp.out)  to [short,-*]  (6.5,5.5)\nnode[] (Z1) {}\t% used for drawing rectangle\nto [R, l^=$R_2$,-*] (6.5,3) %R2\nto [R, l^=$R_3$, -*] (6.5,1)\nnode[] (Z1end) {} % used for drawing rectangle\n(6.5,3) -- (3.5,3)\t% connect B to middle of resistors\n(3.5,3) -- (3.5,5)\t% vertical connection to B\n(6.5,5.5) -- (7.5,5.5)\n(7.5,5.5) to [open,l^=$e_o$,o-o]  (7.5,1) % output\n(0,1) -- (7.5,1) % wire\n;\n\\draw[thick,dotted]     ($(Z1.north west)+(-0.5,0.15)$) rectangle ($(Z1end.south east)+(0.5,-0.15)$);\n\\draw (Z1.north) +(0,0.5) node {$Z_1$};\n\\draw[thick,dotted]     ($(Z2.north west)+(-0.5,0.25)$) rectangle ($(Z2end.south east)+(0.5,-0.15)$);\n\\draw (Z2.north) +(0,0.5) node {$Z_2$};\n\\end{circuitikz}\n\\end{document}"}},"/ControlSystems/CSI/Q3Diagram616":{"title":"Description","data":{"":"The code above produces a block diagram using the blox package in LaTeX. The block diagram consists of several components such as input, comparator, gain block, transfer function block, output, and a feedback loop. The nodes are labeled with letters such as A, B, C, D, and E. The package tikz is also used for drawing and positioning the nodes. Finally, two labels are added at the bottom for the controller transfer function Gc(s) and the plant transfer function G(s).","keywords#Keywords":"standalone, amsmath, amssymb, blox, tikz, picture, block diagram","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{amsmath}  % For math\n\\usepackage{amssymb}  % For more math\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\begin{document}\n\\begin{tikzpicture}\n\\bXInput{A}\n\\bXComp{B}{A}\n%\\bXLink[$R(s)$]{A}{B}\n\\bXLink{A}{B}\n\\bXBloc[2]{C}{$K(Ts+1)$}{B}\n%\\bXLink[$V_1$]{B}{C}\n\\bXLink{B}{C}\n\\bXBloc[2]{D}{$\\cfrac{1}{s(s+2)}$}{C}\n\\bXLink{C}{D}\n\\bXOutput[4]{E}{D}\n%\\bXLink[$C(s)$]{D}{E}\n\\bXLink{D}{E}\n\\bXReturn{D-E}{B}{}\n\\node (Gc) at (3.5,-0.95) {$G_c(s)$};\n\\node (Gs) at (5.75,-0.95) {$G(s)$};\n\\end{tikzpicture}\n\n\\end{document}"}},"/ControlSystems/CSI/Q4Diagram617":{"title":"Description","data":{"":"This code generates a block diagram using the TikZ package in LaTeX. The diagram has four blocks: an input block labeled \"A,\" a comparator block labeled \"B,\" a proportional controller block labeled \"G_c(s),\" and a plant block labeled with a transfer function of  and labeled \"D.\" There are also two connection lines labeled with arrows between the blocks, one connecting \"A\" to \"B\" and the other connecting \"B\" to \"C.\" There is an output block labeled \"E\" with an arrow connecting it to the plant block \"D\" and another connection line labeled with an arrow connecting the plant block \"D\" to the comparator block \"B.\" Finally, there is a return line labeled with an arrow connecting the difference between \"D\" and \"E\" to the input block \"B.\"","keywords#Keywords":"amsmath, amssymb, blox, tikz, input, comparator, link, block, output, return, transfer function, control system.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{amsmath}  % For math\n\\usepackage{amssymb}  % For more math\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\begin{document}\n\\begin{tikzpicture}\n\\bXInput{A}\n\\bXComp{B}{A}\n%\\bXLink[$R(s)$]{A}{B}\n\\bXLink{A}{B}\n\\bXBloc[2]{C}{$G_c(s)$}{B}\n%\\bXLink[$V_1$]{B}{C}\n\\bXLink{B}{C}\n\\bXBloc[2]{D}{$\\cfrac{5}{s(0.5s+1)}$}{C}\n\\bXLink{C}{D}\n\\bXOutput[4]{E}{D}\n%\\bXLink[$C(s)$]{D}{E}\n\\bXLink{D}{E}\n\\bXReturn{D-E}{B}{}\n%\\node (Gc) at (3.25,-0.95) {$G_c(s)$};\n%\\node (Gs) at (5.375,-0.95) {$G(s)$};\n\\end{tikzpicture}\n\n\\end{document}"}},"/ControlSystems/CSI/Q5BlockDiagram":{"title":"Description","data":{"":"The given LaTeX code generates a block diagram for a control system. It starts by defining a few variables such as \\equal for the equal sign, and the radius of an arc over the intersection. Then it defines a style called connect that can be used to draw a curved line between two points. The actual diagram is created in a tikzpicture environment.The diagram starts with an input block, labeled as A. A summing block is added next, labeled as B. A line is drawn with the label R(s) from A to B, indicating the input to the summing block. Block G1 is added with a gain of 2, labeled as C, and a line is drawn from B to C. Two more summing blocks are added, labeled as D and E, respectively. A branch is added from E for two blocks, H1 and G2, with G2 having a gain of 2, labeled as EH2. Block H1 is positioned above G1 using a branch. Another branch is added from G2 to block H2 with a gain of -1.5.The other branch from E is used to add two more blocks, H2 and G3. Block H2 has a gain of -4.5 and is placed below the branch. Another summing block is added below H2, labeled as adder4, and a line is drawn from EH2 to adder4, indicating the input to adder4. Block G3 is added below adder4 with a gain of 3. The output of G3 is connected to the final block, which is labeled as C(s).Lastly, some connections between blocks are made using lines and arrows. The connect style is used to draw a curved line from adder3down to E with a 3pt gap over the intersection with H2 to adder2down. A line is drawn from H2Block to adder2down, and from adder4up to adder4. The final output is connected to G3Block using an arrow, and a line is drawn from H3Block to adder3down. Finally, the last connection is made between BranEndReturn and B.","keywords#Keywords":"The keywords for the LaTeX diagram above are: TikZ, nodes, edges, graphs, styles, labels, arrows, paths, positioning.","source-code#Source Code":"% Block diagram in control system - complete\n\n\\documentclass{standalone}\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\newcommand{\\equal}{=}\n\\usepackage{tikz}\n\\usetikzlibrary{intersections}\n\\usepackage{tkz-euclide}\n% Radius for arc over intersection\n\\def\\radius{1.mm}\n\n\\tikzset{\nconnect/.style args={(#1) to (#2) over (#3) by #4}{\ninsert path={\nlet \\p1=($(#1)-(#3)$), \\n1={veclen(\\x1,\\y1)},\n\\n2={atan2(\\y1,\\x1)}, \\n3={abs(#4)}, \\n4={#4>0 ?180:-180}  in\n(#1) -- ($(#1)!\\n1-\\n3!(#3)$)\narc (\\n2:\\n2+\\n4:\\n3) -- (#2)\n}\n},\n}\n\n\\begin{document}\n\\begin{tikzpicture}\n\\bXInput{A}\t\t\t\t% Input\n\\bXComp{B}{A}\t\t\t% First adder\n\\bXLink[$R(s)$]{A}{B}\t% Input Label\n\\bXBloc[2]{C}{$G_1$}{B}\t% Block G1\n\\bXLink{B}{C}\t\t\t% First added -- G1\n\\bXComp{D}{C}\t\t\t% Second adder\n\\bXComp{E}{D}\t\t\t% Third adder\n\\bXBranchx[3]{E}{EH1}\t% Branch for H1, G2\n\\bXBloc[2]{EH2}{$G_2$}{EH1}\t% Block G2\n\\bXBranchy[-5]{EH2}{EV2}\t% Branch up for H1 -- above G1\n\\bXBloc[-1.5]{H2}{$H_1$}{EV2}\t% Block H1\n\\bXBranchx[-3.5]{H2}{H2left}\t% Branch for H1, G2\n\n\\bXBranchx[3]{EH2}{Bran2}\t\t% Branch after G2 and for H2\n\\bXBranchy[5]{Bran2}{Bran2Down}\t% beneath branch 2\n\\bXBloc[-4.5]{H2Block}{$H_2$}{Bran2Down}\n\\bXSuma{adder4}{Bran2}\n\\bXLink{C}{D}\n\\bXLink{D}{E}\n\\bXLink{E}{EH2}\n\\bXLink{EH2}{adder4}\t\t% G2 to adder\n\n\\bXBloc[3]{G3Block}{$G_3$}{adder4} % G3\n\\bXBranchx[4]{G3Block}{BranEnd} % branch before output\n\\bXBranchy[7.5]{BranEnd}{H3BlockRight} % Right H3 Block\n\\bXBranchy[2.5]{H3BlockRight}{BranEndReturn} % Right H3 Block\n\\bXBranchy[7.5]{E}{adder3down} % Below adder3\n\\bXBloc[-7.5]{H3Block}{$H_3$}{H3BlockRight}\t% H3 Block\n\\draw[-] (BranEnd.center) -- (H3BlockRight.center);\n\\draw[->] (H3BlockRight.center) -- (H3Block);\n\\draw[-] (H3BlockRight.center) -- (BranEndReturn.center);\n\\bXBranchy[10]{B}{adder1Down}\n\\draw[-] (BranEndReturn.center) -- (adder1Down);\n\n\\bXBranchy[5]{D}{adder2down}\t% beneath adder2\n\\bXBranchy[-5]{adder4}{adder4up}\t\t% beneath adder4\n%\\bXLinkyx{EH1.center}{H2} % -- Connection for branch 1 and H1\n\\draw[-]  (EH1.center) -- (H2left.center);\n\\draw[->] (H2left.center) -- (H2);\n\\draw[->] (Bran2Down.center) -- (H2Block);\n\\draw[-] (Bran2Down.center) -- (Bran2.center);\n\\draw[-,name path=H2 to adder2down] (H2Block) -- (adder2down.center); % used in intersection\n\\draw[->] (adder2down.center) -- (D);\n\\draw[-]  (H2) -- (adder4up.center);\n\\draw[->]  (adder4up.center)   -- (adder4);\n\\draw[->] (adder4) -- (G3Block);\n\n\\node[right = 0.5cm of BranEnd] (end) {$C(s)$};\n\\draw[->] (G3Block) -- (end);\n\n\\draw[-] (H3Block) -- (adder3down.center);\n\\path[name path=line] (adder3down.center) -- (E);\n\\path[name intersections={of=H2 to adder2down and line,by=inter}];\n\\draw[->,connect=(adder3down.center) to (E) over (inter) by 3pt ];\n\n\\bXLinkxy{BranEndReturn}{B}\n\\end{tikzpicture}\n\\end{document}\n% end block control system"}},"/ControlSystems/CSI/Q5BlockDiagram2-2":{"title":"Description","data":{"":"The Laplace transform of a signal  is defined as .In this block diagram,  represents the Laplace transform of the reference input signal, , , and  represent the transfer functions of the systems, and , , and  represent the transfer functions of the feedback paths.The block diagram can be represented mathematically as:\nThe signal flow through the diagram is as follows: The reference input  is fed to the summing junction where it is added to the feedback signal  to produce the error signal. The error signal is then fed through the transfer function  to produce the output signal .The feedback signal is also fed through the transfer function  and then added to the output of . The resulting signal is then fed through the transfer function  and subtracted from the error signal at the summing junction.","keywords#Keywords":"tikz, nodes, arrows, styles, positioning, shapes.","source-code#Source Code":"% standalone diagram for block diagrams\n\\documentclass{standalone}\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\newcommand{\\equal}{=}\n\\usepackage{tikz}\n\\usetikzlibrary{intersections}\n\\usepackage{tkz-euclide}\n% Radius for arc over intersection\n\\def\\radius{1.mm}\n\n\\tikzset{\nconnect/.style args={(#1) to (#2) over (#3) by #4}{\ninsert path={\nlet \\p1=($(#1)-(#3)$), \\n1={veclen(\\x1,\\y1)},\n\\n2={atan2(\\y1,\\x1)}, \\n3={abs(#4)}, \\n4={#4>0 ?180:-180}  in\n(#1) -- ($(#1)!\\n1-\\n3!(#3)$)\narc (\\n2:\\n2+\\n4:\\n3) -- (#2)\n}\n},\n}\n\n\\begin{document}\n\\begin{tikzpicture}\n\\bXInput{A}\t\t\t\t% Input\n\\bXComp{B}{A}\t\t\t% First adder\n\\bXLink[$R(s)$]{A}{B}\t% Input Label\n\\bXBloc[2]{C}{$G_1$}{B}\t% Block G1\n\\bXLink{B}{C}\t\t\t% First added -- G1\n\\bXComp{D}{C}\t\t\t% Second adder\n\\bXComp{E}{D}\t\t\t% Third adder\n\\bXBloc[2]{G2}{$G_2$}{E}\t% Block G2\n\\bXBranchx[5]{G2}{G2Right}\t% Branch for H1, G2\n\\bXBranchy[-5]{G2Right}{invG2H1Left}\t% node before 1 /G2\n\\bXBloc[-1.5]{invG2H1}{$\\frac{H_1}{G_2}$}{invG2H1Left}\t% Block 1/G2\n\\bXBranchx[-3.5]{invG2H1}{invG2H1left}\t% Branch for H1, G2\n\n\\bXBranchx[10]{G2}{Bran2}\t\t% Branch after G2 and for H2\n\\bXBranchy[5]{Bran2}{Bran2Down}\t% beneath branch 2\n\\bXBloc[-4.5]{H2Block}{$H_2$}{Bran2Down}\n\\bXSuma{adder4}{Bran2}\n\\bXLink{C}{D}\n\\bXLink{D}{E}\n\\bXLink{E}{G2}\n\\bXLink{G2}{adder4}\t\t% G2 to adder\n\n\\bXBloc[3]{G3Block}{$G_3$}{adder4} % G3\n\\bXBranchx[4]{G3Block}{BranEnd} % branch before output\n\\bXBranchy[7.5]{BranEnd}{H3BlockRight} % Right H3 Block\n\\bXBranchy[2.5]{H3BlockRight}{BranEndReturn} % Right H3 Block\n\\bXBranchy[7.5]{E}{adder3down} % Below adder3\n\\bXBloc[-7.5]{H3Block}{$H_3$}{H3BlockRight}\t% H3 Block\n\\draw[-] (BranEnd.center) -- (H3BlockRight.center);\n\\draw[->] (H3BlockRight.center) -- (H3Block);\n\\draw[-] (H3BlockRight.center) -- (BranEndReturn.center);\n\\bXBranchy[10]{B}{adder1Down}\n\\draw[-] (BranEndReturn.center) -- (adder1Down);\n\n\\bXBranchy[5]{D}{adder2down}\t% beneath adder2\n\\bXBranchy[-5]{adder4}{adder4up}\t\t% beneath adder4\n%\\bXLinkyx{EH1.center}{H2} % -- Connection for branch 1 and H1\n\\draw[->]  (G2Right.center) -- (invG2H1);\n%\\draw[->] (invG2) -- (H1);\n\\draw[->] (Bran2Down.center) -- (H2Block);\n\\draw[-] (Bran2Down.center) -- (Bran2.center);\n\\draw[-,name path=H2 to adder2down] (H2Block) -- (adder2down.center); % used in intersection\n\\draw[->] (adder2down.center) -- (D);\n\\draw[-]  (invG2H1) -- (adder4up.center);\n\\draw[->]  (adder4up.center)   -- (adder4);\n\\draw[->] (adder4) -- (G3Block);\n\n\\node[right = 0.5cm of BranEnd] (end) {$C(s)$};\n\\draw[->] (G3Block) -- (end);\n\n\\draw[-] (H3Block) -- (adder3down.center);\n\\path[name path=line] (adder3down.center) -- (E);\n\\path[name intersections={of=H2 to adder2down and line,by=inter}];\n\\draw[->,connect=(adder3down.center) to (E) over (inter) by 3pt ];\n\n\\bXLinkxy{BranEndReturn}{B}\n\n\\end{tikzpicture}\n\\end{document}"}},"/ControlSystems/CSI/Q5BlockDiagram2":{"title":"Description","data":{"":"This defines a block diagram using the \"blox\" package in LaTeX. The block diagram represents a control system with multiple components such as adders, blocks, and branches. The system takes an input signal represented by node \"A\" and processes it through various components such as , , , , , and  to produce an output signal represented by node \"end\".The code uses various functions from the \"blox\" package to create the different components of the block diagram. The \"\\bXInput\" function creates an input node, \"\\bXComp\" creates a summing point, and \"\\bXBloc\" creates a block with a transfer function. The \"\\bXLink\" function is used to connect nodes and components with lines, and the \"\\bXBranchx\" and \"\\bXBranchy\" functions create branches in the diagram.Also it defines a custom function called \"connect\" which creates an arc over a line at the intersection of two other lines. This function is used to connect components that are not directly in line with each other.","keywords#Keywords":"tikzpicture, node, draw, rectangle, coordinate, path, fill, red, blue, black, thick, dashed, right, left, above, below.","source-code#Source Code":"% standalone diagram for block diagrams\n\\documentclass{standalone}\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\newcommand{\\equal}{=}\n\\usepackage{tikz}\n\\usetikzlibrary{intersections}\n\\usepackage{tkz-euclide}\n% Radius for arc over intersection\n\\def\\radius{1.mm}\n\n\\tikzset{\nconnect/.style args={(#1) to (#2) over (#3) by #4}{\ninsert path={\nlet \\p1=($(#1)-(#3)$), \\n1={veclen(\\x1,\\y1)},\n\\n2={atan2(\\y1,\\x1)}, \\n3={abs(#4)}, \\n4={#4>0 ?180:-180}  in\n(#1) -- ($(#1)!\\n1-\\n3!(#3)$)\narc (\\n2:\\n2+\\n4:\\n3) -- (#2)\n}\n},\n}\n\n\\begin{document}\n\\begin{tikzpicture}\n\\bXInput{A}\t\t\t\t% Input\n\\bXComp{B}{A}\t\t\t% First adder\n\\bXLink[$R(s)$]{A}{B}\t% Input Label\n\\bXBloc[2]{C}{$G_1$}{B}\t% Block G1\n\\bXLink{B}{C}\t\t\t% First added -- G1\n\\bXComp{D}{C}\t\t\t% Second adder\n\\bXComp{E}{D}\t\t\t% Third adder\n\\bXBloc[2]{G2}{$G_2$}{E}\t% Block G2\n\\bXBranchx[5]{G2}{G2Right}\t% Branch for H1, G2\n\\bXBranchy[-5]{G2Right}{invG2Left}\t% node before 1 /G2\n\\bXBloc[-1.5]{invG2}{$\\frac{1}{G_2}$}{invG2Left}\t% Block 1/G2\n\\bXBloc[1.5]{H1}{$H_1$}{invG2}\t% Block 1/G2\n\\bXBranchx[-3.5]{H1}{H1left}\t% Branch for H1, G2\n\n\\bXBranchx[10]{G2}{Bran2}\t\t% Branch after G2 and for H2\n\\bXBranchy[5]{Bran2}{Bran2Down}\t% beneath branch 2\n\\bXBloc[-4.5]{H2Block}{$H_2$}{Bran2Down}\n\\bXSuma{adder4}{Bran2}\n\\bXLink{C}{D}\n\\bXLink{D}{E}\n\\bXLink{E}{G2}\n\\bXLink{G2}{adder4}\t\t% G2 to adder\n\n\\bXBloc[3]{G3Block}{$G_3$}{adder4} % G3\n\\bXBranchx[4]{G3Block}{BranEnd} % branch before output\n\\bXBranchy[7.5]{BranEnd}{H3BlockRight} % Right H3 Block\n\\bXBranchy[2.5]{H3BlockRight}{BranEndReturn} % Right H3 Block\n\\bXBranchy[7.5]{E}{adder3down} % Below adder3\n\\bXBloc[-7.5]{H3Block}{$H_3$}{H3BlockRight}\t% H3 Block\n\\draw[-] (BranEnd.center) -- (H3BlockRight.center);\n\\draw[->] (H3BlockRight.center) -- (H3Block);\n\\draw[-] (H3BlockRight.center) -- (BranEndReturn.center);\n\\bXBranchy[10]{B}{adder1Down}\n\\draw[-] (BranEndReturn.center) -- (adder1Down);\n\n\\bXBranchy[5]{D}{adder2down}\t% beneath adder2\n\\bXBranchy[-5]{adder4}{adder4up}\t\t% beneath adder4\n%\\bXLinkyx{EH1.center}{H2} % -- Connection for branch 1 and H1\n\\draw[->]  (G2Right.center) -- (invG2);\n\\draw[->] (invG2) -- (H1);\n\\draw[->] (Bran2Down.center) -- (H2Block);\n\\draw[-] (Bran2Down.center) -- (Bran2.center);\n\\draw[-,name path=H2 to adder2down] (H2Block) -- (adder2down.center); % used in intersection\n\\draw[->] (adder2down.center) -- (D);\n\\draw[-]  (H1) -- (adder4up.center);\n\\draw[->]  (adder4up.center)   -- (adder4);\n\\draw[->] (adder4) -- (G3Block);\n\n\\node[right = 0.5cm of BranEnd] (end) {$C(s)$};\n\\draw[->] (G3Block) -- (end);\n\n\\draw[-] (H3Block) -- (adder3down.center);\n\\path[name path=line] (adder3down.center) -- (E);\n\\path[name intersections={of=H2 to adder2down and line,by=inter}];\n\\draw[->,connect=(adder3down.center) to (E) over (inter) by 3pt ];\n\n\\bXLinkxy{BranEndReturn}{B}\n\\end{tikzpicture}\n\\end{document}"}},"/ControlSystems/CSI/Q5BlockDiagram3":{"title":"Description","data":{"":"The code above is a LaTeX document that generates a block diagram using the TikZ package. It defines a series of blocks and components, including input, adders, and feedback loops, and connects them using arrows and lines. The diagram represents a system with multiple blocks labeled as , , , and , and a feedback loop with a block labeled as . The diagram also includes labels and annotations for the various components and connections, such as  for the input and  for the output. The code also defines some custom styles and commands for drawing the blocks and connecting them in a visually pleasing manner.","keywords#Keywords":"standalone, blox, tikz, positioning, equal, intersections, tkz-euclide, connect, let, veclen, atan2, insert path, bXInput, bXComp, bXLink, bXBloc, bXChain, bXBranchx, bXBranchy, draw, node, right, center, path, name, intersections, of.","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\newcommand{\\equal}{=}\n\\usepackage{tikz}\n\\usetikzlibrary{intersections}\n\\usepackage{tkz-euclide}\n% Radius for arc over intersection\n\\def\\radius{1.mm}\n\n\\tikzset{\nconnect/.style args={(#1) to (#2) over (#3) by #4}{\ninsert path={\nlet \\p1=($(#1)-(#3)$), \\n1={veclen(\\x1,\\y1)},\n\\n2={atan2(\\y1,\\x1)}, \\n3={abs(#4)}, \\n4={#4>0 ?180:-180}  in\n(#1) -- ($(#1)!\\n1-\\n3!(#3)$)\narc (\\n2:\\n2+\\n4:\\n3) -- (#2)\n}\n},\n}\n\n\\begin{document}\n\\begin{tikzpicture}\n\\bXInput{A}\t\t\t\t% Input\n\\bXComp{B}{A}\t\t\t% First adder\n\\bXLink[$R(s)$]{A}{B}\t% Input Label\n\\bXBloc[2]{C}{$G_1$}{B}\t% Block G1\n\\bXLink{B}{C}\t\t\t% First added -- G1\n\\bXComp{D}{C}\t\t\t% Second adder\n\\bXChain[4]{D}%\n{G2Feed/$\\frac{G_2}{1+G_2H_2}$,H1G2unity/$1+\\frac{H_1}{G_2}$,G3/$G_3$}\n\\bXLink{C}{D}\n%\\bXLink{E}{G2}\n%\\bXLink{G2}{adder4}\t\t% G2 to adder\n\n%\\bXBloc[3]{G3Block}{$G_3$}{adder4} % G3\n%\\bXBranchy[7.5]{BranEnd}{H3BlockRight} % Right H3 Block\n%\\bXBranchy[2.5]{H3BlockRight}{BranEndReturn} % Right H3 Block\n\n\\bXBranchx[3]{G3}{BranEnd} % branch before output\n\\bXBranchy[5]{BranEnd}{H3BlockRight} %H3BlockRight\n\n\\bXBloc[-7.5]{H3Block}{$H_3$}{H3BlockRight}\t% H3 Block\n\\bXBranchy[2.5]{H3BlockRight}{returnToInputRight}\n\\bXBranchy[7.5]{B}{adder1Down}\n\\draw[-] (BranEnd.center) -- (H3BlockRight.center);\n\\draw[->] (H3BlockRight.center) -- (H3Block);\n\n\n\n\\node[right = 0.5cm of BranEnd] (end) {$C(s)$};\n\\draw[->] (G3) -- (end);\n\n%H3 to second adder\n\\bXLinkxy{H3Block}{D}\n%Output back to input, feedback loop\n\\draw[-] (H3BlockRight.center) -- (returnToInputRight.center);\n\\draw[-] (returnToInputRight.center) -- (adder1Down.center);\n\\draw[->] (adder1Down.center)  -- (B);\n%\\draw[-] (H3Block) -- (adder3down.center);\n%\\path[name path=line] (adder3down.center) -- (E);\n%\\path[name intersections={of=H2 to adder2down and line,by=inter}];\n%\\draw[->,connect=(adder3down.center) to (E) over (inter) by 3pt ];\n\n%\\bXLinkxy{BranEndReturn}{B}\n%\\bXLinkyx{Bran2}{H2Block}\n\\end{tikzpicture}\n\\end{document}"}},"/ControlSystems/CSI/Q5BlockDiagram4":{"title":"Description","data":{"":"standalone, blox, tikz, positioning, equal, intersections, tkz-euclide, connect, let, veclen, atan2, insert path, bXInput, bXComp, bXLink, bXBloc, bXChain, bXBranchx, bXBranchy, draw, node, right, center, path, name, intersections, of.","keywords#Keywords":"documentclass, tikzpicture, draw, node, circle, label, edge, bend left, bend right, left, right, above, below, fill.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{amsmath}  % For math\n\\usepackage{amssymb}  % For more math\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\begin{document}\n\\begin{tikzpicture}\n\\bXInput{A}\n\\bXComp{B}{A}\n\\bXLink[$R(s)$]{A}{B}\n\\bXBloc[2]{C}{$\\cfrac{G_1G_3(G_2+H_1)}{1+G_2H_2+H_3G_3(G_2+H_1)}$}{B}\n\\bXLink[$V_1$]{B}{C}\n\\bXOutput{E}{C}\n\\bXLink[$C(s)$]{C}{E}\n\\bXReturn{C-E}{B}{}\n\\end{tikzpicture}\n\\end{document}"}},"/ControlSystems/CSI/Q5BlockDiagram5":{"title":"Description","data":{"":"The code above is a LaTeX document that uses the \"standalone\" document class to create a diagram using the \"blox\" and \"tikz\" packages. The diagram is a block diagram of a control system with one input, one output, and a single block with a transfer function represented by a complex expression. The \"amsmath\" and \"amssymb\" packages are also used to enable mathematical notation.The diagram consists of four main elements created with the \"blox\" package: an input labeled \"A\" using the \"\\bXInput\" command, an output labeled \"E\" using the \"\\bXOutput\" command, a block labeled \"C\" using the \"\\bXBloc\" command, and two arrows connecting the input and output to the block using the \"\\bXLink\" command. The transfer function of the block is given as a complex expression using LaTeX notation in the second argument of the \"\\bXBloc\" command.","keywords#Keywords":"standalone, amsmath, amssymb, blox, tikz, tikzpicture, bXInput, bXBloc, cfrac, bXOutput, bXLink.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{amsmath}  % For math\n\\usepackage{amssymb}  % For more math\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\begin{document}\n\\begin{tikzpicture}\n\\bXInput{A}\n\\bXBloc[4]{C}{$\\cfrac{G_1G_2G_3+G_1G_3H_1}{1+G_2H_2+H_3G_2G_3+H_1H_2G_3+G_1G_2G_3+G_1G_3H_1}$}{A}\n\\bXOutput[4]{E}{C}\n\\bXLink[$R(s) \\quad $]{A}{C}\n\\bXLink[$\\quad C(s)$]{C}{E}\n\\end{tikzpicture}\n\n\\end{document}"}},"/ControlSystems/CSI/Q5BlockDiagram6":{"title":"Description","data":{"":"The code above is a LaTeX code for creating a block diagram using the blox and tikz packages. The block diagram represents a control system with a single input, , and a single output, . The system is represented by a single block labeled C, with transfer function , and with input connected to the input A and output connected to the output E. There are also labels for the input and output signals, with $R(s) \\quad $ representing the input signal and $\\quad C(s)$ representing the output signal. The packages amsmath and amssymb are included for typesetting math equations. The standalone document class is used to create a standalone image of the block diagram.","keywords#Keywords":"tikzpicture, bXInput, bXBloc, bXOutput, bXLink, s, G_3, G_2, H_1, H_2, H_3, R(s), C(s)","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{amsmath}  % For math\n\\usepackage{amssymb}  % For more math\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\begin{document}\n\\begin{tikzpicture}\n\\bXInput{A}\n\\bXBloc[4]{C}{$\\cfrac{G_3(G_2+H_1)}{1+G_2H_2+H_3G_3(G_2+H_1)}$}{A}\n\\bXOutput[4]{E}{C}\n\\bXLink[$R(s) \\quad $]{A}{C}\n\\bXLink[$\\quad C(s)$]{C}{E}\n\\end{tikzpicture}\n\\end{document}"}},"/ControlSystems/CSI/Q5Diagram620":{"title":"Description","data":{"":"The code above generates a block diagram using the blox and tikz packages. The diagram consists of a feedback control system. It has one input labeled \"A\" and one output labeled \"E\". The signal \"A\" is connected to a block labeled \"B\" via a line without any text. Block \"B\" is a summing junction, represented by the command \\bXComp, which adds the input signal to a feedback signal that is not shown. Block \"B\" is connected to a block labeled \"C\" with the transfer function , represented by the command \\bXBloc[2]{C}{$G_c(s)$}{B}. Block \"C\" is connected to a block labeled \"D\" with a transfer function of , represented by the command \\bXBloc[2]{D}{$\\cfrac{820}{s(s+10)(s+20)}$}{C}. Block \"D\" is connected to the output block \"E\" via a line labeled with $C(s)$, represented by the command \\bXLink{D}{E}. Finally, there is a return line, represented by the command \\bXReturn{D-E}{B}{}, that connects the output of block \"D\" to the summing junction \"B\".","keywords#Keywords":"TikZ, blox, control system, feedback, transfer function.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{amsmath}  % For math\n\\usepackage{amssymb}  % For more math\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\begin{document}\n\\begin{tikzpicture}\n\\bXInput{A}\n\\bXComp{B}{A}\n%\\bXLink[$R(s)$]{A}{B}\n\\bXLink{A}{B}\n\\bXBloc[2]{C}{$G_c(s)$}{B}\n%\\bXLink[$V_1$]{B}{C}\n\\bXLink{B}{C}\n\\bXBloc[2]{D}{$\\cfrac{820}{s(s+10)(s+20)}$}{C}\n\\bXLink{C}{D}\n\\bXOutput[4]{E}{D}\n%\\bXLink[$C(s)$]{D}{E}\n\\bXLink{D}{E}\n\\bXReturn{D-E}{B}{}\n%\\node (Gc) at (3.25,-0.95) {$G_c(s)$};\n%\\node (Gs) at (5.375,-0.95) {$G(s)$};\n\\end{tikzpicture}\n\n\\end{document}"}},"/ControlSystems/CSI/Q6BLockDiagram2":{"title":"Description","data":{"":"The code above generates a block diagram using the TikZ package. The diagram consists of several blocks and links that represent a control system. The system has an input labeled as , which is connected to a summing junction represented by the block labeled as \"B\". The output of the summing junction is then fed into a feedback loop through a series of blocks and links that represent a complex transfer function. The blocks included in the feedback loop are labeled as \"Gc\", \"\", and \"G3\". The output of the feedback loop is labeled as  and connected to an output block labeled as \"E\". Finally, there is a branch from the \"G3\" block to a block labeled as \"H2\", which is then connected back to the summing junction \"B\" to complete the feedback loop.","keywords#Keywords":"blox, tikz, positioning, bXInput, bXComp, bXLink, bXChain, bXOutput, bXBranchy, bXBlocr, bXLinkyx, bXLinkxy.","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\newcommand{\\equal}{=}\n\\usepackage{tikz}\n\n\n\n\\begin{document}\n\n\\begin{tikzpicture}\n\\bXInput{A}\n\\bXComp{B}{A}\n\\bXLink[$R(s)$]{A}{B}\n\\bXChain[2]{B}%\n{Gc/$\\frac{G_c}{1+G_2H_2}$,G1G2Feed/$\\frac{G_1G_2}{1+G_1G_2H_1}$,G3/$G_3$}\n\\bXOutput[4]{E}{G3}\n\\bXLink[$C(s)$]{G3}{E}\n\\bXBranchy[5]{G3}{returnDown}\n\n% return loop\n\\bXBlocr[5]{H2}{$H_2$}{returnDown}\\bXLinkyx{G3-E}{H2}\n\\bXLinkxy{H2}{B}\n\n%\\bXReturn{G3-E}{B}{}\n\\end{tikzpicture}\n\n\\end{document}"}},"/ControlSystems/CSI/Q6BLockDiagram3Fin":{"title":"Description","data":{"":"The code above is a LaTeX document that creates a block diagram using the blox and tikz packages. The diagram consists of a feedback control system with an input labeled \"R(s)\" and an output labeled \"C(s).\" The input is connected to a block labeled \"C\" which has a transfer function of  and is then connected to the output. The labels for the input and output are aligned with the corresponding arrows using the \\bXLink command. The \\cfrac command is used to display a fraction with larger numerator and denominator. The amsmath and amssymb packages are used for math symbols and formatting.","keywords#Keywords":"amsmath, amssymb, blox, tikz, block diagram, control system, feedback control, transfer function","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{amsmath}  % For math\n\\usepackage{amssymb}  % For more math\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\begin{document}\n\\begin{tikzpicture}\n\\bXInput{A}\n\\bXBloc[4]{C}{$\\cfrac{G_cG_3G_1G_2}{1+G_1G_2H_1+G_cG_3G_1G_2}$}{A}\n\\bXOutput[4]{E}{C}\n\\bXLink[$R(s) \\quad $]{A}{C}\n\\bXLink[$\\quad C(s)$]{C}{E}\n\\end{tikzpicture}\n\n\\end{document}"}},"/ControlSystems/CSI/Q6BlockDiagram":{"title":"Description","data":{"":"The code above is a LaTeX document that creates a block diagram using the blox and tikz packages. The diagram consists of several blocks and links that represent a control system with feedback. The blocks represent various transfer functions (Gc, G1, G2, G3, H1, and H2), while the links represent signals or variables (R(s), D(s), C(s), and the output). The code also includes various tikz styles and libraries for drawing the diagram elements, such as the connect style for drawing curved links over a block, and the tkz-euclide library for drawing geometric elements such as angles and circles.","keywords#Keywords":"documentclass, standalone, blox, tikz, positioning, newcommand, equal, intersections, tkz-euclide, tikzset, connect, insert path, let, veclen, atan2, abs, in, arc, bXInput, input, bXComp, adder1, bXLink, R(s), bXBloc, Gc, adder2, G1, bXSuma, adder3, G2, bXBranchy, adder3up3, D(s), bXBranchx, G2Right15, G3, G3Right15, G2Right15Down3, H1, outputDown10, H2, bXOutput, end, draw, arrow, dash.","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\newcommand{\\equal}{=}\n\\usepackage{tikz}\n\\usetikzlibrary{intersections}\n\\usepackage{tkz-euclide}\n% Radius for arc over intersection\n\\def\\radius{1.mm}\n\n\\tikzset{\nconnect/.style args={(#1) to (#2) over (#3) by #4}{\ninsert path={\nlet \\p1=($(#1)-(#3)$), \\n1={veclen(\\x1,\\y1)},\n\\n2={atan2(\\y1,\\x1)}, \\n3={abs(#4)}, \\n4={#4>0 ?180:-180}  in\n(#1) -- ($(#1)!\\n1-\\n3!(#3)$)\narc (\\n2:\\n2+\\n4:\\n3) -- (#2)\n}\n},\n}\n\n\\begin{document}\n\\begin{tikzpicture}\n\\bXInput{input}\t\t\t\t% Input\n\\bXComp{adder1}{input}\t\t\t% First adder\n\\bXLink[$R(s)$]{input}{adder1}\t% Input Label\n\\bXBloc[1.5]{Gc}{$G_c$}{adder1}\t\t\t%BLock Gc\n\\bXComp{adder2}{Gc}\t\t% second adder\n\\bXBloc[1.5]{G1}{$G_1$}{adder2}\t% G1 Block\n\\bXSuma{adder3}{G1}\t\t\t% third adder --suma variant\n\\bXBloc[1.5]{G2}{$G_2$}{adder3}\t% G2 Block\n\\bXBranchy[-4.5]{adder3}{adder3up3} % adder3 up 3 units\n\\bXLink[$D(s)$]{adder3up3}{adder3}\n\n\\bXBranchx[3]{G2}{G2Right15}\t\t% Right of G2 1.5 units\n\\bXBloc[1.5]{G3}{$G_3$}{G2Right15}\t\t% G3 Block\n\\bXBranchx[3.5]{G3}{G3Right15}\t\t% Right of G3 1.5 units\n\\bXBranchy[4.5]{G2Right15}{G2Right15Down3}\t% Right from G2 1.5 units right and 3 units down\n\\bXBloc[-9]{H1}{$H_1$}{G2Right15Down3}\t% H1 Block\n\\bXBranchy[10]{G3Right15}{outputDown10}\n\n\\bXBloc[-15.5]{H2}{$H_2$}{outputDown10}\n\\bXOutput[3]{end}{G3Right15}\n\n%%Drawing most of the connecters here\n\\draw[->] (adder1) -- (Gc);\n\\draw[->] (Gc) -- (adder2);\n\\draw[->] (adder2) -- (G1);\n\\draw[->] (G1)  -- (adder3);\n\\draw[->] (adder3) -- (G2);\n\\draw[-] (G3) -- (end);\n\\draw[-] (G2Right15.center) -- (G2Right15Down3.center);\n\\draw[-] (G3Right15.center) -- (outputDown10.center);\n\\draw[->] (outputDown10.center) -- (H2);\n\\draw[->] (G2) -- (G3); % Connect G2 and G3\n\\draw[->] (G2Right15Down3.center)  -- (H1);\n\n\\bXLinkxy{H2}{adder1}\n\\bXLink[$C(s)$]{G3Right15}{end}\t% Output Label\n\\bXLinkxy{H1}{adder2}\n\\end{tikzpicture}\n\\end{document}"}},"/ControlSystems/CSI/Q6BlockDiagram4":{"title":"Description","data":{"":"The LaTeX code above defines a standalone document with a TikZ picture containing a block diagram. The diagram represents a control system with multiple components, including several blocks (Gc, G1, G2, G3, H1, and H2) and several adders that sum the inputs from different blocks. The diagram also includes several branches and connections between the different components. The code uses the blox and tkz-euclide packages to draw the blocks and geometric figures, and it defines custom styles for the connections between blocks. The diagram represents a complex system with multiple inputs and outputs, and it can be customized and extended by changing the values and parameters of the different components.","keywords#Keywords":"standalone, blox, tikz, positioning, intersections, tkz-euclide, Input, Bloc, Comp, Sum, Branch, Link, Output, connect, equal.","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\newcommand{\\equal}{=}\n\\usepackage{tikz}\n\\usetikzlibrary{intersections}\n\\usepackage{tkz-euclide}\n% Radius for arc over intersection\n\\def\\radius{1.mm}\n\n\\tikzset{\nconnect/.style args={(#1) to (#2) over (#3) by #4}{\ninsert path={\nlet \\p1=($(#1)-(#3)$), \\n1={veclen(\\x1,\\y1)},\n\\n2={atan2(\\y1,\\x1)}, \\n3={abs(#4)}, \\n4={#4>0 ?180:-180}  in\n(#1) -- ($(#1)!\\n1-\\n3!(#3)$)\narc (\\n2:\\n2+\\n4:\\n3) -- (#2)\n}\n},\n}\n\n\\begin{document}\n\\begin{tikzpicture}\n\\bXInput{input}\t\t\t\t% Input\n%\\bXBranchx[0]{input}{GcLeft}\n%\\bXComp{adder1}{input}\t\t\t% First adder\n%\\bXLink[$R(s)$]{input}{adder1}\t% Input Label\n\\bXBloc[1.5]{Gc}{$G_c$}{input}\t\t\t%BLock Gc\n\\bXSumb{adder2}{Gc}\t\t% second adder\n\\bXBloc[1.5]{G1}{$G_1$}{adder2}\t% G1 Block\n\\bXCompSum{adder3}{G1}{+}{}{-}{}\t\t% third adder --suma variant\n\\bXBloc[1.5]{G2}{$G_2$}{adder3}\t% G2 Block\n\\bXBranchy[-4.5]{adder3}{adder3up3} % adder3 up 3 units\n\\bXLink[$D(s)$]{adder3up3}{adder3}\n\n%\\bXBranchx[3]{G2}{G2Right15}\t\t% Right of G2 1.5 units\n\\bXBloc[1.5]{G3}{$G_3$}{G2}\t\t% G3 Block\n\\bXBranchx[3.5]{G3}{G3Right15}\t\t% Right of G3 1.5 units\n\\bXBranchy[4.5]{G3Right15}{invG3Right}\t% Right from G2 1.5 units right and 3 units down\n\\bXBloc[-9]{invG3}{$\\frac{1}{G_3}$}{invG3Right}\t% H1 Block\n\\bXBloc[-9]{H1}{$H_1$}{invG3}\t% H1 Block\n\\bXBranchy[10]{G3Right15}{outputDown10}\n\n\\bXBloc[-15.5]{H2}{$H_2$}{outputDown10}\n\\bXOutput[3]{end}{G3Right15}\n\n\\draw[->] (Gc) -- (adder2);\n\\draw[->] (adder2) -- (G1);\n\\draw[->] (G1)  -- (adder3);\n\\draw[->] (adder3) -- (G2);\n\\draw[-] (G3) -- (end);\n%\\draw[-] (G2Right15.center) -- (G2Right15Down3.center);\n\\draw[-] (G3Right15.center) -- (outputDown10.center);\n\\draw[->] (outputDown10.center) -- (H2);\n\\draw[->] (G2) -- (G3); % Connect G2 and G3\n\\draw[->] (invG3Right.center) -- (invG3);\n\\draw[->] (invG3) -- (H1);\n\\bXLinkxy{H2}{Gc}\n\\bXLink[$C(s)$]{G3Right15}{end}\t% Output Label\n\\bXLinkxy{H1}{adder2}\n\\end{tikzpicture}\n\\end{document}"}},"/ControlSystems/CSI/Q6BlockDiagram5":{"title":"Description","data":{"":"The code above is a LaTeX document that defines a TikZ picture environment that generates a block diagram. The diagram consists of several blocks connected by lines and arrows, representing a control system with a feedback loop. The document uses the following packages: blox for creating block diagrams, tikz for drawing the diagram, and amsmath for mathematical symbols.Within the tikzpicture environment, the blocks are created using the \\bXInput, \\bXComp, \\bXBlocr, and \\bXOutput commands from the blox package. The blocks are connected using \\bXLink and \\bXLinkxy commands, and a feedback loop is created using the \\bXReturn command (which is commented out in the code).The diagram consists of the following blocks, in order from left to right:\nInput block labeled \"A\"\nG2G3 block with transfer function\nOutput block labeled \"E\"\nGcBlock block with transfer function\nG1 block with transfer function\nComparison block labeled \"B\"\n\nThe diagram also includes two branches: one from the output block to a point labeled \"returnDown\", and one from the GcBlock to the G1 block.","keywords#Keywords":"standalone, blox, tikz, amsmath, positioning.","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\usepackage{amsmath}  % For math\n\\usetikzlibrary{positioning}\n\\newcommand{\\equal}{=}\n\\usepackage{tikz}\n\n\n\n\\begin{document}\n\n\\begin{tikzpicture}\n\\bXInput{A}\n\\bXComp{B}{A}\n\\bXLink[$D(s)$]{A}{B}\n\\bXChain[5]{B}%\n{G2G3/$G_2G_3$}\n\\bXOutput[7.5]{E}{G2G3}\n\\bXLink[$C(s)$]{G2G3}{E}\n\\bXBranchy[5]{E}{returnDown}\n\n% return loop\n\\bXBlocr[3]{GcBlock}{$G_cH_2+\\frac{H_1}{G_3}$}{returnDown}\n\\bXBlocr[3]{G1}{$G_1$}{GcBlock}\n\\bXLink{GcBlock}{G1}\n\\bXLinkxy{G1}{B}\n\\bXLinkxy{E}{GcBlock}\n%\\bXReturn{G3-E}{B}{}\n\\end{tikzpicture}\n\n\\end{document}"}},"/ControlSystems/CSI/Q6BlockDiagram6fin":{"title":"Description","data":{"":"The code above produces a block diagram in LaTeX using the blox and tikz packages. The block diagram consists of three blocks: an input block labeled \"A\", a transfer function block labeled \"C\" with the transfer function , and an output block labeled \"E\". There are also two arrows with labels connecting the input block to the transfer function block and the transfer function block to the output block. The first arrow is labeled with \"\", and the second arrow is labeled with \"\".","keywords#Keywords":"amsmath, amssymb, blox, tikz, tikzpicture, bXInput, bXBloc, bXOutput, bXLink.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{amsmath}  % For math\n\\usepackage{amssymb}  % For more math\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\begin{document}\n\\begin{tikzpicture}\n\\bXInput{A}\n\\bXBloc[4]{C}{$\\cfrac{G_2G_3}{1+G_1G_2G_3G_cH_2+G_1G_2H_1}$}{A}\n\\bXOutput[4]{E}{C}\n\\bXLink[$R(s) \\quad $]{A}{C}\n\\bXLink[$\\quad C(s)$]{C}{E}\n\\end{tikzpicture}\n\n\\end{document}"}},"/ControlSystems/CSI/conSys":{"title":"Description","data":{"":"The code above is a LaTeX document that defines a block diagram using the TikZ package. The block diagram consists of a feedback control system with four main components: an input, a controller, a system, and an output. The controller and system blocks are connected by an arrow representing the control signal, and the system block is connected to the output block by an arrow representing the system's output. The input is connected to a summing junction, which is then connected to the controller block by an arrow representing the error signal. The output block is also connected to a measurements block, which is connected back to the summing junction by an arrow representing the negative feedback loop. The document defines various styles for the blocks and arrows, including the size, shape, and color of the blocks and the type of arrowhead used for the arrows.","keywords#Keywords":"documentclass, standalone, tikz, shapes, arrows, block, sum, input, output, pinstyle, auto, node distance, >=latex, input, name, sum, right of, block, pin, node distance, system, output, below of, measurements, draw.","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{tikz}\n\\usetikzlibrary{shapes,arrows}\n\\begin{document}\n\n\n\\tikzstyle{block} = [draw, fill=blue!20, rectangle,\nminimum height=3em, minimum width=6em]\n\\tikzstyle{sum} = [draw, fill=blue!20, circle, node distance=1cm]\n\\tikzstyle{input} = [coordinate]\n\\tikzstyle{output} = [coordinate]\n\\tikzstyle{pinstyle} = [pin edge={to-,thin,black}]\n\n% The block diagram code is probably more verbose than necessary\n\\begin{tikzpicture}[auto, node distance=2cm,>=latex']\n% We start by placing the blocks\n\\node [input, name=input] {};\n\\node [sum, right of=input] (sum) {};\n\\node [block, right of=sum] (controller) {Controller};\n\\node [block, right of=controller, pin={[pinstyle]above:Disturbances},\nnode distance=3cm] (system) {System};\n% We draw an edge between the controller and system block to\n% calculate the coordinate u. We need it to place the measurement block.\n\\draw [->] (controller) -- node[name=u] {$u$} (system);\n\\node [output, right of=system] (output) {};\n\\node [block, below of=u] (measurements) {Measurements};\n\n% Once the nodes are placed, connecting them is easy.\n\\draw [draw,->] (input) -- node {$r$} (sum);\n\\draw [->] (sum) -- node {$e$} (controller);\n\\draw [->] (system) -- node [name=y] {$y$}(output);\n\\draw [->] (y) |- (measurements);\n\\draw [->] (measurements) -| node[pos=0.99] {$-$}\nnode [near end] {$y_m$} (sum);\n\\end{tikzpicture}\n\n\\end{document}"}},"/ControlSystems/CSI/ex1":{"title":"Description","data":{"":"The code above is a TikZ code for drawing a PID control system block diagram. The diagram consists of several blocks and arrows representing the flow of signals in the system.The blocks in the diagram are defined using TikZ styles, which specify their appearance and properties. These include a block style for rectangular blocks, a sum style for circular summing junctions, an input style for input signals, an output style for output signals, and pinstyle for adding labels to the arrows.The main components of the diagram include an input node representing the input signal, a summing junction node for calculating the error signal, a controller block for implementing the PID control algorithm, a rate block for the derivative action, an extra block that is used to add a feedforward term, a system block representing the process or plant being controlled, and an output node representing the output signal.The arrows connecting the blocks represent the flow of signals between the various components of the system. For example, there is an arrow connecting the input node to the summing junction node to represent the input signal, and there is an arrow connecting the output node to the system block to represent the output signal.Overall, the code generates a professional-looking block diagram that can be used for educational or presentation purposes in the field of control engineering.","keywords#Keywords":"tikz, shapes, arrows, positioning, calc, block, tmp, sum, input, output, pinstyle.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes,arrows,positioning,calc}\n\n\\begin{document}\n\n\\tikzset{\nblock/.style = {draw, fill=white, rectangle, minimum height=3em, minimum width=3em},\ntmp/.style  = {coordinate},\nsum/.style= {draw, fill=white, circle, node distance=1cm},\ninput/.style = {coordinate},\noutput/.style= {coordinate},\npinstyle/.style = {pin edge={to-,thin,black}\n}\n}\n\n\n\n%\\begin{figure}[!htb]\n%\\centering\n\\begin{tikzpicture}[auto, node distance=2cm,>=latex']\n\\node [input, name=rinput] (rinput) {};\n\\node [sum, right of=rinput] (sum1) {};\n\\node [block, right of=sum1] (controller) {$k_{p\\beta}$};\n\\node [block, above of=controller,node distance=1.3cm] (up){$\\frac{k_{i\\beta}}{s}$};\n\\node [block, below of=controller,node distance=1.3cm] (rate) {$sk_{d\\beta}$};\n\\node [sum, right of=controller,node distance=2cm] (sum2) {};\n\\node [block, above = 2cm of sum2](extra){$\\frac{1}{\\alpha_{\\beta2}}$};  %\n\\node [block, right of=sum2,node distance=2cm] (system)\n{$\\frac{a_{\\beta 2}}{s+a_{\\beta 1}}$};\n\\node [output, right of=system, node distance=2cm] (output) {};\n\\node [tmp, below of=controller] (tmp1){$H(s)$};\n\\draw [->] (rinput) -- node{$R(s)$} (sum1);\n\\draw [->] (sum1) --node[name=z,anchor=north]{$E(s)$} (controller);\n\\draw [->] (controller) -- (sum2);\n\\draw [->] (sum2) -- node{$U(s)$} (system);\n\\draw [->] (system) -- node [name=y] {$Y(s)$}(output);\n\\draw [->] (z) |- (rate);\n\\draw [->] (rate) -| (sum2);\n\\draw [->] (z) |- (up);\n\\draw [->] (up) -| (sum2);\n\\draw [->] (y) |- (tmp1)-| node[pos=0.99] {$-$} (sum1);\n\\draw [->] (extra)--(sum2);\n\\draw [->] ($(0,1.5cm)+(extra)$)node[above]{$d_{\\beta 2}$} -- (extra);\n\\end{tikzpicture}\n%\\caption{A PID Control System} \\label{fig6_10}\n%\\end{figure}\n\n\\end{document}"}},"/ControlSystems/CSI":{"title":"Index","data":{"":"Control SystemsMost of the content for this section was generated from my ELEC-360 class in university, the corresponding diagrams is likely work ELEC-360and block diagrams are likely duplicated from modern control systems from ogata."}},"/ControlSystems/CSI/polesZeroes":{"title":"Description","data":{"":"The code above is a LaTeX document that generates a standalone TikZ picture. The TikZ package is used to draw a plot with axes representing the real part of a complex number () and the imaginary part of a complex number () in the complex plane.The code draws the axes and marks the origin with a cross-out circle. It also draws dashed lines representing the angle  from the positive  axis, and another dashed line representing the angle  from the positive  axis. The code also marks several points on the plot, including a point at (0,0), a point at , a point at , and a point at -4,0).Overall, the code is generating a visual representation of a complex number system and illustrating the locations of certain points and angles within that system.","keywords#Keywords":"tikz, shapes.misc, draw, node, dashed, solid, cross out, fill, black, -latex, -stealth.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\begin{document}\n\\begin{tikzpicture}\n% Axes:\n\\draw [-latex] (-5,0) -- (2.5,0) node [above left]  {$\\sigma$};\n\\draw [-latex] (0,-1) -- (0,4) node [below right] {$j\\omega_d$};\n\\node[cross out,draw=black] at (0,0) {};\n\n\\draw[dashed] (0,0) -- (125:3.5) node[solid, cross out,draw=black] {};\n\\draw[black, -stealth] (1.75,0) node[pos=0.1,above right] {$\\theta=120^o$} arc (0:125:1.75);\n\n\\draw[dashed]  (-2,0) node[below left] {$-2$} -- (-2,2.867);\n\\draw[dashed]  (0,2.867) node[below left] {$j2\\sqrt{(3)}$} -- (-2,2.867);\n\\draw[dashed]  (125:3.5) -- (-4,0) node[solid, cross out,draw=black] {};\n\\draw (-4,0) node [below left] {-4};\n\\draw[black, -stealth] (-2,2)  arc (0:-180:0.3);\n\\draw (-3,2.25)node[] {$\\theta=30^o$};\n\\end{tikzpicture}\n\\end{document}"}},"/ControlSystems/CSI/timeline":{"title":"Description","data":{"":"The code above is a LaTeX document that defines an environment called \"vtimeline\" that can be used to create vertical timelines using TikZ. The environment takes one optional argument that can be used to customize the appearance of the timeline, such as its color, whether to add a bottom line, and the offset between the timeline and its text.The \"vtimeline\" environment uses a TikZ matrix to create the timeline, with each row representing a milestone on the timeline. The milestones are separated by a symbol \"&\" to mark the end of a cell in the matrix. The timeline is drawn as a series of circles with a line connecting them. The first and last circles are filled with the timeline color and the others are empty.The timeline can also have a title at the top and a bottom line, which can be enabled or disabled with the \"use timeline header\" and \"add bottom line\" keys, respectively.The document also includes some additional packages such as \"charter\" and \"environ\" for styling and defining the \"vtimeline\" environment, respectively.","keywords#Keywords":"standalone, fontenc, inputenc, charter, environ, tikz, calc, matrix, catcode, pgfmatrixnextcell, vtimeline, cyan, blue, timeline color st, circle, vtimelinetitle, line offset, NewEnviron, document, anchor, node, foreach, yshift, font, large, textsc, textit.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage[T1]{fontenc}\n\\usepackage[utf8]{inputenc}\n\\usepackage{charter}\n\\usepackage{environ}\n\\usepackage{tikz}\n\\usetikzlibrary{calc,matrix}\n\n% code by Andrew:\n% http://tex.stackexchange.com/a/28452/13304\n\\makeatletter\n\\let\\matamp=&\n\\catcode`\\&=13\n\\makeatletter\n\\def&{\\iftikz@is@matrix\n\\pgfmatrixnextcell\n\\else\n\\matamp\n\\fi}\n\\makeatother\n\n\\newcounter{lines}\n\\def\\endlr{\\stepcounter{lines}\\\\}\n\n\\newcounter{vtml}\n\\setcounter{vtml}{0}\n\n\\newif\\ifvtimelinetitle\n\\newif\\ifvtimebottomline\n\\tikzset{description/.style={\ncolumn 2/.append style={#1}\n},\ntimeline color/.store in=\\vtmlcolor,\ntimeline color=red!80!black,\ntimeline color st/.style={fill=\\vtmlcolor,draw=\\vtmlcolor},\nuse timeline header/.is if=vtimelinetitle,\nuse timeline header=false,\nadd bottom line/.is if=vtimebottomline,\nadd bottom line=false,\ntimeline title/.store in=\\vtimelinetitle,\ntimeline title={},\nline offset/.store in=\\lineoffset,\nline offset=4pt,\n}\n\n\\NewEnviron{vtimeline}[1][]{%\n\\setcounter{lines}{1}%\n\\stepcounter{vtml}%\n\\begin{tikzpicture}[column 1/.style={anchor=east},\ncolumn 2/.style={anchor=west},\ntext depth=0pt,text height=1ex,\nrow sep=1ex,\ncolumn sep=1em,\n#1\n]\n\\matrix(vtimeline\\thevtml)[matrix of nodes]{\\BODY};\n\\pgfmathtruncatemacro\\endmtx{\\thelines-1}\n\\path[timeline color st]\n($(vtimeline\\thevtml-1-1.north east)!0.5!(vtimeline\\thevtml-1-2.north west)$)--\n($(vtimeline\\thevtml-\\endmtx-1.south east)!0.5!(vtimeline\\thevtml-\\endmtx-2.south west)$);\n\\foreach \\x in {1,...,\\endmtx}{\n\\node[circle,timeline color st, inner sep=0.15pt, draw=white, thick]\n(vtimeline\\thevtml-c-\\x) at\n($(vtimeline\\thevtml-\\x-1.east)!0.5!(vtimeline\\thevtml-\\x-2.west)$){};\n\\draw[timeline color st](vtimeline\\thevtml-c-\\x.west)--++(-3pt,0);\n}\n\\ifvtimelinetitle%\n\\draw[timeline color st]([yshift=\\lineoffset]vtimeline\\thevtml.north west)--\n([yshift=\\lineoffset]vtimeline\\thevtml.north east);\n\\node[anchor=west,yshift=16pt,font=\\large]\nat (vtimeline\\thevtml-1-1.north west)\n{\\textsc{Timeline \\thevtml}: \\textit{\\vtimelinetitle}};\n\\else%\n\\relax%\n\\fi%\n\\ifvtimebottomline%\n\\draw[timeline color st]([yshift=-\\lineoffset]vtimeline\\thevtml.south west)--\n([yshift=-\\lineoffset]vtimeline\\thevtml.south east);\n\\else%\n\\relax%\n\\fi%\n\\end{tikzpicture}\n}\n\n\\begin{document}\n\n\\begin{vtimeline}[timeline color=cyan!80!blue, add bottom line, line offset=2pt]\nSept 4 2017 & Discussed Making Unity Games and worked on Tutorials \\endlr\nSept 16 2017 & Finish Chapter 1 \\& 2, latex slides \\endlr\nOctober 3 & Completed a few labs \\endlr\n1973 & First mobile handset invented by Martin Cooper\\endlr\n1978 & Parker Bros. Merlin Computer Toy\\endlr\n1981 & Osborne 1 Portable Computer\\endlr\n1982 & Grid Compass 1100 Clamshell Laptop\\endlr\n1983 & TRS-80 Model 100 Portable PC\\endlr\n1984 & Psion Organiser Handheld Computer\\endlr\n1991 & Psion Series 3 Minicomputer\\endlr\n\\end{vtimeline}\n\n\\end{document}"}},"/ControlSystems/CSII/460A3SamplerTesting":{"title":"Description","data":{"":"confirm.","keywords#Keywords":"tikz, pgf, nodes, edges, styles, positioning, arrows, graph.","source-code#Source Code":"% latex diagram produces diagram for the following question\n% Obtain the closed-loop pulse transfer function of the system shown in the figure below.\n% Final Answer:\n%\n% \\begin{align*}\n% & C^\\ast(s) = \\frac{G_2^\\ast(s)G_1^\\ast(s)R^\\ast(s)}{1 +G_2^\\ast(s)+G_1^\\ast(s)\n%  \\left[G_2H(s)\\right]^\\ast} \\quad  C(z) =  \\frac{R(z)G_2(z) G_1(z)}{1 +G_2(z)+G_1(z)\n%  \\left[G_2H(z)\\right]} %\\\\\n% \\end{align*}\n\n\\documentclass{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes,arrows,calc}\n\\usetikzlibrary{decorations.text}\n\\tikzset{add/.style n args={4}{\nminimum width=6mm,\npath picture={\n\\draw[black]\n(path picture bounding box.south east) -- (path picture bounding box.north west)\n(path picture bounding box.south west) -- (path picture bounding box.north east);\n\\node at ($(path picture bounding box.south)+(0,0.13)$)     {\\tiny #1};\n\\node at ($(path picture bounding box.west)+(0.13,0)$)      {\\tiny #2};\n\\node at ($(path picture bounding box.north)+(0,-0.13)$)        {\\tiny #3};\n\\node at ($(path picture bounding box.east)+(-0.13,0)$)     {\\tiny #4};\n}\n}\n}\n\\begin{document}\n\n%\\begin{figure}\n%\\centering\n\\tikzstyle{block} = [draw, fill=blue!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{controller} = [draw, fill=red!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{sum} = [draw, fill=blue!20, circle, node distance=1cm]\n\\tikzstyle{input} = [coordinate]\n\\tikzstyle{output} = [coordinate]\n\\tikzstyle{sampleSP} = [coordinate]\n\\tikzstyle{sampleEP} = [coordinate]\n\\tikzstyle{otherPoint} = [coordinate]\n\\begin{tikzpicture}[auto, >=latex']\n% Nodes\n\\node [input] (input) {};\n%\\node [sum, right = 1cm of input] (sum) {};\n\\node[draw,circle,add={--}{+}{}{},right of= input](sum){};\n\\node [sampleSP, right = 1cm of sum] (sumSP) {};\n\\node [sampleEP, right = 1cm of sumSP] (sumEP) {};\n\\node [sampleEP, above = 1cm of sumEP] (sumEPTOP) {};\n\\node [controller, right = 2cm of sumEP] (system) {$G(s)$};\n\\node [otherPoint,right = 1cm of system] (branchPoint) {};\n\\node [otherPoint,below = 1 cm of system] (belowsystem) {}; %{$\\frac{1}{Ts+1}$};\n%\\node [block, right = 1cm of system] (system2) {$\\frac{1}{Ts+1}$};\n\\node [output, right = 2cm of branchPoint] (output) {};\n%\\node [input, below = 0.5cm of system] (m) {};\n\\node [block, right = 0.75 of belowsystem] (systemH) {$H_1(s)$};\n\n% Second Sampler Point\n\\node [sampleSP, left = 1cm of systemH] (sysHSP2) {};\n\\node [sampleEP, left = 1cm of sysHSP2] (sysHEP2) {};\n\\node [sampleEP, above = 1cm of sysHEP2] (sumEPTOP2) {};\n\n% Second block\n\\node [block, left = 1.5cm of sysHEP2] (systemH2) {$H_2(s)$};\n% Arrows\n\\draw [draw,->] (input) -- node {$R$} (sum);\n% Arrows for first sampler\n\\draw [-] (sum) -- node {$E(s)$} (sumSP);\n\\draw [-,thick] (sumEPTOP) -- node {$\\delta_\\tau$} (sumSP);\n\\draw [->] (sumEP) -- node {$E^\\ast(s)$} (system);\n%Arrows for second sampler (bottom)\n\\draw [-]  (sysHSP2)-- node {$M(s)$} (systemH);\n\\draw [-,thick] (sysHSP2) -- node {$\\delta_\\tau$} (sumEPTOP2);\n%\\draw [->] (sumEP) -- node {$M^\\ast(s)$} (systemH);\n% \\draw [->] (system) --  (system2);\n\\draw [-] (system) --  (branchPoint);\n\\draw [->] (branchPoint) -- node (y) {$C(s)$}(output);\n\\draw [-] (y) |- (systemH) {};\n%\\draw [-] (y) |- (m) {} ;\n\\draw [<-] (systemH2) -- node {$M^\\ast(s)$} (sysHEP2);\n\\draw [->] (systemH2) -| (sum); %{$-$}  node [near end] {} (sum);\n%\\draw [->] (m) -| node[pos=0.99] {} node [near end] {} (sum); %{$-$}  node [near end] {} (sum);\n\\end{tikzpicture}\n%\\end{figure}\n\\end{document}"}},"/ControlSystems/CSII/B4-8":{"title":"Description","data":{"":"The code produces a diagram of a digital control system using the TikZ package in LaTeX. The system consists of an input node, a summing node represented by a circle with a plus and minus sign, a digital filter represented by a rectangular block with the transfer function written inside, a branch point, and an output node. The diagram also includes a node labeled \"m\" to represent a measurement point. The arrows connecting the nodes represent the flow of signals through the system. The code also includes annotations and calculations to determine the root loci and stability of the system for different values of gain K.","keywords#Keywords":"pgfplots, addplot, domain, samples, smooth, blue, dashed, red, xlabel, ylabel, legend, legend entries.","source-code#Source Code":"% Latex diagram produces diagram for the following question\n% Consider the digital control system shown below. Plot the root loci as the gain K is varied from $0$ to $\\infty$. Determine the critical value of gain K for stability. The sampling period is 0.1 sec, or $T=0.1$ What value of gain K will yield a damping ration $\\zeta$ of the closed-loop poles equal to 0.5? With gain K set to yield $\\zeta=0.5$, determine the damped natural frequency $\\omega_d$ and the number of samples per cycle of damped sinusoidal oscillation.\n\n% Numerical Answer in latex\n% When $K=0.0646, \\zeta=0.5$ with the pole at $z=0.771+j0.277=|0.8192|e^{j19.7620^\\circ}$.\n% \\begin{align*}\n% z=  & |e^{-T(\\zeta \\omega_n)} |e^{T \\omega_d} = |0.8192|e^{j19.7620^\\circ} \\\\\n% & \\omega_n = \\frac{\\ln(0.8192)}{(-0.1)(0.5)}=3.98854 = 4 \\ \\text{rad/s} \\\\\n% & \\omega_d = \\frac{(19.7629^\\circ)}{0.1} = 3.449 \\quad  \\omega_d = \\omega_n \\sqrt{1-\\zeta^2}=3.988 (0.866025)=3.4537 \\ \\text{rad/s} \\\\\n% & \\text{Number of Samples per Cycle } = \\frac{360^\\circ}{T\\omega_d}=\\frac{360^\\circ}{19.7629^\\circ}=18.22\n% \\end{align*}\n\n\\documentclass[%\n% border=1pt\nborder={-25pt 0pt 0pt 0pt} % left bottom right top\n]{standalone}\n\\usepackage{amsmath}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes,arrows,calc}\n\\usetikzlibrary{decorations.text}\n\\tikzset{add/.style n args={4}{\nminimum width=6mm,\npath picture={\n\\draw[black]\n(path picture bounding box.south east) -- (path picture bounding box.north west)\n(path picture bounding box.south west) -- (path picture bounding box.north east);\n\\node at ($(path picture bounding box.south)+(0,0.13)$)     {\\tiny #1};\n\\node at ($(path picture bounding box.west)+(0.13,0)$)      {\\tiny #2};\n\\node at ($(path picture bounding box.north)+(0,-0.13)$)        {\\tiny #3};\n\\node at ($(path picture bounding box.east)+(-0.13,0)$)     {\\tiny #4};\n}\n}\n}\n\\begin{document}\n\n%\\begin{figure}\n%\\centering\n\\tikzstyle{block} = [draw, fill=blue!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{controller} = [draw, fill=red!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{sum} = [draw, fill=blue!20, circle, node distance=1cm]\n\\tikzstyle{input} = [coordinate]\n\\tikzstyle{output} = [coordinate]\n\\tikzstyle{sampleSP} = [coordinate]\n\\tikzstyle{sampleEP} = [coordinate]\n\\tikzstyle{otherPoint} = [coordinate]\n\\begin{tikzpicture}[auto, >=latex']\n% Nodes\n\\node [input] (input) {};\n%\\node [sum, right = 1cm of input] (sum) {};\n\\node[draw,circle,add={--}{+}{}{},right of= input](sum){};\n%\\node [sampleSP, right = 1cm of sum] (sumSP) {};\n%\\node [sampleEP, right = 1cm of sumSP] (sumEP) {};\n%\\node [sampleEP, above = 1cm of sumEP] (sumEPTOP) {};\n\\node [block, right = 0.5cm of sum] (system) {$\\cfrac{K(z+1)}{(z-1)(z-0.6065)}$}; % node[label=below:$b_1$,draw]{};\n%\\node [below = 0.005 cm of system] (PointHeader) {\\scriptsize{$G(s)$}};\n\\node [otherPoint,right = 0.5cm of system] (branchPoint) {};\n\\node [otherPoint,below = 0.5 cm of system] (belowsystem) {}; %{$\\frac{1}{Ts+1}$};\n%\\node [block, right = 1cm of system] (system2) {$\\frac{1}{Ts+1}$};\n\\node [output, right = 1cm of branchPoint] (output) {};\n\\node [input, below = 0.5cm of system] (m) {};\n%\\node [otherPoint, right = 1.25 of belowsystem] (systemRightDownP) {$H_1(s)$};\n\n% Second Sampler Point\n%\\node [sampleSP, below = 0.5cm of systemRightDownP] (sysHSP2) {};\n%\\node [sampleEP, left = 1cm of sysHSP2] (sysHEP2) {};\n%\\node [sampleEP, above = 1cm of sysHEP2] (sumEPTOP2) {};\n\n% Second block\n%\\node [block, left = 0.75cm of sysHEP2] (systemH2) {$\\cfrac{1-e^{-Ts}}{s}$};\n% Arrows\n\\draw [draw,->] (input) -- node {$R(z)$} (sum);\n% Arrows for first sampler\n%\t\\draw [-] (sum) -- node {$E(s)$} (sumSP);\n%\t\\draw [-,thick] (sumEPTOP) -- node {$\\delta_\\tau$} (sumSP);\n\n%\\draw [->] (sum) -- node {$E(s)$} (system);\n\\draw [->] (sum) -- node {} (system);\n%Arrows for second sampler (bottom)\n%\t\\draw [-]  (sysHSP2)-- node {$M(s)$} (systemH);\n%\\draw [-,thick] (sysHSP2) -- node {$\\delta_\\tau$} (sumEPTOP2);\n%\\draw [->] (sumEP) -- node {$M^\\ast(s)$} (systemH);\n% \\draw [->] (system) --  (system2);\n\\draw [-] (system) --  (branchPoint);\n\\draw [->] (branchPoint) -- node (y) {$C(z)$}(output);\n%\\draw [-] (y) |- (sysHSP2) {};\n\\draw [-] (y) |- (m) {} ;\n%\\draw [<-] (systemH2) -- node {$M^\\ast(s)$} (sysHEP2);\n%\\draw [->] (sysHEP2) -- (systemH2);\n%\\draw [->] (systemH2) -| node [near end] {$B(s)$} (sum) ; %{$-$}  node [near end] {} (sum);\n%\\node [otherPoint, below = 1.25cm of sum] (Text) {$B(s)$};\n\\draw [->] (m) -| node[pos=0.99] {} node [near end] {} (sum); %{$-$}  node [near end] {} (sum);\n\\end{tikzpicture}\n%\\end{figure}\n\\end{document}"}},"/ControlSystems/CSII/B48RLocus":{"title":"Description","data":{"":"The code appears to be generating a plot of root loci for a digital control system as the gain  is varied from  to . The plot shows how the poles and zeros of the system change as the gain is increased. The root locus plot is a useful tool for analyzing and designing feedback control systems.The plot seems to be generated using the Matlab software and exported in the TikZ format, which is used for creating high-quality graphics in LaTeX documents. The plot shows the imaginary and real parts of the poles and zeros of the system as they move along the root locus. The root locus indicates the range of gain values for which the system is stable, and also provides information about the transient and steady-state responses of the system.Overall, the plot provides a useful visual representation of the behavior of the control system, and can be used to analyze the stability and performance of the system.","keywords#Keywords":"tikz, pgf, nodes, shapes, arrows, positioning, styles","source-code#Source Code":"% Plot generated in matlab for the following question\n% question: Consider the digital control system Plot the root loci as the gain K is varied from $0$ to $\\infty$.\n\n\\documentclass{standalone}\n\\usepackage{pgfplots}\n% Manually removed entries to plot a \"better\" root locus in latex, of course using matlab 2 tikz is much better.\n\\pgfplotsset{compat=1.11}\n\\pgfplotstableread{\npr1 \t\t pi1 \t  pr2 \t\tpi2 \t\tk\n1.0000         0    0.6065         0         0\n0.9272         0    0.6672         0    0.0121\n0.9109         0    0.6814         0    0.0142\n0.8887         0    0.7011         0    0.0166\n0.8541         0    0.7329         0    0.0195\n0.7987         0    0.7863         0    0.0215\n0.7925   -0.0000    0.7925    0.0000    0.0215\n0.7925   -0.0062    0.7925    0.0062    0.0216\n0.7918   -0.0482    0.7918    0.0482    0.0228\n0.7899   -0.0967    0.7899    0.0967    0.0268\n0.7876   -0.1326    0.7876    0.1326    0.0313\n0.7849   -0.1649    0.7849    0.1649    0.0367\n0.7817   -0.1961    0.7817    0.1961    0.0430\n0.7780   -0.2272    0.7780    0.2272    0.0504\n0.7737   -0.2588    0.7737    0.2588    0.0591\n0.7686   -0.2915    0.7686    0.2915    0.0693\n0.7627   -0.3255    0.7627    0.3255    0.0812\n0.7557   -0.3613    0.7557    0.3613    0.0951\n0.7475   -0.3989    0.7475    0.3989    0.1114\n0.7380   -0.4387    0.7380    0.4387    0.1306\n0.7267   -0.4810    0.7267    0.4810    0.1530\n0.7136   -0.5259    0.7136    0.5259    0.1793\n0.6982   -0.5737    0.6982    0.5737    0.2101\n0.6802   -0.6245    0.6802    0.6245    0.2462\n0.6590   -0.6787    0.6590    0.6787    0.2885\n0.6342   -0.7364    0.6342    0.7364    0.3380\n0.6052   -0.7977    0.6052    0.7977    0.3961\n0.5712   -0.8628    0.5712    0.8628    0.4641\n0.5313   -0.9317    0.5313    0.9317    0.5439\n0.4846   -1.0045    0.4846    1.0045    0.6373\n0.4299   -1.0810    0.4299    1.0810    0.7468\n0.3657   -1.1610    0.3657    1.1610    0.8751\n0.2906   -1.2440    0.2906    1.2440    1.0254\n0.2025   -1.3293    0.2025    1.3293    1.2015\n0.0993   -1.4158    0.0993    1.4158    1.4079\n-0.0217   -1.5019   -0.0217    1.5019    1.6498\n-0.1634   -1.5853   -0.1634    1.5853    1.9332\n-0.3294   -1.6623   -0.3294    1.6623    2.2653\n-0.5240   -1.7281   -0.5240    1.7281    2.6545\n-0.7520   -1.7752   -0.7520    1.7752    3.1105\n-1.0192   -1.7924   -1.0192    1.7924    3.6449\n-1.3323   -1.7614   -1.3323    1.7614    4.2710\n-1.5157   -1.7167   -1.5157    1.7167    4.6379\n-1.6991   -1.6505   -1.6991    1.6505    5.0047\n-1.9140   -1.5419   -1.9140    1.5419    5.4346\n-2.1290   -1.3923   -2.1290    1.3923    5.8645\n-2.3809   -1.1429   -2.3809    1.1429    6.3682\n-2.5068   -0.9709   -2.5068    0.9709    6.6201\n-2.6327   -0.7398   -2.6327    0.7398    6.8719\n-2.7108   -0.5349   -2.7108    0.5349    7.0281\n-2.7498   -0.3886   -2.7498    0.3886    7.1062\n-2.7889   -0.1135   -2.7889    0.1135    7.1843\n-2.7925   -0.0000   -2.7925    0.0000    7.1915\n-2.6825         0   -2.9097         0    7.1987\n-1.9082         0   -4.5377         0    8.0524\n}\\mytable\n\n\\begin{document}\n\n\\begin{tikzpicture}[\n%This is to provide the start  point cross marker\nstart marker/.pic={\\draw (-#1,-#1) -- (#1,#1) (#1,-#1)--(-#1,#1);}\n]\n\\begin{axis}[no marks,xmax=2,grid=both]% Don't put any markers, limit the visible area from one side ,draw grid\n\\foreach\\x in{1,...,2}{% Iterate over the columns of the table\n\\addplot+[] table[x=pr\\x,y=pi\\x] {\\mytable} % Draw the curves\nnode[draw,circle,inner sep=2pt] at (current plot end) {}%Put the ending marker with size adjusted to 2pt\npic at (current plot begin) {start marker=2pt};%Put the starting marker\n}\n\\end{axis}\n\\end{tikzpicture}\n\\end{document}"}},"/ControlSystems/CSII/IntegralControler":{"title":"Description","data":{"":"This code defines a simple block diagram using the TikZ package in LaTeX. The diagram consists of a summing junction, a proportional controller, a first-order lag, and an output. The block diagram is used to model a control system, where the input R is summed with the output of the proportional controller and then passed through a first-order lag before producing the output C. The code defines the shapes and styles of the blocks and arrows, and then places them in the diagram using the TikZ environment. The arrows represent the flow of signals in the control system, with labels indicating the signals' names. The code also includes mathematical symbols and expressions for the proportional controller and first-order lag.","keywords#Keywords":"Keywords: tikz, math, block, controller, sum, input, output, arrows.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usepackage{amsmath,amssymb}\n\\usepackage{graphicx} % Required for inserting images\n\n\\tikzstyle{block} = [draw, fill=blue!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{controller} = [draw, fill=red!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{sum} = [draw, fill=blue!20, circle, node distance=1cm]\n\\tikzstyle{input} = [coordinate]\n\\tikzstyle{output} = [coordinate]\n\n\n\\begin{document}\n\\begin{tikzpicture}[auto, >=latex']\n% Nodes\n\\node [input] (input) {};\n\\node [sum, right = 1cm of input] (sum) {};\n\\node [controller, right = 1cm of sum] (system) {$\\frac{K}{s}$};\n\\node [block, right = 1cm of system] (system2) {$\\frac{1}{Ts+1}$};\n\\node [output, right = 2cm of system2] (output) {};\n\\node [input, below = 0.5cm of system] (m) {};\n% Arrows\n\\draw [draw,->] (input) -- node {$R$} (sum);\n\\draw [->] (sum) -- node {} (system);\n\\draw [->] (system) --  (system2);\n\\draw [->] (system2) -- node (y) {$C$}(output);\n\\draw [-] (y) |- (m) {} ;\n\\draw [->] (m) -| node[pos=0.99] {$-$}  node [near end] {} (sum);\n\\end{tikzpicture}\n\\end{document}"}},"/ControlSystems/CSII/OgataB6-17":{"title":"Description","data":{"":"The code is a LaTeX document that uses the standalone document class and loads the tikz package to create a block diagram for a control system.The diagram consists of two main parts: an integral controller and a plant. The integral controller includes a summing junction, a delay block, and a gain block. The plant includes two summing junctions, two delay blocks, a constant block, and a gain block. The input signal is fed into the integral controller, which generates a control signal that is fed into the plant. The plant generates an output signal that is the result of the control signal acting on the plant.The diagram is created using TikZ's positioning library to arrange the various blocks and nodes in a visually appealing manner. The code defines several custom styles for the various blocks and junctions, and also defines a custom style for adding text labels to the various points in the diagram. Finally, the code uses TikZ's decorations library to add braces and labels to some of the blocks in the diagram.","keywords#Keywords":"tikz, node, path, draw, rectangle, coordinate, left, right, below, above, arrow, edge, text, fill, black.","source-code#Source Code":"\\documentclass[%\n% border=1pt\nborder={-25pt 0pt 0pt 0pt} % left bottom right top\n]{standalone}\n\\usepackage{tikz}\n\\usepackage{amsmath}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes,arrows,calc}\n\\usetikzlibrary{decorations.text}\n\\usetikzlibrary{decorations.pathreplacing}\n\\tikzset{add/.style n args={4}{\nminimum width=6mm,\npath picture={\n\\draw[black]\n(path picture bounding box.south east) -- (path picture bounding box.north west)\n(path picture bounding box.south west) -- (path picture bounding box.north east);\n\\node at ($(path picture bounding box.south)+(0,0.13)$)     {\\tiny #1};\n\\node at ($(path picture bounding box.west)+(0.13,0)$)      {\\tiny #2};\n\\node at ($(path picture bounding box.north)+(0,-0.13)$)        {\\tiny #3};\n\\node at ($(path picture bounding box.east)+(-0.13,0)$)     {\\tiny #4};\n}\n}\n}\n\\begin{document}\n\n%\\begin{figure}\n%\\centering\n%\\tikzstyle{block} = [draw, fill=blue!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{block} = [draw, rectangle, minimum height=2em, minimum width=0.5em]\n\\tikzstyle{controller} = [draw, fill=red!20, rectangle, minimum height=2em, minimum width=1em]\n\\tikzstyle{sum} = [draw, fill=blue!20, circle, node distance=1cm]\n\\tikzstyle{input} = [coordinate]\n\\tikzstyle{output} = [coordinate]\n\\tikzstyle{sampleSP} = [coordinate]\n\\tikzstyle{sampleEP} = [coordinate]\n\\tikzstyle{otherPoint} = [coordinate]\n\\tikzset{\nposition label/.style={\nbelow = 3pt,\ntext height = 1.5ex,\ntext depth = 1ex\n},\nbrace/.style={\ndecoration={brace, mirror},\ndecorate\n}\n}\n\\begin{tikzpicture}[auto, >=latex']\n\n%% Integral Controller\n% Nodes and Blocks\n\\node [input] (input) {};\n%\\node [sum, right = 1cm of input] (sum) {};\n\\node[draw,circle,add={--}{+}{}{},right of= input](sum){};\n\\node[draw,circle,add={+}{+}{}{},right of= sum](sumint){};\n\\node [block, right = 1cm of sumint,text width=0.75cm,align=center] (delay1) {$z^{-1}$};\n\n% feedback points\n\\node [otherPoint,right = 1.125 cm of delay1] (vkbelow) {}; %{$\\frac{1}{Ts+1}$};\n\\node [otherPoint, below = 1cm of delay1] (m1) {};\n\n% Gain Blocks\n\\node [block, right = 2.25cm of delay1,text width=0.75cm,align=center] (gainK1) {$K_1$};\n\n% Declarations for integral controller\n\\draw[thick,dotted]     ($(sumint.north west)+(-0.25,0.45)$) rectangle ($(gainK1.south east)+(0.25,-1.5)$);\n\\node [below right=1.5cm and -0.85cm of delay1] {\\scriptsize{Integral Controller}}; (text1)\n%\\draw [brace,decoration={raise=2ex}] (sumint.south west) -- node [position label,yshift=-3ex] {$G(s)$} (gainK1.south east);\n\n%% Plant\n\\node [otherPoint, right = 0.25cm of gainK1] (sumP1Space) {};\n% Summers\n\\node [draw,circle,add={--}{+}{}{}, right of= sumP1Space] (sumP1) {};\n\\node [draw,circle,add={+}{+}{}{}, right of= sumP1] (sumP2) {};\n% Blocks\n\\node [block, right = 1cm of sumP2,text width=0.75cm,align=center] (delay2) {$z^{-1}$};\n\\node [block, below = 1cm of delay2,text width=0.75cm,align=center] (constant05) {$0.5$};\n\\node [block, below = 1cm of constant05,text width=0.75cm,align=center] (gainK2) {$K_2$};\n\n%Output Points\n\\node [otherPoint, right = 1cm of delay2] (xk) {};\n\n\\node [otherPoint, right = 1.5cm of xk] (yk) {};\n\\node [output, right of = yk] (output) {};%{$y(k)$};\n\n\\node [output, below = 0.75cm of gainK2] (m2) {};\n\n% Declarations for plant controller\n\\draw[thick,dotted]     ($(sumP1.north west)+(-0.25,0.45)$) rectangle ($(xk.south east)+(0.55,-3.95)$);\n\\node [below left=0.15cm and 0.001cm of gainK2] {\\scriptsize{Plant}}; (text2)\n\n% Arrows for Integral Controller\n\\draw [draw,->] (input) -- node {$r(k)$} (sum);\n\\draw [draw,->] (sum) -- node {} (sumint);\n\\draw [draw,->] (delay1) -- node {$v(k)$} (gainK1);\n\\draw [draw,->] (sumint) -- node {} (delay1);\n\n% Feedback for integral controller\n\\draw [-] (vkbelow) |- (m1) {} ;\n\\draw [-] (m1) -| (sumint) {} ;\n\n\n% Arrows for Plant\n\\draw [draw,->] (gainK1) -- node {} (sumP1);\n\n\\draw [draw,->] (sumP1) -- node[above=0.15] {$u(k)$} (sumP2);\n\\draw [draw,->] (sumP2) -- node {} (delay2);\n\n%Feedback to Summers in Plant\n\\draw [->] (constant05) -| (sumP2) {} ;\n\\draw [->] (gainK2) -| (sumP1) {} ;\n\n% Feedback for plant and finishing up connections\n\\draw [->] (xk) |- (constant05) {} ;\n\\draw [->] (xk) |- (gainK2) {} ;\n\\draw [draw,-] (delay2) -- node {$x_k$} (yk);\n\\draw [draw,->] (yk) -- node {$y_k$} (output);\n\\draw [-] (yk) |- (m2) {} ;\n\\draw [->] (m2) -| (sum) {} ;\n\n\\end{tikzpicture}\n%\\end{figure}\n\\end{document}"}},"/ControlSystems/CSII/StraightLinebasicBlock":{"title":"Description","data":{"":"The code defines a block diagram using the blox package in LaTeX. The tikz package is also used for drawing the diagram. The diagram consists of five rectangular blocks connected in a chain. The first block is labeled E, and it serves as the input to the chain. The subsequent blocks are labeled Md/IF, fred/$ID\\phase{RR}$, head/EXE, Fun/Mem, and Games/WB. The blocks are connected by lines that indicate the flow of data between them. The diagram depicts a simplified pipeline for a computer processor, where each block represents a stage in the pipeline.","keywords#Keywords":"blox, tikz, steinmetz, positioning, circuits","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\usepackage{steinmetz}\n\\usetikzlibrary{positioning}\n\n\\usetikzlibrary{circuits}\n\\begin{document}\n\n\\begin{tikzpicture}\n\\bXInput{E}\n\\bXChain[2]{E}%\n{Md/IF,fred/$ID\\phase{RR}$,head/EXE,Fun/Mem, Games/WB}\n\\end{tikzpicture}\n\\end{document}"}},"/ControlSystems/CSII/block410":{"title":"Description","data":{"":"The code is a LaTeX document that uses the TikZ package to create a block diagram. It defines several styles for different types of nodes in the diagram, such as inputs, outputs, and blocks. It then creates the nodes and connects them with arrows to represent the flow of signals in the system.The diagram itself represents a control system with a digital PI controller, a zero-order hold (ZOH) block, and a plant block. The input to the system is labeled as R, and the output is labeled as C(s). The diagram also includes a feedback loop, with the output of the plant being fed back to the summing node where it is subtracted from the input R.The code uses various TikZ library functions, such as positioning, shapes, arrows, and decorations. It also defines a custom style named \"add\" that creates a small cross symbol with labels on each arm, used to label the summing node in the diagram.","keywords#Keywords":"tikz, graph, directed, edges, nodes, style, arrow, label, position, above, right, left, below, color, blue, red, dashed.","source-code#Source Code":"\\documentclass[\nborder={-25pt 0pt 0pt 0pt} % left bottom right top\n]{standalone}\n\\usepackage{tikz}\n\\usepackage{amsmath}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes,arrows,calc}\n\\usetikzlibrary{decorations.text}\n\\usetikzlibrary{decorations.pathreplacing}\n\\tikzset{add/.style n args={4}{\nminimum width=6mm,\npath picture={\n\\draw[black]\n(path picture bounding box.south east) -- (path picture bounding box.north west)\n(path picture bounding box.south west) -- (path picture bounding box.north east);\n\\node at ($(path picture bounding box.south)+(0,0.13)$)     {\\tiny #1};\n\\node at ($(path picture bounding box.west)+(0.13,0)$)      {\\tiny #2};\n\\node at ($(path picture bounding box.north)+(0,-0.13)$)        {\\tiny #3};\n\\node at ($(path picture bounding box.east)+(-0.13,0)$)     {\\tiny #4};\n}\n}\n}\n\\begin{document}\n\n%\\begin{figure}\n%\\centering\n%\\tikzstyle{block} = [draw, fill=blue!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{block} = [draw, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{controller} = [draw, fill=red!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{sum} = [draw, fill=blue!20, circle, node distance=1cm]\n\\tikzstyle{input} = [coordinate]\n\\tikzstyle{output} = [coordinate]\n\\tikzstyle{sampleSP} = [coordinate]\n\\tikzstyle{sampleEP} = [coordinate]\n\\tikzstyle{otherPoint} = [coordinate]\n\\tikzset{\nposition label/.style={\nbelow = 3pt,\ntext height = 1.5ex,\ntext depth = 1ex\n},\nbrace/.style={\ndecoration={brace, mirror},\ndecorate\n}\n}\n\\begin{tikzpicture}[auto, >=latex']\n% Nodes\n\\node [input] (input) {};\n%\\node [sum, right = 1cm of input] (sum) {};\n\\node[draw,circle,add={--}{+}{}{},right of= input](sum){};\n\\node [sampleSP, right = 1cm of sum] (sumSP) {};\n\\node [sampleEP, right = 1cm of sumSP] (sumEP) {};\n\\node [sampleEP, above = 1cm of sumEP] (sumEPTOP) {};\n\\node [block, right = 1cm of sumEP,text width=1.75cm,align=center] (systemK) {Digital PI Controller};\n\\node [block, right = 1cm of systemK] (systemZOH) {$\\cfrac{1-e^{-s}}{s}$};\n\\node [block, right = 1cm of systemZOH] (system) {$\\cfrac{10}{(s+1)(s+5)}$};\n\\node [otherPoint,right = 1cm of system] (branchPoint) {};\n\\node [otherPoint,below = 1 cm of system] (belowsystem) {}; %{$\\frac{1}{Ts+1}$};\n%\\node [block, right = 1cm of system] (system2) {$\\frac{1}{Ts+1}$};\n\\node [output, right = 1cm of branchPoint] (output) {};\n\\node [input, below = 2cm of system] (m) {};\n\n% Arrows\n\\draw [draw,->] (input) -- node {$R$} (sum);\n% Arrows for first sampler\n\\draw [-] (sum) -- node {$E(s)$} (sumSP);\n\\draw [-,thick] (sumEPTOP) -- node {$\\delta_\\tau$} (sumSP);\n\\draw [->] (sumEP) -- node {$E^\\ast(s)$} (systemK);\n\\draw [->] (systemK) -- node {} (systemZOH);\n\\draw [->] (systemZOH) -- node {} (system);\n%\\draw [->] (sumEP) -- node {$M^\\ast(s)$} (systemH);\n% \\draw [->] (system) --  (system2);\n\\draw [-] (system) --  (branchPoint);\n\\draw [->] (branchPoint) -- node (y) {$C(s)$}(output);\n\n\\draw [-] (y) |- (m) {} ;\n\\draw [->] (m) -| (sum); %{$-$}  node [near end] {} (sum);\n%\\node [below = 0.005 cm of system] (PointHeader) {\\scriptsize{$G(s)$}};\n\\draw[thick,dotted]     ($(systemZOH.north west)+(-0.25,0.15)$) rectangle ($(system.south east)+(0.25,-0.15)$);\n\\draw [brace,decoration={raise=2ex}] (systemZOH.south west) -- node [position label,yshift=-2ex] {$G(s)$} (system.south east);\n\\end{tikzpicture}\n%\\end{figure}\n\\end{document}"}},"/ControlSystems/CSII/block412":{"title":"Description","data":{"":"The code is a LaTeX document that generates a diagram using the TikZ package. The diagram is a block diagram that shows a closed-loop control system with a digital PD controller, a zero-order hold (ZOH), and a second-order transfer function. The diagram includes various nodes and arrows that connect the nodes, which are defined using TikZ styles. The diagram also includes labels for the nodes, which are defined using the TikZ library decorations.text.The diagram starts with an input node, followed by a summing junction represented by a circle with a plus and a minus sign inside it. The output of the summing junction is fed into a sampler, represented by a vertical line with two horizontal lines at its top and bottom. The output of the sampler is fed into the digital PD controller, which is represented by a rectangular block. The output of the digital PD controller is then fed into a ZOH, represented by a rectangular block with a transfer function written inside it.The output of the ZOH is fed into a second-order transfer function represented by a rectangular block with a transfer function written inside it. The output of the second-order transfer function is fed into a branch point, which then splits the signal into two paths. One path leads to the output node, while the other path leads to a feedback loop represented by a line with a small circle at its end. The feedback loop connects to the summing junction and the input node.The diagram also includes various coordinate nodes, represented by empty circles, that help in positioning the other nodes and arrows. The diagram is enclosed in a dotted rectangle, which is defined using TikZ decorations.pathreplacing library.","keywords#Keywords":"rectangle, draw, fill, node, above, right, left, below, inner sep.","source-code#Source Code":"\\documentclass[%\n% border=1pt\nborder={-25pt 0pt 0pt 0pt} % left bottom right top\n]{standalone}\n\\usepackage{tikz}\n\\usepackage{amsmath}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes,arrows,calc}\n\\usetikzlibrary{decorations.text}\n\\usetikzlibrary{decorations.pathreplacing}\n\\tikzset{add/.style n args={4}{\nminimum width=6mm,\npath picture={\n\\draw[black]\n(path picture bounding box.south east) -- (path picture bounding box.north west)\n(path picture bounding box.south west) -- (path picture bounding box.north east);\n\\node at ($(path picture bounding box.south)+(0,0.13)$)     {\\tiny #1};\n\\node at ($(path picture bounding box.west)+(0.13,0)$)      {\\tiny #2};\n\\node at ($(path picture bounding box.north)+(0,-0.13)$)        {\\tiny #3};\n\\node at ($(path picture bounding box.east)+(-0.13,0)$)     {\\tiny #4};\n}\n}\n}\n\\begin{document}\n\n%\\begin{figure}\n%\\centering\n\\tikzstyle{block} = [draw, fill=blue!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{controller} = [draw, fill=red!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{sum} = [draw, fill=blue!20, circle, node distance=1cm]\n\\tikzstyle{input} = [coordinate]\n\\tikzstyle{output} = [coordinate]\n\\tikzstyle{sampleSP} = [coordinate]\n\\tikzstyle{sampleEP} = [coordinate]\n\\tikzstyle{otherPoint} = [coordinate]\n\\tikzset{\nposition label/.style={\nbelow = 3pt,\ntext height = 1.5ex,\ntext depth = 1ex\n},\nbrace/.style={\ndecoration={brace, mirror},\ndecorate\n}\n}\n\\begin{tikzpicture}[auto, >=latex']\n% Nodes\n\\node [input] (input) {};\n%\\node [sum, right = 1cm of input] (sum) {};\n\\node[draw,circle,add={--}{+}{}{},right of= input](sum){};\n\\node [sampleSP, right = 1cm of sum] (sumSP) {};\n\\node [sampleEP, right = 1cm of sumSP] (sumEP) {};\n\\node [sampleEP, above = 1cm of sumEP] (sumEPTOP) {};\n\\node [block, right = 1cm of sumEP,text width=1.75cm,align=center] (systemK) {Digital PD Controller};\n\\node [block, right = 1cm of systemK] (systemZOH) {$\\cfrac{1-e^{-s}}{s}$};\n\\node [controller, right = 1cm of systemZOH] (system) {$\\cfrac{1}{s^2}$};\n\\node [otherPoint,right = 1cm of system] (branchPoint) {};\n\\node [otherPoint,below = 1 cm of system] (belowsystem) {}; %{$\\frac{1}{Ts+1}$};\n%\\node [block, right = 1cm of system] (system2) {$\\frac{1}{Ts+1}$};\n\\node [output, right = 1cm of branchPoint] (output) {};\n\\node [input, below = 2cm of system] (m) {};\n\n% Arrows\n\\draw [draw,->] (input) -- node {$R$} (sum);\n% Arrows for first sampler\n\\draw [-] (sum) -- node {$E(s)$} (sumSP);\n\\draw [-,thick] (sumEPTOP) -- node {$\\delta_\\tau$} (sumSP);\n\\draw [->] (sumEP) -- node {$E^\\ast(s)$} (systemK);\n\\draw [->] (systemK) -- node {} (systemZOH);\n\\draw [->] (systemZOH) -- node {} (system);\n%\\draw [->] (sumEP) -- node {$M^\\ast(s)$} (systemH);\n% \\draw [->] (system) --  (system2);\n\\draw [-] (system) --  (branchPoint);\n\\draw [->] (branchPoint) -- node (y) {$C(s)$}(output);\n\n\\draw [-] (y) |- (m) {} ;\n\\draw [->] (m) -| (sum); %{$-$}  node [near end] {} (sum);\n%\\node [below = 0.005 cm of system] (PointHeader) {\\scriptsize{$G(s)$}};\n\\draw[thick,dotted]     ($(systemZOH.north west)+(-0.25,0.15)$) rectangle ($(system.south east)+(0.25,-0.15)$);\n\\draw [brace,decoration={raise=2ex}] (systemZOH.south west) -- node [position label,yshift=-2ex] {$G(s)$} (system.south east);\n\\end{tikzpicture}\n%\\end{figure}\n\\end{document}"}},"/ControlSystems/CSII/block415":{"title":"Description","data":{"":"The code is a LaTeX document that uses the standalone class to produce a standalone figure. The figure is a block diagram of a control system and is created using the tikz package for drawing graphics in LaTeX.The code starts by defining several styles for the different elements in the block diagram, such as block for rectangular blocks, sum for circles with a plus sign inside, input and output for coordinates representing the input and output of the system, and sampleSP and sampleEP for coordinates representing the start and end of a sample period.The add style is also defined, which is a custom style used to add plus and minus signs to circles. The brace style is defined to add a brace decoration to a path.The actual block diagram is then drawn using a tikzpicture environment. Nodes are created for each element in the diagram, such as the input, summing junction, system blocks, and output. Arrows are then drawn between the nodes to represent the flow of signals in the system.Finally, some formatting options are added, such as labels for the arrows and some whitespace around the diagram. The resulting output is a standalone image of the control system block diagram.","keywords#Keywords":"tikz, nodes, edges, styles, arrow tips, positioning, shapes, colors.","source-code#Source Code":"\\documentclass[%\n% border=1pt\nborder={-25pt 0pt 0pt 0pt} % left bottom right top\n]{standalone}\n\\usepackage{tikz}\n\\usepackage{amsmath}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes,arrows,calc}\n\\usetikzlibrary{decorations.text}\n\\usetikzlibrary{decorations.pathreplacing}\n\\tikzset{add/.style n args={4}{\nminimum width=6mm,\npath picture={\n\\draw[black]\n(path picture bounding box.south east) -- (path picture bounding box.north west)\n(path picture bounding box.south west) -- (path picture bounding box.north east);\n\\node at ($(path picture bounding box.south)+(0,0.13)$)     {\\tiny #1};\n\\node at ($(path picture bounding box.west)+(0.13,0)$)      {\\tiny #2};\n\\node at ($(path picture bounding box.north)+(0,-0.13)$)        {\\tiny #3};\n\\node at ($(path picture bounding box.east)+(-0.13,0)$)     {\\tiny #4};\n}\n}\n}\n\\begin{document}\n\n%\\begin{figure}\n%\\centering\n%\\tikzstyle{block} = [draw, fill=blue!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{block} = [draw, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{controller} = [draw, fill=red!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{sum} = [draw, fill=blue!20, circle, node distance=1cm]\n\\tikzstyle{input} = [coordinate]\n\\tikzstyle{output} = [coordinate]\n\\tikzstyle{sampleSP} = [coordinate]\n\\tikzstyle{sampleEP} = [coordinate]\n\\tikzstyle{otherPoint} = [coordinate]\n\\tikzset{\nposition label/.style={\nbelow = 3pt,\ntext height = 1.5ex,\ntext depth = 1ex\n},\nbrace/.style={\ndecoration={brace, mirror},\ndecorate\n}\n}\n\\begin{tikzpicture}[auto, >=latex']\n% Nodes\n\\node [input] (input) {};\n%\\node [sum, right = 1cm of input] (sum) {};\n\\node[draw,circle,add={--}{+}{}{},right of= input](sum){};\n\\node [sampleSP, right = 1cm of sum] (sumSP) {};\n\\node [sampleEP, right = 1cm of sumSP] (sumEP) {};\n\\node [sampleEP, above = 1cm of sumEP] (sumEPTOP) {};\n\\node [block, right = 1cm of sumEP,text width=1.75cm,align=center] (systemK) {$G_D(z)$};\n\\node [block, right = 1cm of systemK] (systemZOH) {$\\cfrac{1-e^{-s}}{s}$};\n\\node [block, right = 1cm of systemZOH] (system) {$\\cfrac{K}{(s)(s+0.5)}$};\n\\node [otherPoint,right = 1cm of system] (branchPoint) {};\n\\node [otherPoint,below = 1 cm of system] (belowsystem) {}; %{$\\frac{1}{Ts+1}$};\n%\\node [block, right = 1cm of system] (system2) {$\\frac{1}{Ts+1}$};\n\\node [output, right = 1cm of branchPoint] (output) {};\n\\node [input, below = 2cm of system] (m) {};\n\n% Arrows\n\\draw [draw,->] (input) -- node {$R$} (sum);\n% Arrows for first sampler\n%\\draw [-] (sum) -- node {$E(s)$} (sumSP);\n\\draw [-] (sum) -- node {} (sumSP);\n\\draw [-,thick] (sumEPTOP) -- node {$T$} (sumSP);\n%\\draw [->] (sumEP) -- node {$E^\\ast(s)$} (systemK);\n\\draw [->] (sumEP) -- node {} (systemK);\n\n\\draw [->] (systemK) -- node {} (systemZOH);\n\\draw [->] (systemZOH) -- node {} (system);\n%\\draw [->] (sumEP) -- node {$M^\\ast(s)$} (systemH);\n% \\draw [->] (system) --  (system2);\n\\draw [-] (system) --  (branchPoint);\n\\draw [->] (branchPoint) -- node (y) {$C(s)$}(output);\n\n\\draw [-] (y) |- (m) {} ;\n\\draw [->] (m) -| (sum); %{$-$}  node [near end] {} (sum);\n%\\node [below = 0.005 cm of system] (PointHeader) {\\scriptsize{$G(s)$}};\n\\draw[thick,dotted]     ($(systemZOH.north west)+(-0.25,0.15)$) rectangle ($(system.south east)+(0.25,-0.15)$);\n\\draw [brace,decoration={raise=2ex}] (systemZOH.south west) -- node [position label,yshift=-2ex] {$G(s)$} (system.south east);\n\\end{tikzpicture}\n%\\end{figure}\n\\end{document}"}},"/ControlSystems/CSII/digitalController":{"title":"Description","data":{"":"The code is a LaTeX document that generates a block diagram using the TikZ package. The diagram represents a digital control system consisting of an analog-to-digital converter (A/D), a digital controller, a digital-to-analog converter (D/A), and a process block.The diagram contains several predefined styles for the various blocks, including \"block,\" \"controller,\" \"sum,\" \"input,\" and \"output.\" The \"block\" and \"controller\" styles have different fill colors, blue and green respectively, and have a minimum height and width.The diagram is made up of several nodes, including the input and output nodes, as well as nodes for the summing junction, A/D, digital controller, D/A, and process block. The nodes are connected using arrows, with labels indicating the information flow between each block.The diagram also includes a rectangle drawn around the digital controller and D/A nodes using the \"thick,dotted\" style. This is used to group the digital components together as a single entity.Finally, the diagram includes several positioning nodes using the TikZ library, such as \"right\" and \"below,\" to position the nodes and labels in the correct location relative to one another.","keywords#Keywords":"TikZ, nodes, input, output, arrows, controller, sum, block, positioning, shapes, dotted, rectangle.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usepackage{amsmath,amssymb}\n\\usepackage{graphicx} % Required for inserting images\n\\usepackage{booktabs}\n\\usepackage{tabularx}\n\\usepackage{circuitikz}\n\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes,arrows}\n\\tikzstyle{block} = [draw, fill=blue!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{controller} = [draw, fill=green!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{sum} = [draw, fill=blue!20, circle, node distance=1cm]\n\\tikzstyle{input} = [coordinate]\n\\tikzstyle{output} = [coordinate]\n\\begin{document}\n\\begin{tikzpicture}[auto]\n% Nodes\n\\node [input] (input) {};\n\\node [sum, right = 1cm of input] (sum) {};\n\\node [controller, right = 1cm of sum] (con1) {A/D};\n\\node [controller, right = 1cm of con1] (con2) {Control};\n\\node [controller, right = 1cm of con2] (system2) {D/A};\n\\node [block, right = 1cm of system2] (system3) {Process};\n\\node [output, right = 2cm of system3] (output) {};\n\\node [input, below = 0.5cm of con2] (m) {};\n% Arrows\n\\draw [draw,->] (input) -- node {$Z_{real}$} (sum);\n\\draw [->] (sum) -- (con1);\n\\draw [->] (con1) -- (con2);\n\\draw [->] (con2) -- node {$$} (system2);\n\\draw [->] (system2) -- node {$$} (system3);\n\\draw [->] (system3) -- node (y) {$Z$}(output);\n\\draw [-] (y) |- (m) {} ;\n\\draw [->] (m) -| node[pos=0.99] {$-$}  node [near end] {} (sum);\n\\draw[thick,dotted]     ($(con1.north west)+(-0.5,0.15)$) rectangle ($(system2.south east)+(0.5,-0.15)$);\n\\node [above = 0.25cm of con2] {Digital Controller};\n%\\node [above = of near end] {+};\n\\end{tikzpicture}\n\\end{document}"}},"/ControlSystems/CSII/digraphs":{"title":"Description","data":{"":"The code above is a LaTeX document that defines an adigraph (a directed graph) using the \"adigraph\" package. The adigraph is defined using the \\NewAdigraph command, which takes two arguments: the name of the adigraph (\"myAdigraph\" in this case) and a specification of the nodes and edges of the graph.The node and edge specification is written in the following format:\nnodeName: x,y;\nedgeStartNode,edgeEndNode:weight:options;In this particular adigraph, there are six nodes named s, 1, 2, 3, 4, and t, and ten directed edges between them.After defining the adigraph, the code uses the \\myAdigraph command to draw the graph. The argument to this command specifies the order in which the nodes should be visited when drawing the graph, in this case s, 3, 4, 2, t.The overall effect of the code is to generate a diagram of the defined adigraph, with the specified node and edge weights and options, using the \"adigraph\" package in LaTeX.","keywords#Keywords":"adigraph, NewAdigraph, myAdigraph, s, t.","source-code#Source Code":"\\documentclass{article}\n\\nonstopmode\n\\usepackage{adigraph}\n\\begin{document}\n\\NewAdigraph{myAdigraph}{\ns:0,0;\n1:2,2;\n3:2,-2;\n2:6,2;\n4:6,-2;\nt:8,0;\n}{\ns,1:25;\ns,3:25;\n3,4:25;\n1,2:35;\n2,t:20;\n4,t:30;\n3,1:10;\n4,2:10;\n2,3:15::near start;\n4,1:5::near start;\n}\n\\myAdigraph{\ns,3,4,2,t;\n}\n\\end{document}"}},"/ControlSystems/CSII/pf":{"title":"Description","data":{"":"The code above is a LaTeX document that begins with the declaration of the document class and page style, followed by the document content enclosed in the \"document\" environment.The content includes a centered title consisting of a large bold text \"MATH0003 Integration & Differential Equations\" and a smaller \"Partial Fractions (Anton section 9.5)\" line. It also contains a definition of a rational function, a proper rational function, and the method of integrating proper rational functions by splitting them up into partial fractions.The code includes a theorem about partial fractions decomposition and two questions about the process of finding the form and coefficients of the partial fractions. It also includes two rules, the Linear Factor Rule and the Quadratic Factor Rule, for finding the partial fractions decomposition for factors of a polynomial.","keywords#Keywords":"documentclass, tikzpicture, draw, node, rectangle, coordinate, fill, circle, label.","source-code#Source Code":"\\documentclass[11pt]{article}\n\\pagestyle{empty}\n\\begin{document}\n\n\\begin{center}\n\n\\large{\\bf MATH0003 Integration \\& Differential Equations}\n\\normalsize\n\n\\bigskip\n\n{\\bf Partial Fractions} (Anton section 9.5)\n\n\\end{center}\n\n\\medskip\n\\noindent\n{\\bf Definition:} a {\\em rational function}\nis a function of the form $P(x)/Q(x)$,\nwhere $P$ and $Q$ are polynomials.\nA {\\em proper} rational function is a rational function\nwith the degree of $P$ less than the degree of $Q$.\n\n\\medskip\n\\noindent\nProper rational functions are usually integrated\nby splitting them up into {\\em partial fractions}.\n\n\\medskip\n\\noindent\n{\\bf Theorem (partial fractions):} every proper rational function\nmay be expressed in the form\n\\[\n\\frac{P(x)}{Q(x)} = F_1(x) + F_2(x) + \\cdots + F_n(x),\n\\]\nwhere the $F_i(x)$ are rational functions of the form\n\\[\n\\frac{A}{(ax+b)^k} \\;\\; {\\rm or} \\;\\; \\frac{Ax+B}{(ax^2+bx+c)^k},\n\\]\nin which the denominators are factors of $Q$.\nThe sum is called the partial fraction decomposition of $P(x)/Q(x)$,\nand the $F_i(x)$ are called partial fractions.\n\n\\medskip\n\\noindent\nQ1. How do we find the {\\em form} of the partial fraction decomposition?\n\n\\noindent\nQ2. How do we determine the coefficients?\n\n\\medskip\n\\noindent\n{\\bf Linear Factor Rule.}\nFor each factor of $Q$ of the form $(ax+b)^m$,\nthe partial fraction decomposition contains\nthe following sum of $m$ partial fractions:\n\\[\n\\frac{A_1}{ax+b} + \\frac{A_2}{(ax+b)^2} + \\cdots + \\frac{A_m}{(ax+b)^m},\n\\]\nwhere the $A_i$ are constants to be determined.\n\n\\medskip\n\\noindent\n{\\bf Quadratic Factor Rule.}\nFor each factor of $Q$ of the form $(ax^2+bx+c)^m$,\nwhere $ax^2+bx+c$ is an irreducible quadratic,\nthe partial fraction decomposition contains\nthe following sum of $m$ partial fractions:\n\\[\n\\frac{A_1x+B_1}{ax^2+bx+c} + \\frac{A_2x+B_2}{(ax^2+bx+c)^2} + \\cdots\n+ \\frac{A_mx+B_m}{(ax^2+bx+c)^m},\n\\]\nwhere the $A_i$ and $B_i$ are constants to be determined.\n\n\\end{document}"}},"/ControlSystems/CSII/polesZeroes":{"title":"Poleszeroes","data":{"":"","keywords#Keywords":"tikz, graph, nodes, edges, styles, arrows, positioning, labels, options","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\begin{document}\n\\begin{tikzpicture}[scale=2.5, every node/.style={scale=0.6}]\n\n% Axes:\n\\draw [-latex] (-0.815,0) -- (1.25,0) node [above left]  {$\\Re$};\n\\draw [-latex] (0,-0.15) -- (0,0.6) node [below right] {$\\Im$};\n\n% Poles and ticks\n\\node[cross out,draw=black] at (0.8187,0) {};\n\\node[] at (0.8187,-0.1) {$\\tiny{0.8187}$};\n\\node[cross out,draw=black] at (0.3679,0) {};\n\\node[] at (0.3679,-0.1) {$\\tiny{0.3679}$};\n\\node[cross out,draw=black] at (1,0) {};\n\\node[] at (1,-0.1) {$\\tiny{1}$};\n% Zeroes and ticks\n\\node[solid, circle,draw=black] at (-0.6714,0) {};\n\\node[] at (-0.6714,-0.1) {$\\tiny{-0.6714}$};\n\n%% Draw connection arrows\n\\draw[] (0,0) node[pos=0.8, above left] {}(36:0.6958) node[solid,thick, cross out,draw=black] {};\n\\node[] at (36:0.6958+0.14) {$\\tiny{z=0.6958e^{j36^\\circ}}$};\n\\draw[dashed]  (36:0.6958) -- (-0.6714,0) node[] {};\n\\draw[dashed]  (36:0.6958) -- (0.3679,0) node[] {};\n\\draw[dashed]  (36:0.6958) -- (0.8187,0) node[] {};\n\\draw[dashed]  (36:0.6958) -- (1,0) node[] {};\n\n%% Draw angles for zeroes\n\\draw (-0.3,0.025)node[] {$\\scriptstyle 18.3316^o$};\n\\draw[red, -stealth] (-0.1,0) arc (0:45:0.25);\n%% Draw angles for poles\n\\draw (0.2,0.025)node[] {$\\scriptstyle 122.028^o$};\n\\draw[red, -stealth] (0.05,0) arc (180:45:0.225);\n\n\\draw (0.6,0.025)node[] {$\\scriptstyle 64.5096^o$};\n\\draw[red, -stealth] (0.45,0) arc (180:115.4904:0.325);\n\n\\draw (1.1,0.2)node[] {$\\scriptstyle 136.9069^o$};\n\\draw[red, -stealth] (1.15,0) arc (0:136.9069:0.15);\n%\\draw[red, -stealth] (0,2) arc (90:145:2);\n%\\draw[dashed] (0,0) -- node[pos=0.8, above right] {$\\omega_z$}(125:3.5) node[solid, fill=white, circle,draw=black] {};\n%\\draw[dashed] (0,0) -- node[pos=0.8, above right] {$\\omega_z$}(125:3.5) node[solid, cross out,draw=black] {};\n%\\draw[dashed] (0,0) -- (125:3.5) node[solid, cross out,draw=black] {};\n%\\draw[black, -stealth] (1.75,0) node[pos=0.1,above right] {$\\theta=120^o$} arc (0:125:1.75);\n%\n%%\\draw[dashed]  (-5,0) node[below left] {$-\\xi_p\\omega_p$} --  (-5,-3) node[solid, cross out,draw=black] {};\n%%\\draw[dashed]  (-2,0) node[below left] {$-\\xi_z\\omega_z$} --  (-2,-3) node[solid, fill=white, circle,draw=black] {};\n%%\\draw[dashed]  (-2,0) node[below left] {$-\\xi$} -- (-2,2.85);\n%%\\draw[dashed]  (0,2.85) node[below left] {$\\omega_n$} -- (-2,2.85);\n%\\draw[dashed]  (-2,0) node[below left] {$-2$} -- (-2,2.867);\n%\\draw[dashed]  (0,2.867) node[below left] {$j2\\sqrt{(3)}$} -- (-2,2.867);\n%\\draw[dashed]  (125:3.5) -- (-4,0) node[solid, cross out,draw=black] {};\n%\\draw (-4,0) node [below left] {-4};\n%\\draw[black, -stealth] (-2,2)  arc (0:-180:0.3);\n%\\draw (-3,2.25)node[] {$\\theta=30^o$};\n\\end{tikzpicture}\n\n\n\\end{document}"}},"/ControlSystems/CSII/sampleEND":{"title":"Description","data":{"":"The given diagram seems to be a digital control system which consists of a feedback loop. The signal  is the reference signal and  is the output signal. The system involves a digital controller , and a plant with a transfer function .The first block in the system is the summing block which takes the reference signal  and the feedback signal , computes their difference , and provides this error signal as an input to the controller.The controller  is responsible for generating the control signal to be applied to the plant. The plant has a transfer function of . The output of the plant is fed back through the summing block to generate the feedback signal , which is subtracted from the reference signal to compute the error signal .The system also has two sampling points, indicated by the dotted lines with labels . These sampling points indicate the instants at which the reference signal and the feedback signal are sampled and held constant for one sampling period .","keywords#Keywords":"tikzpicture, node, draw, fill, rectangle, circle, path, coordinate, label, above, left, right, below.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes,arrows,calc}\n\\usetikzlibrary{decorations.text}\n\\tikzset{add/.style n args={4}{\nminimum width=6mm,\npath picture={\n\\draw[black]\n(path picture bounding box.south east) -- (path picture bounding box.north west)\n(path picture bounding box.south west) -- (path picture bounding box.north east);\n\\node at ($(path picture bounding box.south)+(0,0.13)$)     {\\tiny #1};\n\\node at ($(path picture bounding box.west)+(0.13,0)$)      {\\tiny #2};\n\\node at ($(path picture bounding box.north)+(0,-0.13)$)        {\\tiny #3};\n\\node at ($(path picture bounding box.east)+(-0.13,0)$)     {\\tiny #4};\n}\n}\n}\n\\begin{document}\n\n%\\begin{figure}\n%\\centering\n\\tikzstyle{block} = [draw, fill=blue!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{controller} = [draw, fill=red!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{sum} = [draw, fill=blue!20, circle, node distance=1cm]\n\\tikzstyle{input} = [coordinate]\n\\tikzstyle{output} = [coordinate]\n\\tikzstyle{sampleSP} = [coordinate]\n\\tikzstyle{sampleEP} = [coordinate]\n\\tikzstyle{otherPoint} = [coordinate]\n\\begin{tikzpicture}[auto, >=latex']\n% Nodes\n\\node [input] (input) {};\n%\\node [sum, right = 1cm of input] (sum) {};\n\\node[draw,circle,add={--}{+}{}{},right of= input](sum){};\n\\node [sampleSP, right = 1cm of sum] (sumSP) {};\n\\node [sampleEP, right = 1cm of sumSP] (sumEP) {};\n\\node [sampleEP, above = 1cm of sumEP] (sumEPTOP) {};\n\\node [block, right = 1 cm of sumEP] (systemK) {$K$};\n%\\node [block, right = 1 cm of systemK] (system2) {$\\frac{1-e^{-s}}{s}$};\n%\\node [controller, right = 1 cm of systemK] (system3) {$\\frac{1}{s+1}$};\n\\node [controller, right = 1 cm of systemK] (systemEND) {$G(z)$};\n\\node [otherPoint,right = 1 cm of systemEND] (branchPoint) {};\n\\node [otherPoint,below = 1 cm of systemEND] (belowsystem) {}; %{$\\frac{1}{Ts+1}$};\n%\\node [block, right = 1cm of system] (system2) {$\\frac{1}{Ts+1}$};\n\\node [output, right = 2cm of branchPoint] (outputY) {};\n\\node [input, below = 0.5cm of systemEND] (m) {};\n%\t\\node [block, right = 0.75 of belowsystem] (systemH) {$H_1(s)$};\n\n% Second Sampler Point\n%\t\\node [sampleSP, left = 1cm of systemH] (sysHSP2) {};\n%\t\\node [sampleEP, left = 1cm of sysHSP2] (sysHEP2) {};\n%\t\\node [sampleEP, above = 1cm of sysHEP2] (sumEPTOP2) {};\n\n% Second block\n%\t\\node [block, left = 1.5cm of sysHEP2] (systemH2) {$H_2(s)$};\n%\t% Arrows\n\\draw [draw,->] (input) -- node {$r(t)$} (sum);\n%\t% Arrows for first sampler\n\\draw [-] (sum) -- node {$e(t)$} (sumSP);\n\\draw [-,thick] (sumEPTOP) -- node {$\\delta_\\tau$} (sumSP);\n% Arrows for block diagrams\n\\draw [->] (sumEP) -- node {} (systemK);\n\\draw [->] (systemK) -- node {} (systemEND);\n%\\draw [->] (system2) -- node {} (systemEND);\n%\\draw [->] (system3) -- node {} (systemEND);\n%\t%Arrows for second sampler (bottom)\n%\t\\draw [-]  (sysHSP2)-- node {$M(s)$} (systemH);\n%\t\\draw [-,thick] (sysHSP2) -- node {$\\delta_\\tau$} (sumEPTOP2);\n%\t%\\draw [->] (sumEP) -- node {$M^\\ast(s)$} (systemH);\n%\t% \\draw [->] (system) --  (system2);\n% G(s) to branchpoint\n\\draw [-] (systemEND) --  (branchPoint);\n\\draw [->] (branchPoint) -- node (y) {$C(s)$}(outputY);\n%\\draw [-] (outputY) |- (system) {};\n\\draw [-] (branchPoint) |- (m) {} ;\n%\t\\draw [<-] (systemH2) -- node {$M^\\ast(s)$} (sysHEP2);\n%\t\\draw [->] (systemH2) -| (sum); %{$-$}  node [near end] {} (sum);\n\\draw [->] (m) -| node[pos=0.99] {} node [near end] {} (sum); %{$-$}  node [near end] {} (sum);\n\\end{tikzpicture}\n%\\end{figure}\n\\end{document}"}},"/ControlSystems/CSII/sampler413":{"title":"Description","data":{"":"This is a LaTeX code for drawing a block diagram using TikZ package. The diagram represents a control system with a feedback loop. The system consists of several blocks, including a summing point, a gain block, a zero-order hold block, and a controller block. The input signal is represented by the symbol \"R\", while the output signal is represented by the symbol \"C(s)\". The feedback loop is closed by connecting the output of the controller block to the summing point.The code defines various styles for the blocks, including the input and output nodes, the summing point, the gain block, the zero-order hold block, and the controller block. The TikZ library \"positioning\" is used to position the blocks relative to each other. The \"add\" style is defined to create a customized circle node with four small nodes representing plus and minus signs.The diagram is drawn using the TikZ environment \"tikzpicture\". The various blocks are drawn as nodes and connected using arrows. The \"draw\" and \"fill\" commands are used to define the appearance of the blocks. The \"node\" command is used to label the input and output signals, as well as to add text to the various blocks. The \"draw\" and \"fill\" styles are used to define the appearance of the connecting arrows.Overall, this code creates a visual representation of a control system that can be used in academic and engineering contexts.","keywords#Keywords":"documentclass, standalone, usepackage, tikz, amsmath, usetikzlibrary, positioning, shapes, arrows, calc, decorations.text, tikzset.","source-code#Source Code":"\\documentclass[%\n% border=1pt\nborder={-25pt 0pt 0pt 0pt} % left bottom right top\n]{standalone}\n\\usepackage{tikz}\n\\usepackage{amsmath}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes,arrows,calc}\n\\usetikzlibrary{decorations.text}\n\\tikzset{add/.style n args={4}{\nminimum width=6mm,\npath picture={\n\\draw[black]\n(path picture bounding box.south east) -- (path picture bounding box.north west)\n(path picture bounding box.south west) -- (path picture bounding box.north east);\n\\node at ($(path picture bounding box.south)+(0,0.13)$)     {\\tiny #1};\n\\node at ($(path picture bounding box.west)+(0.13,0)$)      {\\tiny #2};\n\\node at ($(path picture bounding box.north)+(0,-0.13)$)        {\\tiny #3};\n\\node at ($(path picture bounding box.east)+(-0.13,0)$)     {\\tiny #4};\n}\n}\n}\n\\begin{document}\n\n%\\begin{figure}\n%\\centering\n\\tikzstyle{block} = [draw, fill=blue!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{controller} = [draw, fill=red!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{sum} = [draw, fill=blue!20, circle, node distance=1cm]\n\\tikzstyle{input} = [coordinate]\n\\tikzstyle{output} = [coordinate]\n\\tikzstyle{sampleSP} = [coordinate]\n\\tikzstyle{sampleEP} = [coordinate]\n\\tikzstyle{otherPoint} = [coordinate]\n\\begin{tikzpicture}[auto, >=latex']\n% Nodes\n\\node [input] (input) {};\n%\\node [sum, right = 1cm of input] (sum) {};\n\\node[draw,circle,add={--}{+}{}{},right of= input](sum){};\n\\node [sampleSP, right = 1cm of sum] (sumSP) {};\n\\node [sampleEP, right = 1cm of sumSP] (sumEP) {};\n\\node [sampleEP, above = 1cm of sumEP] (sumEPTOP) {};\n\\node [block, right = 1cm of sumEP] (systemK) {$K$};\n\\node [block, right = 1cm of systemK] (systemZOH) {$\\cfrac{1-e^{-s}}{s}$};\n\\node [controller, right = 1cm of systemZOH] (system) {$\\cfrac{1}{s(s+1)}$};\n\\node [otherPoint,right = 1cm of system] (branchPoint) {};\n\\node [otherPoint,below = 1 cm of system] (belowsystem) {}; %{$\\frac{1}{Ts+1}$};\n%\\node [block, right = 1cm of system] (system2) {$\\frac{1}{Ts+1}$};\n\\node [output, right = 1cm of branchPoint] (output) {};\n\\node [input, below = 0.5cm of system] (m) {};\n\n% Arrows\n\\draw [draw,->] (input) -- node {$R$} (sum);\n% Arrows for first sampler\n\\draw [-] (sum) -- node {$E(s)$} (sumSP);\n\\draw [-,thick] (sumEPTOP) -- node {$\\delta_\\tau$} (sumSP);\n\\draw [->] (sumEP) -- node {$E^\\ast(s)$} (systemK);\n\\draw [->] (systemK) -- node {} (systemZOH);\n\\draw [->] (systemZOH) -- node {} (system);\n%\\draw [->] (sumEP) -- node {$M^\\ast(s)$} (systemH);\n% \\draw [->] (system) --  (system2);\n\\draw [-] (system) --  (branchPoint);\n\\draw [->] (branchPoint) -- node (y) {$C(s)$}(output);\n\n\\draw [-] (y) |- (m) {} ;\n\\draw [->] (m) -| (sum); %{$-$}  node [near end] {} (sum);\n\\end{tikzpicture}\n%\\end{figure}\n\\end{document}"}},"/ControlSystems/CSII/samplerBlock":{"title":"Description","data":{"":"The code is a LaTeX document that generates a block diagram using the TikZ package. The block diagram depicts a closed-loop control system consisting of a controller, a plant, and feedback. The diagram includes several components such as summing junctions, blocks, and signals.The code defines various TikZ styles for different types of nodes such as \"block\", \"controller\", \"sum\", \"input\", \"output\", \"sampleSP\", \"sampleEP\", and \"otherPoint\". These styles define the appearance of the corresponding nodes in the block diagram. For example, the \"block\" style sets the node shape to a rectangle with a blue fill, while the \"sum\" style sets the node shape to a circle with a blue fill.The code then defines the nodes of the block diagram and connects them using arrows. The nodes include an input node, a summing junction node, a plant block node, an output node, and other miscellaneous nodes. The arrows between the nodes represent the flow of signals through the system.Finally, the code specifies the layout of the nodes using the TikZ \"positioning\" library. This allows the user to specify the relative positioning of the nodes with respect to each other.","keywords#Keywords":"tikzpicture, node, rectangle, draw, align, below, left, right, text width, fill, black, minimum height, minimum width, anchor, east, west.","source-code#Source Code":"\\documentclass[%\n% border=1pt\nborder={-25pt 0pt 0pt 0pt} % left bottom right top\n]{standalone}\n\\usepackage{amsmath}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes,arrows,calc}\n\\usetikzlibrary{decorations.text}\n\\tikzset{add/.style n args={4}{\nminimum width=6mm,\npath picture={\n\\draw[black]\n(path picture bounding box.south east) -- (path picture bounding box.north west)\n(path picture bounding box.south west) -- (path picture bounding box.north east);\n\\node at ($(path picture bounding box.south)+(0,0.13)$)     {\\tiny #1};\n\\node at ($(path picture bounding box.west)+(0.13,0)$)      {\\tiny #2};\n\\node at ($(path picture bounding box.north)+(0,-0.13)$)        {\\tiny #3};\n\\node at ($(path picture bounding box.east)+(-0.13,0)$)     {\\tiny #4};\n}\n}\n}\n\\begin{document}\n\n%\\begin{figure}\n%\\centering\n\\tikzstyle{block} = [draw, fill=blue!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{controller} = [draw, fill=red!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{sum} = [draw, fill=blue!20, circle, node distance=1cm]\n\\tikzstyle{input} = [coordinate]\n\\tikzstyle{output} = [coordinate]\n\\tikzstyle{sampleSP} = [coordinate]\n\\tikzstyle{sampleEP} = [coordinate]\n\\tikzstyle{otherPoint} = [coordinate]\n\\begin{tikzpicture}[auto, >=latex']\n% Nodes\n\\node [input] (input) {};\n%\\node [sum, right = 1cm of input] (sum) {};\n\\node[draw,circle,add={--}{+}{}{},right of= input](sum){};\n%\\node [sampleSP, right = 1cm of sum] (sumSP) {};\n%\\node [sampleEP, right = 1cm of sumSP] (sumEP) {};\n%\\node [sampleEP, above = 1cm of sumEP] (sumEPTOP) {};\n\\node [block, right = 2cm of sum] (system) {$\\cfrac{K}{s+1}$}; % node[label=below:$b_1$,draw]{};\n\\node [below = 0.005 cm of system] (PointHeader) {\\scriptsize{$G(s)$}};\n\\node [otherPoint,right = 1cm of system] (branchPoint) {};\n\\node [otherPoint,below = 1 cm of system] (belowsystem) {}; %{$\\frac{1}{Ts+1}$};\n%\\node [block, right = 1cm of system] (system2) {$\\frac{1}{Ts+1}$};\n\\node [output, right = 2cm of branchPoint] (output) {};\n%\\node [input, below = 0.5cm of system] (m) {};\n\\node [otherPoint, right = 1.25 of belowsystem] (systemRightDownP) {$H_1(s)$};\n\n% Second Sampler Point\n\\node [sampleSP, below = 0.5cm of systemRightDownP] (sysHSP2) {};\n\\node [sampleEP, left = 1cm of sysHSP2] (sysHEP2) {};\n\\node [sampleEP, above = 1cm of sysHEP2] (sumEPTOP2) {};\n\n% Second block\n\\node [block, left = 0.75cm of sysHEP2] (systemH2) {$\\cfrac{1-e^{-Ts}}{s}$};\n% Arrows\n\\draw [draw,->] (input) -- node {$R$} (sum);\n% Arrows for first sampler\n%\t\\draw [-] (sum) -- node {$E(s)$} (sumSP);\n%\t\\draw [-,thick] (sumEPTOP) -- node {$\\delta_\\tau$} (sumSP);\n\\draw [->] (sum) -- node {$E(s)$} (system);\n%Arrows for second sampler (bottom)\n%\t\\draw [-]  (sysHSP2)-- node {$M(s)$} (systemH);\n\\draw [-,thick] (sysHSP2) -- node {$\\delta_\\tau$} (sumEPTOP2);\n%\\draw [->] (sumEP) -- node {$M^\\ast(s)$} (systemH);\n% \\draw [->] (system) --  (system2);\n\\draw [-] (system) --  (branchPoint);\n\\draw [->] (branchPoint) -- node (y) {$C(s)$}(output);\n\\draw [-] (y) |- (sysHSP2) {};\n%\\draw [-] (y) |- (m) {} ;\n%\\draw [<-] (systemH2) -- node {$M^\\ast(s)$} (sysHEP2);\n\\draw [->] (sysHEP2) -- (systemH2);\n\\draw [->] (systemH2) -| node [near end] {$B(s)$} (sum) ; %{$-$}  node [near end] {} (sum);\n%\\node [otherPoint, below = 1.25cm of sum] (Text) {$B(s)$};\n%\\draw [->] (m) -| node[pos=0.99] {} node [near end] {} (sum); %{$-$}  node [near end] {} (sum);\n\\end{tikzpicture}\n%\\end{figure}\n\\end{document}"}},"/ControlSystems/CSII/samplerTesting":{"title":"Description","data":{"":"The code is a LaTeX document that creates a block diagram using TikZ library. The block diagram represents a control system with various blocks, each block represented as a rectangle with text inside it. The lines connecting the blocks represent signals flowing from one block to another. The lines can be solid, dashed, or dotted, and they have arrows indicating the direction of the signal flow. The code also uses the \"add\" style to add a crosshair to a circle node. The code defines several TikZ styles for nodes with different shapes and colors, including \"block\", \"controller\", \"sum\", \"input\", \"output\", \"sampleSP\", \"sampleEP\", and \"otherPoint\". The code places the nodes in the block diagram using the \"positioning\" library, which allows the nodes to be positioned relative to each other. The nodes are connected using the \"auto\" option to automatically position the arrows without overlapping. The code also includes comments to describe what each line of code does.","keywords#Keywords":"tikzpicture, node, rectangle, draw, fill, below, right, of.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes,arrows,calc}\n\\usetikzlibrary{decorations.text}\n\\tikzset{add/.style n args={4}{\nminimum width=6mm,\npath picture={\n\\draw[black]\n(path picture bounding box.south east) -- (path picture bounding box.north west)\n(path picture bounding box.south west) -- (path picture bounding box.north east);\n\\node at ($(path picture bounding box.south)+(0,0.13)$)     {\\tiny #1};\n\\node at ($(path picture bounding box.west)+(0.13,0)$)      {\\tiny #2};\n\\node at ($(path picture bounding box.north)+(0,-0.13)$)        {\\tiny #3};\n\\node at ($(path picture bounding box.east)+(-0.13,0)$)     {\\tiny #4};\n}\n}\n}\n\\begin{document}\n\n%\\begin{figure}\n%\\centering\n\\tikzstyle{block} = [draw, fill=blue!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{controller} = [draw, fill=red!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{sum} = [draw, fill=blue!20, circle, node distance=1cm]\n\\tikzstyle{input} = [coordinate]\n\\tikzstyle{output} = [coordinate]\n\\tikzstyle{sampleSP} = [coordinate]\n\\tikzstyle{sampleEP} = [coordinate]\n\\tikzstyle{otherPoint} = [coordinate]\n\\begin{tikzpicture}[auto, >=latex']\n% Nodes\n\\node [input] (input) {};\n%\\node [sum, right = 1cm of input] (sum) {};\n\\node[draw,circle,add={--}{+}{}{},right of= input](sum){};\n\\node [sampleSP, right = 1cm of sum] (sumSP) {};\n\\node [sampleEP, right = 1cm of sumSP] (sumEP) {};\n\\node [sampleEP, above = 1cm of sumEP] (sumEPTOP) {};\n\\node [block, right = 1 cm of sumEP] (systemK) {$K$};\n\\node [block, right = 0.5 cm of systemK] (system2) {$\\frac{1-e^{-s}}{s}$};\n\\node [controller, right = 1 cm of system2] (system3) {$\\frac{1}{s+1}$};\n\\node [controller, right = 0.5 cm of system3] (systemEND) {$\\frac{1}{s}$};\n\\node [otherPoint,right = 1 cm of systemEND] (branchPoint) {};\n\\node [otherPoint,below = 1 cm of systemEND] (belowsystem) {}; %{$\\frac{1}{Ts+1}$};\n%\\node [block, right = 1cm of system] (system2) {$\\frac{1}{Ts+1}$};\n\\node [output, right = 2cm of branchPoint] (outputY) {};\n\\node [input, below = 0.5cm of systemEND] (m) {};\n%\t\\node [block, right = 0.75 of belowsystem] (systemH) {$H_1(s)$};\n\n% Second Sampler Point\n%\t\\node [sampleSP, left = 1cm of systemH] (sysHSP2) {};\n%\t\\node [sampleEP, left = 1cm of sysHSP2] (sysHEP2) {};\n%\t\\node [sampleEP, above = 1cm of sysHEP2] (sumEPTOP2) {};\n\n% Second block\n%\t\\node [block, left = 1.5cm of sysHEP2] (systemH2) {$H_2(s)$};\n%\t% Arrows\n\\draw [draw,->] (input) -- node {$r(t)$} (sum);\n%\t% Arrows for first sampler\n\\draw [-] (sum) -- node {$e(t)$} (sumSP);\n\\draw [-,thick] (sumEPTOP) -- node {$\\delta_\\tau$} (sumSP);\n% Arrows for block diagrams\n\\draw [->] (sumEP) -- node {} (systemK);\n\\draw [->] (systemK) -- node {} (system2);\n\\draw [->] (system2) -- node {} (system3);\n\\draw [->] (system3) -- node {} (systemEND);\n%\t%Arrows for second sampler (bottom)\n%\t\\draw [-]  (sysHSP2)-- node {$M(s)$} (systemH);\n%\t\\draw [-,thick] (sysHSP2) -- node {$\\delta_\\tau$} (sumEPTOP2);\n%\t%\\draw [->] (sumEP) -- node {$M^\\ast(s)$} (systemH);\n%\t% \\draw [->] (system) --  (system2);\n% G(s) to branchpoint\n\\draw [-] (systemEND) --  (branchPoint);\n\\draw [->] (branchPoint) -- node (y) {$C(s)$}(outputY);\n%\\draw [-] (outputY) |- (system) {};\n\\draw [-] (branchPoint) |- (m) {} ;\n%\t\\draw [<-] (systemH2) -- node {$M^\\ast(s)$} (sysHEP2);\n%\t\\draw [->] (systemH2) -| (sum); %{$-$}  node [near end] {} (sum);\n\\draw [->] (m) -| node[pos=0.99] {} node [near end] {} (sum); %{$-$}  node [near end] {} (sum);\n\\end{tikzpicture}\n%\\end{figure}\n\\end{document}"}},"/ControlSystems/CSII/stepResponsePlot":{"title":"Description","data":{"":"This is a LaTeX document that uses the standalone class and loads several packages including tikz, pgfplots, filecontents, and amsmath. The data for the plot is contained in an external file named data.dat, which is defined using the filecontents package.The main part of the code is a tikzpicture environment with an axis environment inside it. The axis environment is configured to have a middle x and y axis, x and y labels, and specific x and y tick labels. The ycomb plot style is used to draw a thick black line connecting the data points from the data.dat file. An additional plot is added with a single point at the coordinate (0,5.825) with a text label below it reading \"arbitrary points at  and \".Overall, this code generates a plot of discrete data points with tick labels and an additional point with a label.","keywords#Keywords":"tikzpicture, axis, axis x line, axis y line, every axis x label, every axis plot post, xlabel, ylabel, xtick, xmax, ymin, ymax, yticklabels, addplot, ycomb, table, coordinates, node, pin.","source-code#Source Code":"\\documentclass[border={10pt}]{standalone}\n\\usepackage{tikz,pgfplots,filecontents,amsmath}\n\\pgfplotsset{compat=1.5}\n\n\\begin{filecontents}{data.dat}\nn   yn\n-1   0\n0    6\n1    2\n2    4\n3    4\n4    4\n5    4\n6    4\n\\end{filecontents}\n\n\n\\begin{document}\n\\begin{tikzpicture}\n\\begin{axis}\n[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\naxis x line=middle,\naxis y line=middle,\nevery axis x label={at={(current axis.right of origin)},anchor=north west},\n%every axis y label={at={(current axis.above origin)},anchor= north west},\nevery axis plot post/.style={mark options={fill=black}},\nxlabel={$k$},\nylabel={$\\boldsymbol{y[k]}$},\nxtick={0,1, ..., 6},\nxmax=7,\nymin=0,\nymax=8,\nyticklabels={\n$0$,\n$0$,\n$0.5a+b$,\n$1$,\n$a$\n},\n]%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\addplot+[ycomb,black,thick] table [x={n}, y={yn}] {data.dat};\n%\\addplot[mark=*] coordinates {(1,2)} node[pin=45:{}]{} ;\n\\addplot[] coordinates {(0,5.825)} node[pin=320:{arbitrary points at $x(0)$ and $x(1)$}]{} ;\n\\end{axis}\n\\end{tikzpicture}\n\n\\end{document}"}},"/ControlSystems/CSII/systemTypes012":{"title":"Description","data":{"":"The code is a LaTeX document that includes several packages such as amsmath, amssymb, graphicx, booktabs, and circuitikz. It defines three styles for different types of nodes in a TikZ picture: block, controller, and sum.The TikZ picture is used to create a block diagram with three systems of different types: 0, 1, and 2. Each system is represented by a block diagram consisting of three nodes: an input node, a block node, and an output node. The input node is labeled R, and the output node is labeled C. Each block node is labeled with a transfer function of the form N(s)/D(s) where N(s) and D(s) are polynomials in s.The three systems differ in the form of their transfer functions. Type 0 has a transfer function of the form N(s)/D(s), type 1 has a transfer function of the form N(s)/(sD(s)), and type 2 has a transfer function of the form N(s)/(s^2D(s)). The caption of the figure reminds the reader that the polynomials N(s) and D(s) should not be factorizable by s.The TikZ picture uses arrows to represent the flow of signals between nodes. The auto and >=latex' options are used to specify the positioning and style of the arrows. The TikZ picture also uses the positioning library to position the nodes relative to each other.The document includes a figure environment that contains the TikZ picture and a caption describing the systems of types 0, 1, and 2.","keywords#Keywords":"tikz, amsmath, amssymb, graphicx, booktabs, tabularx, circuitikz, positioning, shapes, arrows, draw, fill, rectangle, minimum height, minimum width, circle, node distance, coordinate, auto, input, output.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usepackage{amsmath,amssymb}\n\\usepackage{graphicx} % Required for inserting images\n\\usepackage{booktabs}\n\\usepackage{tabularx}\n\\usepackage{circuitikz}\n\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes,arrows}\n\\tikzstyle{block} = [draw, fill=blue!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{controller} = [draw, fill=green!20, rectangle, minimum height=3em, minimum width=4em]\n\\tikzstyle{sum} = [draw, fill=blue!20, circle, node distance=1cm]\n\\tikzstyle{input} = [coordinate]\n\\tikzstyle{output} = [coordinate]\n\\begin{document}\n\\begin{figure}\n\\hspace{1.5cm}\\textbf{Type 0}\\hspace{3cm}\\textbf{Type\n1}\\hspace{3cm}\\textbf{Type 2}\\\\\n\\vspace{0.1cm}\n\n\\centering \\tikzstyle{block} = [draw, fill=blue!20,\nrectangle, minimum height=3em, minimum width=3em]\n\\tikzstyle{controller} = [draw, fill=red!20, rectangle, minimum\nheight=3em, minimum width=4em] \\tikzstyle{sum} = [draw,\nfill=blue!20, circle, node distance=1cm] \\tikzstyle{input} =\n[coordinate] \\tikzstyle{output} = [coordinate]\n\\begin{tikzpicture}[auto, >=latex']\n% Nodes\n\\node [input] (input) {};\n\\node [sum, right = 0.5cm of input] (sum) {};\n\\node [block, right = 0.5cm of sum] (system) {$\\frac{N_0(s)}{D_0(s)}$};\n\\node [output, right = 1cm of system] (output) {};\n\\node [input, below = 0.5cm of system] (m) {};\n% Arrows\n\\draw [draw,->] (input) -- node {$R$} (sum);\n\\draw [->] (sum) -- node {} (system);\n\\draw [->] (system) -- node (y) {$C$}(output);\n\\draw [-] (y) |- (m) {} ;\n\\draw [->] (m) -| node[pos=0.99] {$-$}  node [near end] {} (sum);\n\\end{tikzpicture}\n\\hspace{0.5cm}\n\\begin{tikzpicture}[auto, >=latex']\n% Nodes\n\\node [input] (input) {};\n\\node [sum, right = 0.5cm of input] (sum) {};\n\\node [block, right = 0.5cm of sum] (system) {$\\frac{N_1(s)}{sD_1(s)}$};\n\\node [output, right = 1cm of system] (output) {};\n\\node [input, below = 0.5cm of system] (m) {};\n% Arrows\n\\draw [draw,->] (input) -- node {$R$} (sum);\n\\draw [->] (sum) -- node {} (system);\n\\draw [->] (system) -- node (y) {$C$}(output);\n\\draw [-] (y) |- (m) {} ;\n\\draw [->] (m) -| node[pos=0.99] {$-$}  node [near end] {} (sum);\n\\end{tikzpicture}\n\\hspace{0.5cm}\n\\begin{tikzpicture}[auto, >=latex']\n% Nodes\n\\node [input] (input) {};\n\\node [sum, right = 0.5cm of input] (sum) {};\n\\node [block, right = 0.5cm of sum] (system) {$\\frac{N_2(s)}{s^2D_2(s)}$};\n\\node [output, right = 1cm of system] (output) {};\n\\node [input, below = 0.5cm of system] (m) {};\n% Arrows\n\\draw [draw,->] (input) -- node {$R$} (sum);\n\\draw [->] (sum) -- node {} (system);\n\\draw [->] (system) -- node (y) {$C$}(output);\n\\draw [-] (y) |- (m) {} ;\n\\draw [->] (m) -| node[pos=0.99] {$-$}  node [near end] {} (sum);\n\\end{tikzpicture}\n\\caption{Systems of types 0, 1 and 2. Note that $N_0, N_1, N_2, D_0,\nD_1, D_2$ should not be factorizable by $s$.}\n\\end{figure}\n\\end{document}"}},"/DSP/a511aCopy":{"title":"Description","data":{"":"The code is a LaTeX document that generates a plot of a discrete signal. The signal is defined in the \"data.dat\" file, which is included in the document using the \"filecontents\" package. The signal is plotted using the \"tikzpicture\" environment and the \"pgfplots\" package. The signal is displayed as a stem plot using the \"ycomb\" option. The x-axis is labeled as \"n\" and the y-axis is labeled as \"y[n]\". The x-axis ticks are labeled with integers from 0 to 11, and the y-axis ticks are labeled with powers of \"a\" ranging from 0 to 10. The plot is displayed within the axis limits of 0 to 11 on the x-axis and 0 to 20 on the y-axis.","keywords#Keywords":"tikz, pgfplots, filecontents, amsmath, ycomb, yticklabels, axis, xlabel, ylabel, xtick, xmin, xmax, ymin, ymax, mark options.","source-code#Source Code":"\\documentclass[border={10pt}]{standalone}\n\\usepackage{tikz,pgfplots,filecontents,amsmath}\n\\pgfplotsset{compat=1.5}\n\n\\begin{filecontents}{data.dat}\nn   yn\n0    1\n1    2\n2    4\n3    6\n4    8\n5    10\n6    12\n7    14\n8    16\n9    0\n10   0\n\\end{filecontents}\n\n\n\\begin{document}\n\\begin{tikzpicture}\n\\begin{axis}\n[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\naxis x line=middle,\naxis y line=middle,\nevery axis x label={at={(current axis.right of origin)},anchor=north west},\nevery axis y label={at={(current axis.above origin)},anchor= north west},\nevery axis plot post/.style={mark options={fill=black}},\nxlabel={$n$},\nylabel={$\\boldsymbol{y[n]}$},\nxtick={0,1, ..., 11},\nxmax=11,\nyticklabels={\n$a^0$,\n$a^1$,\n$a^2$,\n$a^3$,\n$a^4$,\n$a^5$,\n$a^6$,\n$a^7$,\n$a^8$,\n$a^9$,\n$a^10$\n},\nymin=0,\nymax=20,\n]%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\addplot+[ycomb,black,thick] table [x={n}, y={yn}] {data.dat};\n\\end{axis}\n\\end{tikzpicture}\n\n\\end{document}"}},"/DSP/a53_b":{"title":"Description","data":{"":"The code is a LaTeX document that creates a simple graph of a discrete-time signal using the TikZ and pgfplots packages. The signal is defined by a data file called \"data.dat\" that contains two columns of data representing the discrete-time index and the signal value, respectively.The graph is created using the \"axis\" environment provided by pgfplots. The x-axis and y-axis are labeled using the \"xlabel\" and \"ylabel\" commands, and the tick marks on the x-axis are set using the \"xtick\" command. The \"ymin\" and \"ymax\" commands set the minimum and maximum values of the y-axis.Finally, the signal is plotted using the \"ycomb\" command to create a stem plot, with the data read in from the \"data.dat\" file. The resulting graph shows the discrete-time signal as a sequence of discrete values at integer time indices.","keywords#Keywords":"tikzpicture, axis, xlabel, ylabel, xtick, ymin, ymax, addplot, ycomb, black, thick, table.","source-code#Source Code":"\\documentclass[border={10pt}]{standalone}\n\\usepackage{tikz,pgfplots,filecontents,amsmath}\n\\pgfplotsset{compat=1.5}\n\n\\begin{filecontents}{data.dat}\nn   yn\n-2   0.0\n-1   0.0\n0   1.0\n1   2.0\n2   3.0\n3   4.0\n4   4.0\n5   4.0\n6   4.0\n7   4.0\n8   4.0\n% 3   0.0\n%4   0.0\n% 5   0.0\n\\end{filecontents}\n\n\n\\begin{document}\n\n\\begin{tikzpicture}\n\\begin{axis}\n[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\naxis x line=middle,\naxis y line=middle,\nevery axis x label={at={(current axis.right of origin)},anchor=north west},\nevery axis y label={at={(current axis.above origin)},anchor= north west},\nevery axis plot post/.style={mark options={fill=black}},\nxlabel={$n$},\nylabel={$\\boldsymbol{y[n]}$},\nxtick={-2,0, ..., 8},\nymin=0,\nymax=4,\n]%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\addplot+[ycomb,black,thick] table [x={n}, y={yn}] {data.dat};\n\\end{axis}\n\\end{tikzpicture}\n\n\\end{document}"}},"/DSP/a54":{"title":"Description","data":{"":"This is a LaTeX code that generates two plots side by side using the tikzpicture environment and the pgfplots package. The two plots represent discrete-time signals x[n] and y[n] using stem plots. The signals are stored in separate data files dataX.dat and dataY.dat, respectively.The code begins by defining the document class and loading necessary packages, such as tikz, pgfplots, filecontents, and amsmath. Then, the two data files are defined using the filecontents environment.Each plot is created using the axis environment from pgfplots, and the options are set using key-value pairs. The x[n] plot is first defined and then the y[n] plot is defined in the second tikzpicture environment.Finally, the code ends with the end{document} command, indicating the end of the document.","keywords#Keywords":"tikz, pgfplots, filecontents, amsmath, ycomb, y-axis, x-axis, ylabel, xlabel, xtick, ymin, ymax, n, xn, yn.","source-code#Source Code":"\\documentclass[border={10pt}]{standalone}\n\\usepackage{tikz,pgfplots,filecontents,amsmath}\n\\pgfplotsset{compat=1.5}\n\n\\begin{filecontents}{dataX.dat}\nn   xn\n0   1.0\n1   2.0\n2   3.0\n3   2.0\n4   1.0\n5   1.0\n6   1.0\n7   1.0\n8   1.0\n9   1.0\n10  1.0\n\\end{filecontents}\n\n\\begin{filecontents}{dataY.dat}\nn   yn\n0   2.0\n1   1.0\n2   2.0\n3   -1.0\n4   2.0\n5   3.0\n6   1.0\n7   1.0\n8   1.0\n9   1.0\n10  1.0\n\\end{filecontents}\n\n\\begin{document}\n\n\\begin{tikzpicture}\n\\begin{axis}\n[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\naxis x line=middle,\naxis y line=middle,\nevery axis x label={at={(current axis.right of origin)},anchor=north west},\nevery axis y label={at={(current axis.above origin)},anchor= north west},\nevery axis plot post/.style={mark options={fill=black}},\nxlabel={$n$},\nylabel={$\\boldsymbol{x[n]}$},\nxtick={0,2,...,10},\nymin=-1,\nymax=3,\n]%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\addplot+[ycomb,black,thick] table [x={n}, y={xn}] {dataX.dat};\n\\end{axis}\n\\end{tikzpicture}\n\\begin{tikzpicture}\n\\begin{axis}\n[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\naxis x line=middle,\naxis y line=middle,\nevery axis x label={at={(current axis.right of origin)},anchor=north west},\nevery axis y label={at={(current axis.above origin)},anchor= north west},\nevery axis plot post/.style={mark options={fill=black}},\nxlabel={$n$},\nylabel={$\\boldsymbol{y[n]}$},\nxtick={0,2,...,10},\nymin=-1,\nymax=3,\n]%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\addplot+[ycomb,black,thick] table [x={n}, y={yn}] {dataY.dat};\n\\end{axis}\n\\end{tikzpicture}\n\n\n\\end{document}"}},"/DSP/a5_4c":{"title":"Description","data":{"":"The code is a LaTeX document that includes a tikzpicture environment to create a plot of a discrete-time signal. The signal values are defined in the file data.dat using two columns: one for the index n and another for the signal value hn. The tikzpicture environment includes an axis environment that defines the x and y axes, their labels, and some other properties such as the tick marks and the y-axis limits. Finally, the signal is plotted using the addplot command with the ycomb option to create a stem plot, and the data is loaded from the file data.dat using the table command with the x and y columns specified.","keywords#Keywords":"tikz, pgfplots, filecontents, amsmath, axis, ycomb, table, xtick, xlabel, ylabel, ymin, ymax, n, hn.","source-code#Source Code":"\\documentclass[border={10pt}]{standalone}\n\\usepackage{tikz,pgfplots,filecontents,amsmath}\n\\pgfplotsset{compat=1.5}\n\n\\begin{filecontents}{data.dat}\nn   hn\n0   2\n1   -3\n2   2.0\n% 3   0.0\n%4   0.0\n% 5   0.0\n\\end{filecontents}\n\n\n\\begin{document}\n\n\\begin{tikzpicture}\n\\begin{axis}\n[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\naxis x line=middle,\naxis y line=middle,\nevery axis x label={at={(current axis.right of origin)},anchor=north west},\nevery axis y label={at={(current axis.above origin)},anchor= north west},\nevery axis plot post/.style={mark options={fill=black}},\nxlabel={$n$},\nylabel={$\\boldsymbol{h[n]}$},\nxtick={-1,0,2,4},\nymin=-3,\nymax=3,\n]%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\addplot+[ycomb,black,thick] table [x={n}, y={hn}] {data.dat};\n\\end{axis}\n\\end{tikzpicture}\n\n\\end{document}"}},"/DSP/a5a11_a":{"title":"Description","data":{"":"This LaTeX code defines a document class for creating a standalone graphic using TikZ and pgfplots. The graphic is a simple line plot of discrete data points defined in the \"data.dat\" file. The code imports necessary packages, sets compatibility, and defines the plot parameters. The \"data.dat\" file contains four columns of data representing x-axis values and y-axis values. The document contains a single TikZ picture environment, with an axis environment defining the plot. The plot has x-axis and y-axis labels, ticks, and limits defined using the parameters set earlier. The data points are plotted using a ycomb plot style in black with a thick line. The resulting output will be a standalone graphic file.","keywords#Keywords":"tikz, pgfplots, filecontents, amsmath, ycomb, black, thick, table, axis x line, axis y line, every axis x label, every axis y label, mark options, fill=black, xlabel, ylabel, xtick, xmax, ymin, ymax.","source-code#Source Code":"\\documentclass[border={10pt}]{standalone}\n\\usepackage{tikz,pgfplots,filecontents,amsmath}\n\\pgfplotsset{compat=1.5}\n\n\\begin{filecontents}{data.dat}\nn   yn\n0    1\n1   -1\n2\t 0\n3    3\n\\end{filecontents}\n\n\n\\begin{document}\n\\begin{tikzpicture}\n\\begin{axis}\n[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\naxis x line=middle,\naxis y line=middle,\nevery axis x label={at={(current axis.right of origin)},anchor=north west},\nevery axis y label={at={(current axis.above origin)},anchor= north west},\nevery axis plot post/.style={mark options={fill=black}},\nxlabel={$n$},\nylabel={$\\boldsymbol{y[n]}$},\nxtick={-1,0,2,3, 4},\nxmax=4,\nymin=-2,\nymax=3,\n]%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\addplot+[ycomb,black,thick] table [x={n}, y={yn}] {data.dat};\n\\end{axis}\n\\end{tikzpicture}\n\n\\end{document}"}},"/DSP/block":{"title":"Description","data":{"":"The code is a LaTeX document that uses the tikz package to create a block diagram. The block diagram represents a signal processing system consisting of three subsystems (S1, S2, S3) and a signal input x[n]. The first subsystem (S1) is represented by a block with the label \"System S1\" and has a transfer function of b_k = . The second subsystem (S2) is represented by a block with the label \"System S2\" and has a transfer function of b_k = . The output of S1 is added to the output of S2 by a summation block represented by a circle with a plus sign inside. The resulting signal is then passed through a third subsystem (S3) represented by a block with the label \"System S3\" and a transfer function of b_k = . The output of S3 is represented by the label \"y[n]\" and the intermediate signals are labeled \"y1[n]\" and \"y2[n]\". The diagram also includes several coordinate nodes used to connect the blocks and a few text labels used to annotate the diagram.","keywords#Keywords":"tikz, automata, arrows.meta, circuits, node distance, thick, rectangle, minimum height, minimum width, circle, coordinate, text label.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{pst-sigsys}\t%Not used in the creation of this document\n\\usepackage{tikz}\n\\usetikzlibrary{arrows,automata}\n\\usetikzlibrary{automata,positioning,arrows.meta}\n\\usetikzlibrary{circuits}\n\\begin{document}\n\n\\tikzset{%\nblock/.style    = {draw, thick, rectangle, minimum height = 3em,\nminimum width = 3em},\nmult/.style    = {draw, circle, node distance = 2cm}, % Multipler\nsum/.style      = {draw, circle, node distance = 2cm}, % Adder\ninput/.style    = {coordinate}, % Input\noutput/.style   = {coordinate} % Output\nlabel/.style   = {draw=none} % Text label\n\n}\n\\newcommand{\\suma}{\\Large$+$}\n\\newcommand{\\mult}{\\Large$\\times$}\n\\newcommand{\\inte}{$\\displaystyle \\int$}\n\\newcommand{\\derv}{\\Huge$\\frac{d}{dt}$}\n\n\\begin{tikzpicture}[auto, node distance=2cm,thick]\n\\matrix[column sep = .75cm, row sep = .75cm]\n{   & & & & & & &\\\\\n\\node [coordinate](a1){}; & \\node [block](A2){$\\{b_k\\}=\\{1,1,1,1\\}$}; &\n\\node [coordinate](a3){}; & & & & &\\\\\n\\node (x){$x[n]$}; & & \\node [sum](add1){\\suma}; &  &\\node [coordinate](b5){}; & \\node [block](B6){$\\{b_k\\}=\\{1,-1\\}$}; & \\node [coordinate](b7){};& \\node [coordinate](b8){}; \\\\\n\\node [coordinate](c1){}; & \\node [block](C2){$\\{b_k\\}=\\{1,1,1,1\\}$}; & \\node [coordinate](c3){}; & & & & &\\\\\n& & & & & & &\\\\\n};\n\\draw [-] (x) to (a1);\n\\draw [->] (a1) to (A2);\n\\draw [-] (A2) to (a3);\n\\draw [->] (a3) to (add1);\n\\draw [-] (x) to (c1);\n\\draw [->] (c1) to (C2);\n\\draw [-] (C2) to (c3);\n\\draw [->] (c3) to (add1);\n\\draw [->] (add1) to (B6);\n\\draw [->] (B6) to (b7);\n\n%draw S text labels\n\\node[label,shift={(0,0.75)}] at (A2) {System $S_1$};\n\\node[label,shift={(0,-0.75)}] at (C2) {System $S_2$};\n\\node[label,shift={(0,-0.75)}] at (B6) {System $S_3$};\n\\node[label,shift={(-0.25,0.25)}] at (a3) {$y_1[n]$};\n\\node[label,shift={(-0.25,-0.25)}] at (c3) {$y_2[n]$};\n\\node[label,shift={(-0.25,0.25)}] at (b5) {$w[n]$};\n\\node[label,shift={(-0.25,0)}] at (b8) {$y[n]$};\n\\end{tikzpicture}\n\n\\end{document}"}},"/DSP/c514_c":{"title":"Description","data":{"":"This code is a LaTeX document that generates a TikZ picture of a signal spectrum plot. It uses the pgfplots package to draw the graph and the amsmath package for math symbols. The code sets various properties of the axis, such as its height, width, x and y axis lines, and labels for the x axis. It then plots a signal spectrum using the \\addplot command with ycomb style, which draws a comb-like line with y values at discrete x values. The x and y values for the plot are given in the form of coordinates. The code also includes nodes with labels at specific x and y coordinates using the \\node command to annotate the graph. Finally, the document is closed with \\end{document}.","keywords#Keywords":"tikz, pgfplots, filecontents, amsmath, standalone, axis, xcomb, plot coordinates, node","source-code#Source Code":"\\documentclass[border={10pt}]{standalone}\n\\usepackage{tikz,pgfplots,filecontents,amsmath}\n\\pgfplotsset{compat=1.5}\n\n\\begin{document}\n\n\\begin{tikzpicture}\n\\begin{axis}\n[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\nheight=5cm,\nwidth=\\textwidth,\naxis x line=middle,\naxis y line= none,\n%    ylabel={Signal Spectrum of $x(t)$},\nevery axis x label={at={(current axis.left of origin)},anchor=south west},\n%    every axis y label={at={(current axis.above origin)},anchor= north west},\n%every axis plot post/.style={mark options={fill=black}},\n% every axis plot/.append style={ultra thick},\nxlabel={$f$},\n%    ylabel={$\\boldsymbol{x[n]}$},\nxtick={0,1,...,11},\nymax=150,\nxmax=11,\nxmin=-1,\n]%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\\addplot+[ycomb,black,thick] table [x={n}, y={xn}] {data.dat};\n\\addplot+[ycomb,black] plot coordinates\n{(0,1) (1,2) (2,4) (3,8) (4,16) (5,32) (6,64) (7,128) (8,0) (9,0) (10,0)};\n\\node[label={{$1$}}] at (axis cs:0.25,1) {};\n\\node[label={{$a^{1}$}}] at (axis cs:1,2) {};\n\\node[label={{$a^{2}$}}] at (axis cs:2,3) {};\n\\node[label={{$a^{3}$}}] at (axis cs:3,6) {};\n\\node[label={{$a^{4}$}}] at (axis cs:4,10) {};\n\\node[label={{$a^{5}$}}] at (axis cs:5,30) {};\n\\node[label={{$a^{6}$}}] at (axis cs:6,60) {};\n\\node[label={{$a^{7}$}}] at (axis cs:7,110) {};\n\\node[label={{$0$}}] at (axis cs:8,0) {};\n\\node[label={{$0$}}] at (axis cs:9,0) {};\n\\node[label={{$0$}}] at (axis cs:10,0) {};\n\\end{axis}\n\\end{tikzpicture}\n\n\\end{document}"}},"/DSP/e514_c2":{"title":"Description","data":{"":"This LaTeX code generates a plot of a discrete-time signal using the TikZ and pgfplots packages. The signal is plotted on a two-dimensional axis with frequency () on the horizontal axis and amplitude on the vertical axis.The plot is defined inside a tikzpicture environment, which is embedded within an axis environment defined by pgfplots. Several options are specified for the axis environment, including the height, width, axis labels, tick marks, and ranges for the horizontal and vertical axes.The signal is represented by a series of discrete samples plotted as vertical lines using the \\addplot command. The signal values are specified as coordinates in the (x,y) format, where x is the frequency and y is the amplitude. The \\node command is used to place labels at specific points on the plot to indicate the value of each sample.Overall, this code generates a simple plot of a discrete-time signal with eight non-zero samples and one negative sample at a specific frequency.","keywords#Keywords":"tikz, pgfplots, amsmath, filecontents, standalone, axis, height, width, axis x line, axis y line, every axis x label, xlabel, xtick, ymin, ymax, xmax, xmin, addplot, ycomb, plot coordinates, node, label.","source-code#Source Code":"\\documentclass[border={10pt}]{standalone}\n\\usepackage{tikz,pgfplots,filecontents,amsmath}\n\\pgfplotsset{compat=1.5}\n\n\\begin{document}\n\n\\begin{tikzpicture}\n\\begin{axis}\n[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\nheight=5cm,\nwidth=\\textwidth,\naxis x line=middle,\naxis y line= none,\n%    ylabel={Signal Spectrum of $x(t)$},\nevery axis x label={at={(current axis.left of origin)},anchor=south west},\n%    every axis y label={at={(current axis.above origin)},anchor= north west},\n%every axis plot post/.style={mark options={fill=black}},\n% every axis plot/.append style={ultra thick},\nxlabel={$f$},\n%    ylabel={$\\boldsymbol{x[n]}$},\nxtick={0,1,...,7,9,10,11},\nymin=-40,\nymax=10,\nxmax=11,\nxmin=-1,\n]%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\\addplot+[ycomb,black,thick] table [x={n}, y={xn}] {data.dat};\n\\addplot+[ycomb,black] plot coordinates\n{(0,1) (1,0) (2,0) (3,0) (4,0) (5,0) (6,0) (7,0) (8,-32) (9,0) (10,0)};\n\\node[label={{$1$}}] at (axis cs:0,0) {};\n\\node[label={{$0$}}] at (axis cs:1,0) {};\n\\node[label={{$0$}}] at (axis cs:2,0) {};\n\\node[label={{$0$}}] at (axis cs:3,0) {};\n\\node[label={{$0$}}] at (axis cs:4,0) {};\n\\node[label={{$0$}}] at (axis cs:5,0) {};\n\\node[label={{$0$}}] at (axis cs:6,0) {};\n\\node[label={{$0$}}] at (axis cs:7,0) {};\n\\node[label={{$-a^{8}$}}] at (axis cs:8,-45) {};\n\\node[label={{$0$}}] at (axis cs:9,0) {};\n\\node[label={{$0$}}] at (axis cs:10,0) {};\n\\end{axis}\n\\end{tikzpicture}\n\n\\end{document}"}},"/DVP/latex-diagram":{"title":"Description","data":{"":"This code generates a TikZ plot with a 2D coordinate system using the pgfplots package. The plot shows two vectors, v1 and v2, starting at the origin, and a regular polygon with six vertices centered at the origin. The plot also has several horizontal lines with markers at specific x-coordinates.The plot is generated inside a tikzpicture environment, and the coordinate system is defined using the axis environment. The options specified for this environment include the axis lines, x-axis and y-axis limits, and labels for the x and y axes.Two vectors, v1 and v2, are then plotted using the addplot function. The coordinates for each vector are specified using the coordinates function, and the vectors are labeled using the node function.The polygon is plotted using the addplot function and the table function, with coordinates for the polygon vertices specified in the table.Finally, several horizontal lines are plotted using the addplot function, with markers at specific x-coordinates specified using the pgfplotsinvokeforeach function. The markers are circular dots and the x-coordinates are specified using a list of values generated by the function.","keywords#Keywords":"This code generates a TikZ plot with a 2D coordinate system using the pgfplots package. The plot shows two vectors, v1 and v2, starting at the origin, and a regular polygon with six vertices centered at the origin. The plot also has several horizontal lines with markers at specific x-coordinates.The plot is generated inside a tikzpicture environment, and the coordinate system is defined using the axis environment. The options specified for this environment include the axis lines, x-axis and y-axis limits, and labels for the x and y axes.Two vectors, v1 and v2, are then plotted using the addplot function. The coordinates for each vector are specified using the coordinates function, and the vectors are labeled using the node function.The polygon is plotted using the addplot function and the table function, with coordinates for the polygon vertices specified in the table.Finally, several horizontal lines are plotted using the addplot function, with markers at specific x-coordinates specified using the pgfplotsinvokeforeach function. The markers are circular dots and the x-coordinates are specified using a list of values generated by the function.","source-code#Source Code":"\\documentclass[tikz,border=3.14mm]{standalone}\n\\usepackage{pgfplots}\n\\pgfplotsset{compat=1.16}\n\\pgfplotsset{width=5.5in,compat=1.10}\n\\begin{document}\n\\begin{tikzpicture}\n\\begin{axis}[axis lines=middle,\nxmin=-6, xmax=6,\nymin=-6,ymax=6,\nxlabel = $x$,\nylabel = $y$]\n\\addplot [->, thick,  red]\ncoordinates { (0,0) (sqrt(3),1)} node[above right,pos=1] {$v_1$};\n\\addplot [->, thick,  blue]\ncoordinates { (0,0) (0,2)} node[above right,pos=1] {$v_2$};\n\n\\addplot+ [mark=none,black] table {\n0.5 1\n-0.5 1\n-1 0\n-0.5 -1\n0.5 -1\n1 0\n0.5 1\n};\n\\pgfplotsinvokeforeach{-6,-4,...,6}{\n\\addplot[only marks, mark=o, samples\nat={-5.19,-3.46,-1.73,0,1.73,3.46,5.19}]{-0.55*x + #1};}\n\\end{axis}\n\\end{tikzpicture}\n\\end{document}"}},"/DVP/lattice-sampling":{"title":"Description","data":{"":"This is a LaTeX code for drawing a TikZ picture. The code defines several styles for nodes with different shapes and fills, and sets the distance between nodes. Then, it creates a grid of nodes with alternating fills, based on the specified number of vertices. Finally, it draws arrows with labels between some of the nodes using relative positioning. Additionally, it creates two extra nodes and draws an arrow with a label between them.","keywords#Keywords":"latex, tikz, positioning, calc, node, distance, style, circle, draw, fill, minimum, size, foreach, ifnum, ifresult, node, at, west, east, south, north, above, below, left, right, latex-latex, label, midway.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning, calc}\n\\begin{document}\n\\begin{tikzpicture}[align=center,node distance=0.5cm]\n\\tikzset{\ndarkstyle/.style={circle,draw,fill=gray!40,minimum size=20},\nfilled/.style={circle,draw,fill=gray!60, minimum size=5},\nwhite/.style={circle,draw, minimum size=5,,xshift=-0.5cm},\n}\n% number of vertices\n\\def \\n {5}\n\\def \\xshift{2cm}\n\\foreach \\x in {0,...,\\n}\n{   \\foreach \\y in {0,...,\\n}\n{   \\pgfmathtruncatemacro{\\nodelabel}{\\x+\\y*6+1}\n%\\pgfmathtruncatemacro{\\row}{Mod(\\x,2)}\n\\pgfmathparse{Mod(\\y,2)==0?1:0}\n\\ifnum\\pgfmathresult>0\n\\node[filled] (\\nodelabel) at (0.75*\\x,-0.75*\\y) {};\n\\else\n\\node[white] (\\nodelabel) at (0.75*\\x,-0.75*\\y) {};\n\\fi\n}\n}\n% \\draw[latex-latex] (19.west) -- ++ (25.west) node[midway]{label};\n\\draw [latex-latex] ($(19.west) + (-0.25cm, 0)$) -- ($(31.west) + (-0.25cm, 0)$) node[midway, fill=white]{$2\\Delta_y$};\n\\draw [latex-latex] ($(31.south) + (0cm, -0.25cm)$) -- ($(32.south) + (0cm, -0.25cm)$) node[midway, below, yshift=-0.1cm, fill=white]{$\\Delta_x$};\n% Add nodes for ts\n% \\draw[latex-latex] ($(7.south) + (-0.25cm, -0.25cm)$) -- ($(1.south) + (-0.25cm, -0.25cm)$) node[midway, below, yshift=-0.1cm, fill=white]{$\\Delta_x$};\n\n\\node[filled, left = of 1, xshift =-0.25cm] (aa) {};\n\\node[white, left = of 7, xshift =-0.15cm] (ab) {};\n\\draw [latex-latex] ($(ab) + (0cm, 0cm)$) -- ($(aa) + (0cm, 0cm)$) node[below, yshift=-0.2cm]{$\\frac{\\Delta_t}{2}$};\n\\end{tikzpicture}\n\\end{document}"}},"/DVP/lbp":{"title":"Description","data":{"":"This LaTeX code defines a document with two TikZ pictures side by side, each enclosed in a colored background rectangle. The TikZ pictures depict two sets of circular nodes arranged in specific patterns, with some nodes filled with green color and others unfilled. The first TikZ picture represents uniform patterns, where each circle in a specific pattern has the same number of filled nodes, and the second picture represents non-uniform patterns where each circle in a specific pattern has a different number of filled nodes. The pattern of nodes in each circle is defined using a custom command pics/pattern that takes arguments to specify the type of node and its position in the pattern. The circles in each pattern are labelled using letters a, b, c, d, and e. The code also includes some text labels to describe the patterns and their properties.","keywords#Keywords":"latex, tikz, xcolor, positioning, backgrounds, circle, draw, fill, minimum size, pics, pattern, node, scale, text width, align.","source-code#Source Code":"\\documentclass[varwidth]{standalone}\n\n\\usepackage{tikz}\n\\usepackage{xcolor}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{backgrounds}\n\\tikzset{\n% styling for filled node\nfilled/.style={circle,draw,fill=green!60, minimum size=5},\n% styling for white nodes\nempty/.style={circle,draw, minimum size=5},\n% diagram with P = 4\npics/pattern/.style args={#1/#2/#3/#4/#5}{\ncode={\n\\node[#1] at (0, 1) (#5-1) {};\n\\node[#2] at (1, 0) (#5-2) {};\n\\node[#3] at (0, -1) (#5-3) {};\n\\node[#4] at (-1, 0) (#5-4) {};\n}},\npics/pattern/.default=empty/empty/empty/empty/a\n}\n\\begin{document}\n\\begin{tikzpicture}[background rectangle/.style={fill=blue!15}, show background rectangle]\n% Uniform LBP, and draw box\n% U = 0 Row\n\\node[] at (-2,0) {U=0};\n\\path (0,0) pic[scale=1.0] {pattern};\n\\path (+3.5,0) pic[scale=1.0] {pattern=filled/filled/filled/filled/a};\n% U = 2 Row\n\\node[] at (-2,-3) {U=2};\n\\path (0,-3) pic[scale=1.0] {pattern=filled/empty/empty/empty/b};\n\\path (+3.5,-3) pic[scale=1.0] {pattern=filled/filled/empty/empty/c};\n\\path (+7.0,-3) pic[scale=1.0] {pattern=filled/filled/filled/empty/d};\n\\node[text width= 2cm] at (7.0, 1) {\\LARGE{Uniform \\hfill \\break Patterns}};\n\\end{tikzpicture}\n%\n\\begin{tikzpicture}[background rectangle/.style={fill=red!15}, show background rectangle]\n% Uniform LBP, and draw box\n% U = 4 Row. i think\n\\node[] at (-2,0) {U=4};\n\\path (0,0) pic[scale=1.0] {pattern=empty/filled/empty/filled/e};\n\\path (+3.5,0) pic[scale=1.0] {pattern=filled/empty/filled/empty/f};\n\\node[text width= 4cm, align=right] at (6, 1) {\\hfill \\LARGE{Non-Uniform} \\break \\hfill \\break \\LARGE{Patterns}};\n\\end{tikzpicture}\n\\end{document}"}},"/DVP/periodically-matrix":{"title":"Description","data":{"":"This code generates a simple 2D graph of a straight line and some rectangles using the TikZ package within the pgfplots environment.First, the document class is set to standalone and the necessary packages are loaded. The pgfplots package is set to the latest version using the 'compat' option.The TikZ environment is initiated with the 'tikzpicture' command. Within the environment, a 2D graph is created using the 'axis' environment provided by pgfplots. The 'axis lines' option is set to 'middle' to display the axes crossing at the center of the graph.An equation for a straight line is plotted using the 'addplot' command, with white color and a line width of 1, covering the domain from -5 to 5.Several rectangles are drawn using the 'draw' command. Each rectangle is defined by its lower-left and upper-right coordinates in the format of (x1,y1) rectangle (x2,y2). The coordinates are relative to the axes and are placed at (-1,-1) to (1,1), (1,-1) to (3,1), (-1,-1) to (-3,1), (-1,1) to (1,3), and (-1,-1) to (1,-3).Finally, the TikZ environment is closed with the 'end' command. The output of the code is a simple graph with a straight line and five rectangles.","keywords#Keywords":"pgfplots, axis, plot, domain, rectangle, draw.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{pgfplots}\n\\pgfplotsset{compat=newest}\n\n\\begin{document}\n\n\\begin{tikzpicture}\n\\begin{axis}[\naxis lines=middle\n]\n\\addplot [white, line width = 1, smooth, domain=-5:5] {x};\n\\draw (-1,-1) rectangle (1,1);\n\\draw (1,-1) rectangle (3,1);\n\\draw (-1,-1) rectangle (-3,1);\n\\draw (-1,1) rectangle (1,3);\n\\draw (-1,-1) rectangle (1,-3);\n\\end{axis}\n\\end{tikzpicture}\n\n\n\\end{document}"}},"/DVP/rectangular-wave":{"title":"Description","data":{"":"This code generates a plot of the rectangular function with given parameters a and b. It uses the standalone document class and loads the pgfplots package for plotting.The plot is defined within the tikzpicture environment and is created using the axis environment with various options such as width, height, xticklabels, ymax, and xmax. The x and y axis lines are drawn using -stealth style and the title of the plot is set as \"Rectangular Function\".The rectangular function is plotted using the \\addplot command with the const plot option which connects the given coordinates with straight lines. The function is defined by a set of coordinates given as an argument to the command. The xlabel and ylabel are also defined and positioned near the ticks.","keywords#Keywords":"pgfplots, tikzpicture, axis, rectangular function, plot, coordinates.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{pgfplots}\n\\begin{document}\n\\begin{tikzpicture}\n\\begin{axis}[\nwidth=10cm,\nheight=4cm,\nx axis line style={-stealth},\ny axis line style={-stealth},\ntitle={Rectangular Function},\nxticklabels={0,,,a,,b},\nymax = 1.5,xmax=3,\naxis lines*=center,\nytick={0.5,1},\nxlabel={x $\\rightarrow$},\nylabel={$R_x(a,b)$},\nxlabel near ticks,\nylabel near ticks]\n\\addplot+[thick,mark=none,const plot]\ncoordinates\n{(0,0) (1,0) (1,1) (2,0) (3,0) (4,1) (5,0) (6,1) (7,0)};\n\\end{axis}\n\\end{tikzpicture}\n\n\\end{document}"}},"/ElectroMag/3DCylinder":{"title":"Description","data":{"":"The code defines a 3D diagram of a point in cylindrical coordinates with a reference frame. It uses the TikZ and tikz-3dplot packages to generate the diagram.The \\tdplotsetmaincoords command sets the main coordinate system and the view angle of the diagram.The tikzstyle command sets the font size for all nodes in the diagram.The \\draw commands draw the x, y, and z axes with arrows, a cylinder at the origin, and a cylinder at z=4 with an overlapping area to show the volume.The \\filldraw commands fill the overlapping area with a nearly transparent orange color and fill the bottom face of the top cylinder with a nearly transparent blue color.The \\draw commands also draw the r=r1 surface and the z=z1 and phi=phi1 planes, and label them accordingly.The \\node command labels the point P1 with its cylindrical coordinates.The \\draw commands also draw the unit vectors for the cylindrical coordinate system and label them accordingly.Finally, the \\draw command draws the angle phi1 and the radial distance r1, and labels them accordingly.","keywords#Keywords":"tikz, tikz-3dplot, 3D, coordinates, axis, circle, filldraw, node, arrow, plane, phi, r, z.","source-code#Source Code":"\\documentclass{article}\n\\usepackage{tikz,tikz-3dplot}\n\\begin{document}\n\n\\begin{figure}\n\\centering\n\\tdplotsetmaincoords{70}{120}\n\\begin{tikzpicture}[tdplot_main_coords][scale=0.75]\n\\tikzstyle{every node}=[font=\\small]\n\\draw[thick,-latex] (0,0,0) -- (6,0,0) node[anchor=north east]{$x$};\n\\draw[thick,-latex] (0,0,0) -- (0,6,0) node[anchor=north west]{$y$};\n\\draw[thick,-latex] (0,0,0) -- (0,0,6) node[anchor=south]{$z$};\n\\draw [thick](0,0,0) circle (3);\n\\draw [thick](0,0,4) circle (3);\n\\draw [thick](1.9,-2.35,0) -- (1.9,-2.35,4) node[midway, left]{$r=r_1$ surface};\n\\draw [thick](-1.9,2.35,0) -- (-1.9,2.35,4);\n\\filldraw[fill=orange, nearly transparent] (-4,-4,4) -- (4,-4,4) --  (4,5,4) -- (-4,5,4) -- (-4,-4,4);\n\\filldraw[fill=blue, nearly transparent] (0,0,4) -- (5.2,6,4) --  (5.2,6,0) -- (0,0,0) -- (0,0,4);\n\\filldraw [color=blue](2,2.25,4) circle (0.075cm) ;\n\\draw (-4,5,4) node[anchor=south]{$z=z_1$ plane};\n\\draw (5.2,6,0) node[anchor=south west]{$\\phi=\\phi_1$ plane};\n\\node at (1.8,1,4)  { $P_1(r_1,\\phi_1,z_1)$};\n\\draw[ultra thick,-latex](2,2.25,4) -- (3,3.45,4) node[anchor=north] {$\\mathbf{a}_r$};\n\\draw[ultra thick,-latex](2,2.25,4) -- (1,2.5,4) node[anchor=north west] {$\\mathbf{a}_\\phi$};\n\\draw[ultra thick,-latex](2,2.25,4) -- (2,2.25,4.75) node[anchor=north west] {$\\mathbf{a}_z$};\n\\draw [thick,->](4,0,0) arc (0:45:4 and 4.5);\n\\draw (3.6,2,0) node[anchor=north] {$\\phi_1$};\n\\draw[ultra thick,-latex](0,0,0) -- (2,2.35,0);\n\\draw (1,1,0) node[anchor=north] {$r_1$};\n\\draw [ultra thick] (2,2.25,4)--(1.95,2.25,0);\n\n\\draw[ultra thick](0.1,0,4) -- (-0.1,0,4) node[anchor=south west] {$z_1$};\n\\end{tikzpicture}\n\\end{figure}\n\\end{document}"}},"/ElectroMag/BHCurve":{"title":"Description","data":{"":"This LaTeX code defines a standalone document with a single tikzpicture environment that creates a 2D plot of a sigmoid function. The plot is created using the pgfplots package, and the fillbetween library is used to fill the area between two plots with a red!20 color.The axis environment is used to set the properties of the plot, including the axis limits, labels, ticks, and line styles. The addplot command is used to add several plots to the axis.Two of the added plots are dashed lines that span the entire x axis and have a constant y value of 2.5 and -2.5 respectively. The other two added plots are the sigmoid function, which is defined using mathematical expressions for x and y, and named paths A and B. The fill between command fills the area between the paths A and B with the specified color.","keywords#Keywords":"pgfplots, fillbetween, tikzpicture, axis, plot, addplot, dashed, red, red!20, name path, samples, xlabel, ylabel, xmin, xmax, ymin, ymax, axis x line, axis y line, ticks.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{pgfplots}\n\\usepgfplotslibrary{fillbetween}\n\n\\begin{document}\n\\begin{tikzpicture}\n\\begin{axis}[very thick,\nsamples = 100,\nxlabel = H,\nylabel = B,\nxmin = -7,\nxmax = 7,\nymin = -4,\nymax = 4,\naxis x line = middle,\naxis y line = middle,\nticks = none]\n\\addplot[dashed] plot (\\x, 2.5);\n\\addplot[dashed] plot (\\x,-2.5);\n\\addplot[red, name path=A] plot (\\x, {5/(1 + exp(-1.7*\\x+1.5))-2.5});\n\\addplot[red, name path=B] plot (\\x, {5/(1 + exp(-1.7*\\x-1.5))-2.5});\n\\addplot[red!20] fill between[of=A and B];\n\\end{axis}\n\\end{tikzpicture}\n\\end{document}"}},"/ElectroMag/DEHG":{"title":"Description","data":{"":"This is a LaTeX code for a diagram using the TikZ package. The document class is set to article and the geometry package is used to set the paper size and margins. The bm and eucal packages are also used for mathematical symbols and fonts.The diagram shows four balls labeled B, D, E, and H which represent physical concepts in electromagnetism. Each ball is defined as a circle with shading and a minimum size. The TikZ library decorations.markings is used to add labels to the connections between the balls.There are several custom macros defined in the code, such as \\conline and \\connectpos, which are used to draw connections between the balls with specific styles and labels. The code also uses the TikZ library calc to calculate the positions of some of the balls.Overall, the code is defining a diagram that visually represents the relationships between different concepts in electromagnetism.","keywords#Keywords":"Keywords: TikZ, geometry, bm, eucal, ball, circle, shading, minimum size, decorations.markings, label, blue, red, postaction, transform shape, decoration, markings, mark, color, line width, line cap, round, node, execute, begin scope, end scope, layer, zlevel, main, conline, connectpos, connection, calc, centering, scope.","source-code#Source Code":"\\documentclass{article}\n\\usepackage[paperwidth=55mm,paperheight=55mm,margin=1mm]{geometry}\n\\usepackage{bm}\n\\usepackage{eucal}\n\\usepackage{tikz}\n\\usetikzlibrary{calc}\n\\usetikzlibrary{decorations.markings}\n\\pagestyle{empty}\n\\parindent=0pt\n\\begin{document}\n\\pgfdeclarelayer{-1}\n\\pgfsetlayers{-1,main}\n\\tikzset{\nzlevel/.style={%\nexecute at begin scope={\\pgfonlayer{#1}},\nexecute at end scope={\\endpgfonlayer}\n},\n}\n\\centering\n\\begin{tikzpicture}[\nball/.style={circle, shading=ball, ball color=black!15, minimum size=9mm},\nconline/.style={line width=#1, line cap=round},\nlabel/.style 2 args={\npostaction={decorate,transform shape,decoration={\nmarkings, mark=at position #1 with \\node {\\scriptsize\\color{black}#2};\n}}\n},\nblue/.style={color=blue!60},\nred/.style={color=red!50},\nredl/.style={color=red!20},\n]\n\\def\\conline<#1>[#2] (#3) (#4);{%\n\\draw[conline=#1, #2] (#3) -- (#4);\n}\n\\def\\conwhiline (#1) (#2);{%\n\\conline<10pt>[color=white] (#1) (#2);\n}\n\\def\\connectpos[#1] (#2) (#3) #4 #5;{%\n\\conline<8pt>[color=black] (#2) (#3);\n\\conline<7pt>[#1, label={#4}{#5}] (#2) (#3);\n}\n\\def\\connection[#1] (#2) (#3) #4;{%\n\\connectpos[#1] (#2) (#3) 0.5 {#4};\n}\n\\node (B) [ball]                     {$\\bm{B}$};\n\\node (D) [ball] at ($(B)+(95:4.4)$) {$\\mathcal{D}$};\n\n\\begin{scope}[zlevel=-1]\n\\node (H) [ball] at ($(B)+(60:2.5)$) {$\\mathcal{H}$};\n\\node (E) [ball] at ($(B)+(155:3)$)  {$\\bm{E}$};\n\\connectpos[blue] (E)     (H.180) 0.35 {1-forms};\n\\conwhiline       (B)     (D);\n\\connection[red]  (E.-45) (B)          {field strength};\n\\connection[redl] (B)     (H.-115)     {magnetic};\n\\end{scope}\n\n\\connection[red]  (D.-40) (H)          {excitation};\n\\connectpos[blue] (D)     (B)     0.35 {2-forms};\n\\connection[redl] (E.60)  (D)          {electric};\n\\end{tikzpicture}\n\\end{document}"}},"/ElectroMag/Exampl1Circuit":{"title":"Description","data":{"":"This is a LaTeX document that includes several packages such as circuitikz, graphicx, mathrsfs, latexsym, amssymb, and amsmath. The code creates an electrical circuit diagram using the circuitikz package. The circuit consists of a voltage source labeled with the symbol for magnetic flux density () connected to a series of resistors labeled with different reluctances (, , , and ). The resistors are colored with different colors such as purple, blue, and red to differentiate them. There is a current flowing through the circuit represented by the symbol for magnetic flux (). The code also includes a circle with an arrow (in red color) to indicate the direction of rotation of the magnetic field ().","keywords#Keywords":"circuit, circuitikz, voltage source, resistance, rotor, stator, air gap, reluctance, colors, red, purple, blue, phi, symbol.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{circuitikz}\n\\usepackage{graphicx}\n\\usepackage{mathrsfs}\n\\usepackage{latexsym,amssymb,amsmath}\n\\newcommand{\\equal}{=}\n\\begin{document}\n\n\\begin{circuitikz}[american voltages,scale =1]\n\\draw (0,8) to [voltage source,l_=$\\mathscr{F}(\\equal NI)$] (0,0) -- (4,0)\n%node[anchor=south] {$v_L$}\nto [R, l_= $R_{a2} \\quad Air \\ Gap \\ 2 \\ Reluctance $,color=purple] (4,2)\nto [R, l_= $R_{r} \\quad Rotor \\ Reluctance $,color=blue] (4,4)\nto [R,i^<=$\\phi$, l_= $R_{a1} \\quad Air \\ Gap \\ 1 \\ Reluctance $,color=purple] (4,6)\nto [R, l_= $R_{s} \\quad Stator \\ Reluctance $,color=red] (4,8)\n(4,8) -- (0,8)\n%(2,3) -- (4,3) to [L=$L$, i>^=$i_L(t)$, v=$v_L(t)$] (4,0) -- (0,0)\n(2,4) node[scale=4]{$\\textcolor{red}{\\circlearrowright}$}\n(2,4) node[scale=2]{$\\textcolor{red}{\\mathbf{\\phi}}$};\n;\\end{circuitikz}\n\\end{document}"}},"/ElectroMag/Exampl2Circuit":{"title":"Description","data":{"":"This code is a LaTeX document that uses several packages, including circuitikz, graphicx, mathrsfs, latexsym, amssymb, and amsmath. It defines a new command \\equal that is a shorthand for the equals sign.The document contains a circuitikz environment that draws an electrical circuit with three resistors and a voltage source. The circuit starts at the top with the voltage source labeled as . The circuit then goes down to resistor 1, which is labeled as  and has a red color. The circuit continues to resistor 2, which is labeled as  and has a blue color. The circuit then goes to resistor 3, which is labeled as  and has a purple color. Resistor 3 is connected to the ground.Each resistor has a label for the current flowing through it, which is denoted by a phi symbol with a subscript that matches the resistor number. There are also numbers and colors placed next to each resistor for identification purposes.At the end of the document, there is a label for the figure with the name \"fig:q1fig\".","keywords#Keywords":"circuit, circuitikz, voltage source, resistor, inductor, node, color.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage[american]{circuitikz}\n\\usepackage{graphicx}\n\\usepackage{mathrsfs}\n\\usepackage{latexsym,amssymb,amsmath}\n\\newcommand{\\equal}{=}\n\\begin{document}\n\\begin{circuitikz}\n\\draw (0,3) to [V,l_=$\\mathscr{F}\\equal NI$] (0,0)\n(0,3) node[anchor=south] {$\\textcolor{red}{1}$} to [R,i^>=$\\phi_1$, l^=$\\mathscr{R}_1$,*-,color=red] (3,3)\nnode[anchor=south] {$\\textcolor{blue}{2}$}\nto [R, l_= $\\mathscr{R}_2$, *-, i>^=$\\phi_2$,color=blue] (3,0)\nnode[anchor=north] {$\\textcolor{purple}{3}$}\n%(3,3) -- (6,3) to [L=$L$, i>^=$i_L(t)$, v=$v_L(t)$] (6,0) -- (0,0)\n(3,3) -- (6,3) to [R=$L$,l_=$\\mathscr{R}_3$, i>^=$\\phi_3$, *- ,color=purple] (6,0) -- (0,0)\n(6,0) -- (0,0)\n;\\end{circuitikz}\n\\label{fig:q1fig}\n\\end{document}"}},"/ElectroMag/PrimarySide":{"title":"Description","data":{"":"The code is a LaTeX document that uses the standalone document class to create a standalone image of an electrical circuit diagram. The document loads several packages, including circuitikz for drawing circuit diagrams, graphicx for including graphics, mathrsfs for special math symbols, and amssymb, amsmath, and latexsym for mathematical typesetting.The circuit diagram is defined within a circuitikz environment, and consists of several components including resistors, inductors, transformers, and a load. The diagram includes labels for the various components and arrows indicating the direction of current flow.The code also defines several coordinate points and nodes, which are used to place labels on the diagram and draw arrows to indicate voltage drops.Overall, the code generates a detailed and labeled electrical circuit diagram that can be used in various documents, presentations, or reports.","keywords#Keywords":"tikzpicture, node, draw, circle, right, below, edge, label, style","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage[american]{circuitikz}\n\\usetikzlibrary{calc,arrows}\n\\usepackage{graphicx}\n\\usepackage{mathrsfs}\n\\usepackage{latexsym,amssymb,amsmath}\n\\newcommand{\\equal}{=}\n\\begin{document}\n\\begin{circuitikz}\n\\draw (0,6) to [open,l=$v_1$,o-o] (0,0)\n(0,6) to  [R,i>=$i_1$, l^= $R_{1}$, color=red] (2,6)\n(2,6) to  [L,i>=$i_1$,l^= $L_{l1}$, color=blue] (4,6)\n(4,6) -- (6,6)\n(6,6) to [short,i=$i^\\prime_e$,*-*] (6,4)\n(6,4) -- (5,4)\n(6,4) -- (7,4)\n(5,4) to [R,i^>=$i^\\prime_c$, l_= $R^{\\prime}_c\\equal 124K \\Omega$, color=red] (5,0)\n(7,4) to [L,i^<=$i^\\prime_m$, l^= $L^{\\prime}_m \\equal 5.4 H$, color=blue] (7,0)\n(6,6) to [short,i=$i^\\prime_2 \\equal i_2 / k$] (10,6)\n(0,0) -- (10,0)\n(11,6) node [yscale =2.857,transformer core](T){}  % reminded by @PaulGessler, thanks.\n(T.A1) node[above] {$N_1$}\n(T.A2) node[below] {primary}\n(T.B1) node[above] {$N_2$}\n(T.B2) node[below] {secondary}\n(T.base) node{K}\n\n(T.B1) -- (12,6)\n(14,6) to [L,i^<=$i_2$, l_= $L_{l2}$, color=blue] (12,6)\n(14,6) to [R, l^= $R_{2}$, color=red] (16,6)\n(16,6) to [generic, l_=${Load}$](16,0)\n(T.B2) -- (16,0)\n%\t    (4,0) -- (0,0)\n%\t     (4,4) to [R,i^>=$\\phi_2$, l^= $\\mathscr{R}_{2}$,v_>=$\\mathscr{F}_2$, color=blue] (4,0)\n%\t\t(4,4) to [R,l^= $\\mathscr{R}_{3}$,v_>=$\\mathscr{F}_3$, color=red] (8,4)\n%\t\t(8,4) to [R,i^>=$\\phi_3$, l^= $\\mathscr{R}_{g}$,v_>=$\\mathscr{F}_g$, color=cyan] (8,0)\n%\t\t(8,0) to [R, l^= $\\mathscr{R}_{4}$,v_>=$\\mathscr{F}_4$, color=green] (4,0);\n%\t\t\\draw[thin, <-, >=triangle 45] (6,2) node{$\\phi_3$}   ++(-90:1) arc (-90:100:1);\n%\t\t\\draw[thin, <-, >=triangle 45] (2,2) node{$\\phi_2$}   ++(-90:1) arc (-90:100:1);\n%\t\t\\node (phi) at (4.25,0.5) {$\\phi_2$};\n%\t\t\\draw[-stealth]  (4.25,2.5) to [bend left=90] (phi);\n;\n\\coordinate (V1up) at (0.5,6);\n\\coordinate (V1mid1) at (0.5,3.25);\n\\coordinate (V1mid2) at (0.5,2.75);\n\\coordinate (V1down) at (0.5,0);\n\\node (e) at (2.5,3) {$e_{11}$};\n\\node (eend) at (9.5,3) {$e_{1}$};\n\\node (e2) at (12,3) {$e_{2}$};\n\\node (e3) at (14,3) {$e_{22}$};\n\\draw[->,black,very thick] (e) -- ($(e)!.85!(2.5,6)$); % 1 cm before end terminal\n\\draw[->,black,very thick] (e) -- ($(e)!.85!(2.5,0)$); % 1 cm before start terminal\n\\draw[->,black,very thick] (eend) -- ($(eend)!.85!(9.5,6)$); % 1 cm before end terminal\n\\draw[->,black,very thick] (eend) -- ($(eend)!.85!(9.5,0)$); % 1 cm before start terminal\n\\draw[->,black,very thick] (e2) -- ($(e2)!.85!(12,6)$); % 1 cm before end terminal\n\\draw[->,black,very thick] (e2) -- ($(e2)!.85!(12,0)$); % 1 cm before start terminal\n\\draw[->,black,very thick] (e3) -- ($(e3)!.85!(14,6)$); % 1 cm before end terminal\n\\draw[->,black,very thick] (e3) -- ($(e3)!.85!(14,0)$); % 1 cm before start terminal\n\\draw[->,black,very thick] (V1mid2) -- ($(V1mid2)!.85!(V1down)$); % 1 cm before end terminal\n\\draw[->,black,very thick] (V1mid1) -- ($(V1mid1)!.85!(V1up)$); % 1 cm before start terminal\n\\end{circuitikz}\n\\label{fig:q1fig}\n\\end{document}"}},"/ElectroMag/Q1Circuit":{"title":"Description","data":{"":"This is a LaTeX document which includes various packages and defines a new command. The packages included are circuitikz, graphicx, mathrsfs, latexsym, amssymb, and amsmath. The defined command is \\equal, which outputs the equals sign =.The document creates a circuit diagram using the circuitikz package, which includes a voltage source and four resistors connected in a specific pattern. The labels on the resistors are formatted using the math script font (\\mathscr), and the colors of the resistors are specified. The circuit diagram is then labeled with the symbol phi using the arc command, and a scale of 2 is specified for the text. Finally, the document sets a label for the circuit diagram using the \\label command.","keywords#Keywords":"circuitikz, graphicx, mathrsfs, latexsym, amssymb, amsmath, voltage source, reluctance, node, arc","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage[american]{circuitikz}\n\\usepackage{graphicx}\n\\usepackage{mathrsfs}\n\\usepackage{latexsym,amssymb,amsmath}\n\n\\newcommand{\\equal}{=}\n\\begin{document}\n\\begin{circuitikz}\n\\draw (0,3) to [V,l_=$\\mathscr{F}\\equal NI$] (0,0) \t% \"Voltage source for magentic circuit\"\n(0,3) to [R,l^=$\\mathscr{R}_{1,thick}$, v_>=$\\mathscr{F}_1$, color=red] (0,6)\t%Reluctance thick side\n(0,6) to [R, l^=$\\mathscr{R}_{2,thin}$,v_>=$\\mathscr{F}_2$, color=blue] (3,6)   %Reluctance thin side\n(3,6) -- (3,3)\t\t% Connection R2, R3\n(3,3) to [R, l^=$\\mathscr{R}_{3,thick}$,v_>=$\\mathscr{F}_3$, color=red] (3,0)   %Reluctance thick side\n(3,0) to [R, l^= $\\mathscr{R}_{4,thin}$,v_>=$\\mathscr{F}_4$, color=blue] (0,0); %Reluctance thin side\n\n\\draw[thin, <-, >=triangle 45] (1.5,3) node[scale=2]{$\\phi$}  ++(-90:1) arc (-90:100:1);\n\\end{circuitikz}\n\\label{fig:q1fig}\n\\end{document}"}},"/ElectroMag/Q2Circuit":{"title":"Description","data":{"":"This code generates an electrical circuit diagram using the circuitikz package. The circuit diagram has three resistors, labeled , , and , and three voltage sources labeled , , and . The resistors and voltage sources are arranged in a circuit such that  is connected to , which is connected to , which is connected to , which is connected to , which is connected to . The circuit is completed by connecting  to  and connecting  to . Additionally, the diagram has two labels for the phase angles,  and , which are connected to the circuit using curved arrows.","keywords#Keywords":"latex, circuitikz, graphicx, mathrsfs, latexsym, amssymb, amsmath, documentclass, newcommand, standalone, draw, V, R, node, color, l, to, bent, equal, phi.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage[american]{circuitikz}\n\\usepackage{graphicx}\n\\usepackage{mathrsfs}\n\\usepackage{latexsym,amssymb,amsmath}\n\\newcommand{\\equal}{=}\n\\begin{document}\n\\begin{circuitikz}\n\\draw (3,4) to [V,l_=$\\mathscr{F}\\equal NI$] (3,2)\n(3,2) to [R,l^=$\\mathscr{R}_{g1}$, v_>=$\\mathscr{F}_1$, color=green] (3,0)\n(3,2) -- (3,0)\n(3,0) -- (0,0)\n(0,4) to [R,l^=$\\mathscr{R}_{g2}$, v_>=$\\mathscr{F}_2$, color=red] (0,0)\n(6,4) to [R, l^=$\\mathscr{R}_{g3}$,v_>=$\\mathscr{F}_3$, color=blue] (6,0)\n(6,0) -- (3,0)\n(0,4) -- (6,4);\n%\t     \\draw[thin, <-, >=triangle 45] (1.5,1.5) node[scale=2]{$\\phi$}   ++(-90:0.5) arc (-90:100:0.5);\n\\node (phi) at (1.25,0.5) {$\\phi_1$};\n\\draw[-stealth]  (1.25,2.5) to [bend left=90] (phi);\n\n\\node (phi) at (4.25,0.5) {$\\phi_2$};\n\\draw[-stealth]  (4.25,2.5) to [bend left=90] (phi);\n\\end{circuitikz}\n%\t\\begin{circuitikz}\n%\t\t\\draw (0,3) to [V,l_=$\\mathscr{F}\\equal NI$] (0,0)\n%\t\t(0,3) to [R,l^=$\\mathscr{R}_{1,thick}$, v_>=$\\mathscr{F}_1$, color=red] (0,6)\n%\t\t(0,6) to [R, l^=$\\mathscr{R}_{2,thin}$,v_>=$\\mathscr{F}_2$, color=blue] (3,6)\n%\t\t(3,6) -- (3,3)\n%\t    (3,3) to [R, l^=$\\mathscr{R}_{3,thick}$,v_>=$\\mathscr{F}_3$, color=red] (3,0)\n%\t     (3,0) to [R, l^= $\\mathscr{R}_{4,thin}$,v_>=$\\mathscr{F}_4$, color=blue] (0,0)\n%\n%\t     (1.5,3) node[scale=4]{${\\circlearrowright}$}\n%\t     (1.5,3) node[scale=2]{${\\mathbf{\\phi}}$};\n%\t\t;\\end{circuitikz}\n%\t\\label{fig:q1fig}\n\\end{document}"}},"/ElectroMag/Q3Circuit":{"title":"Description","data":{"":"This is a LaTeX code that creates an electronic circuit diagram using the circuitikz package. The code defines the document class as standalone and then imports the necessary packages graphicx, mathrsfs, latexsym, amssymb, and amsmath. It also defines a new command \\equal that represents the equals sign.The circuit diagram consists of a voltage source on the left side, two resistors of the same value connected in series in the center, and a third resistor connected in parallel to the first two. The values of the resistors are represented by the variables R_s and R_g. The voltage source is represented by the symbol $\\mathscr{F}\\equal NI$.The resistors are color-coded in green and blue, and the resistor in parallel is color-coded in red. The direction of the current flow in the parallel resistor is represented by the variable $\\phi$. Two labels $\\phi_1$ and $\\phi_2$ are also added to the circuit diagram using node.","keywords#Keywords":"circuitikz, graphicx, mathrsfs, latexsym, amssymb, amsmath, circuit, voltage, resistance, current, arrows.","source-code#Source Code":"%corresponds to question 4, ELEC 370 assignment 1.\n\\documentclass{standalone}\n\\usepackage[american]{circuitikz}\n\\usepackage{graphicx}\n\\usepackage{mathrsfs}\n\\usepackage{latexsym,amssymb,amsmath}\n\\newcommand{\\equal}{=}\n\\begin{document}\n\n\\begin{circuitikz}\n\\draw (0,2) to [V,l_=$\\mathscr{F}\\equal NI$] (1.5,2)\n(0,0) --(0,4)\n(0,0) -- (4,0)\n(0,4) -- (4,4)\n(4,0) to [R,l^=$\\mathscr{R}_{s}$, v_>=$\\mathscr{F}_1$, color=green] (4,2)\n(4,4) to [R,l_=$\\mathscr{R}_{s}$, v^>=$\\mathscr{F}_2$, color=blue] (4,2)\n(1.5,2)  to [R,l_=$\\mathscr{R}_{g}$, v^<=$\\mathscr{F}_2$,i_<=$\\phi$, color=red] (4,2);\n\n\\node (phi) at (2.5,3) {$\\phi_1$};\n\\draw[-stealth]  (1,2.5) to [bend left=90] (phi);\n\n\\node (phi) at (2.5,0.5) {$\\phi_2$};\n\\draw[-stealth]  (1,0.25) to [bend left=90] (phi);\n\\end{circuitikz}\n\\end{document}"}},"/ElectroMag/Q3Circuit2":{"title":"Description","data":{"":"This code creates a circuit diagram using the circuitikz package in LaTeX. The circuit diagram shows a voltage source with label , where N and I are variables, connected in series with a resistor . Another resistor, , is connected in parallel to the voltage source, and the two components are connected in series to a ground node at the bottom of the diagram. The voltage across the resistor  is labeled  and is shown in green, while the voltage across the resistor  is labeled  and is shown in blue. A symbol  is added next to the resistor  and an arrow shows the direction of the current flow.","keywords#Keywords":"circuitikz, graphicx, mathrsfs, latexsym, amssymb, amsmath, current source, resistor, voltage, arrow.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage[american]{circuitikz}\n\\usepackage{graphicx}\n\\usepackage{mathrsfs}\n\\usepackage{latexsym,amssymb,amsmath}\n\\newcommand{\\equal}{=}\n\\begin{document}\n\n\\begin{circuitikz}\n\\draw (0,2) to [V,l_=$\\mathscr{F}\\equal NI$] (0,0)\n(0,0) to [R,l^=$\\mathscr{R}_{g}$, v_<=$\\mathscr{F}_1$, color=green] (4,0)\n(0,2) to [R,l_=$0.5\\mathscr{R}_{s}$, v^>=$\\mathscr{F}_2$, color=blue] (4,2)\n(4,2) -- (4,0);\n\\node (phi) at (3.0,0.25) {$\\phi$};\n\\draw[-stealth]  (3.25,1.75) to [bend left=90] (phi);\n\\end{circuitikz}\n\\end{document}"}},"/ElectroMag/Q4Circuit":{"title":"Description","data":{"":"This is a LaTeX document that generates a circuit diagram using the circuitikz package. The circuit represents an electrical system with multiple resistors and a voltage source. The circuit consists of several components connected by wires. The circuit has three resistors, labelled as R_l, R_l1, and R_l2, and one voltage source labelled as . The circuit also includes several arrows that represent the flow of current and voltage, as well as labels to indicate the values of the different components. Finally, the diagram has a caption or title which says  and is placed at the bottom of the image.","keywords#Keywords":"circuitikz, graphicx, mathrsfs, latexsym, amssymb, amsmath, current, voltage, resistance, circuit, colors, nodes, arrows.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage[american]{circuitikz}\n\\usepackage{graphicx}\n\\usepackage{mathrsfs}\n\\usepackage{latexsym,amssymb,amsmath}\n\\newcommand{\\equal}{=}\n\\begin{document}\n\n\\begin{circuitikz}\n\\draw (4,0) to [V,l_=$\\mathscr{F}\\equal NI$, -*] (6,0)\n(2,0) -- (2,2)\n(2,2) to [R,l^=$\\mathscr{R}_{l}$,i^>=$\\phi_l$, v_>=$\\mathscr{F}_1$, color=purple] (6,2)\n(6,2) -- (6,0)\n(2,0) to [R,l^=$\\mathscr{R}_{l2}$,i^<=$\\phi_t$, v_<=$\\mathscr{F}_{l2}$, *-, color=blue] (4,0)\n(2,0) -- (0,0)\n(0,0) to [R,l^=$\\mathscr{R}_{l1}$, v_>=$\\mathscr{F}_{l1}$, color=red]  (0,4)\n(6,0) -- (8,0)\n(8,4) to [R,l^=$\\mathscr{R}_{l1}$, v_>=$\\mathscr{F}_{l1}$, color=red]  (8,0)\n(0,4) -- (3,4)\n(3,4) to [R,l^=$\\mathscr{R}_{g}$,i^>=$\\phi_g$, v_>=$\\mathscr{F}_{g}$, color=green] (5,4)\n(5,4) -- (8,4);\n%\t\t\t\t(0,0) to [R,l^=$\\mathscr{R}_{g}$, v_<=$\\mathscr{F}_1$, color=green] (4,0)\n%\t\t\t\t(0,2) to [R,l_=$0.5\\mathscr{R}_{s}$, v^>=$\\mathscr{F}_2$, color=blue] (4,2)\n%\t\t\t\t(4,2) -- (4,0)\n\\node (phi) at (7.0,1.25) {$\\phi_{Meme}$};\n\\draw[-stealth]  (1,1.25) to [bend left=90] (phi);\n\\end{circuitikz}\n\\end{document}"}},"/ElectroMag/Q5Circuit":{"title":"Description","data":{"":"The code is a LaTeX document that generates an electrical circuit diagram using the circuitikz package. The circuit consists of a voltage source with a label $\\mathscr{F}\\equal NI$ and two resistors labeled $\\mathscr{R}_i$ and $\\mathscr{R}_a$, colored purple and blue respectively. The resistors are connected in series with the voltage source. Additionally, the code draws an arc with a label $\\phi$ using the arc command. The final line of the code sets a label for the figure, but it is not used in the actual diagram.","keywords#Keywords":"circuitikz, graphicx, mathrsfs, amssymb, amsmath, circuit, vector, resistor, voltage, node, label.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage[american]{circuitikz}\n\\usepackage{graphicx}\n\\usepackage{mathrsfs}\n\\usepackage{latexsym,amssymb,amsmath}\n\\newcommand{\\equal}{=}\n\\begin{document}\n\\begin{circuitikz}\n\\draw (0,3) to [V,l_=$\\mathscr{F}\\equal NI$] (0,0)\n(0,3) to  [R, l^= $\\mathscr{R}_{i}$,v_>=$\\mathscr{F}_i$, color=purple] (3,3)\n(3,0) -- (0,0)\n(3,3) to [R, l^= $\\mathscr{R}_{a}$,v_>=$\\mathscr{F}_a$, color=blue] (3,0);\n\n\\draw[thin, <-, >=triangle 45] (1.5,1.5) node[scale=2]{$\\phi$}   ++(-90:0.5) arc (-90:100:0.5);\n\\end{circuitikz}\n\\label{fig:q1fig}\n\\end{document}"}},"/ElectroMag/Q6Circuit":{"title":"Description","data":{"":"This is a LaTeX code that generates an electrical circuit diagram using the circuitikz package. The circuit has three resistors (R_1, R_2, and R_3) connected in series between a voltage source (F = NI) and a ground point. Another resistor R_4 is also connected in parallel to R_2 and both are connected to the ground point. There are three labeled currents phi_1, phi_2, and phi_3 that flow through the resistors R_1, R_2, and R_g respectively. The voltage drops across the resistors are labeled with F_1, F_2, F_3, and F_4. The diagram also includes arrows depicting the direction of currents in R_2 and R_g and labels phi_2 and phi_3 at their respective points. The code also uses several additional LaTeX packages for formatting and math symbols.","keywords#Keywords":"circuitikz, graphicx, mathrsfs, latexsym, amssymb, amsmath, node, triangle, arc, to, V, R.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage[american]{circuitikz}\n\\usepackage{graphicx}\n\\usepackage{mathrsfs}\n\\usepackage{latexsym,amssymb,amsmath}\n\\newcommand{\\equal}{=}\n\\begin{document}\n\\begin{circuitikz}\n\\draw (0,4) to [V,l_=$\\mathscr{F}\\equal NI$] (0,0)\n(0,4) to  [R,i>=$\\phi_1$, l^= $\\mathscr{R}_{1}$,v_>=$\\mathscr{F}_1$, color=purple] (4,4)\n(4,0) -- (0,0)\n(4,4) to [R,i^>=$\\phi_2$, l^= $\\mathscr{R}_{2}$,v_>=$\\mathscr{F}_2$, color=blue] (4,0)\n(4,4) to [R,l^= $\\mathscr{R}_{3}$,v_>=$\\mathscr{F}_3$, color=red] (8,4)\n(8,4) to [R,i^>=$\\phi_3$, l^= $\\mathscr{R}_{g}$,v_>=$\\mathscr{F}_g$, color=cyan] (8,0)\n(8,0) to [R, l^= $\\mathscr{R}_{4}$,v_>=$\\mathscr{F}_4$, color=green] (4,0);\n\\draw[thin, <-, >=triangle 45] (6,2) node{$\\phi_3$}   ++(-90:1) arc (-90:100:1);\n\\draw[thin, <-, >=triangle 45] (2,2) node{$\\phi_2$}   ++(-90:1) arc (-90:100:1);\n%\t\t\\node (phi) at (4.25,0.5) {$\\phi_2$};\n%\t\t\\draw[-stealth]  (4.25,2.5) to [bend left=90] (phi);\n\\end{circuitikz}\n\\label{fig:q1fig}\n\\end{document}"}},"/ElectroMag/Q7Circuit":{"title":"Description","data":{"":"This is a LaTeX code that generates an electrical circuit diagram using the circuitikz package. The diagram represents a transformer-coupled amplifier, with various resistors and sources. The circuit consists of three resistors and three sources, two of which are current sources. The circuit also includes two transformers with a ratio of N1:N2. Each resistor and source is labeled with a symbol that indicates its name, current or voltage direction, resistance, and/or voltage. The colors of the resistors and sources are specified using color names. The mathrsfs, latexsym, amssymb, and amsmath packages are used to typeset the mathematical symbols and characters. The document class is set to standalone, which is used to generate a single image file of the circuit diagram.","keywords#Keywords":"circuit, tikz, resistor, inductor, voltage, current, color, gray, purple, orange, red, blue, green, math, subscript, label.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage[american]{circuitikz}\n\\usepackage{graphicx}\n\\usepackage{mathrsfs}\n\\usepackage{latexsym,amssymb,amsmath}\n\\newcommand{\\equal}{=}\n\\begin{document}\n\\begin{circuitikz}\n\\draw (0,6) to [R,i^>=$\\phi_2$, l^= $\\mathscr{R}_{g1}$,v_>=$\\mathscr{F}_{g1}$, color=blue] (0,0)\n(0,6) to  [R,i>=$\\phi_1$, l^= $\\mathscr{R}_{ab}$,v_>=$\\mathscr{F}_1$, color=purple] (4,6)\n(0,0) to [R,i^>=$\\phi_2$, l^= $\\mathscr{R}_{cd}$,v_>=$\\mathscr{F}_{cd}$, color=gray] (4,0)\n(4,2) to [I,l_=$N_1i$] (4,4)\n(4,2) to [I,l_=$N_2i$] (4,0)\n(4,4)  to  [R,i>=$\\phi_1$, l^= $\\mathscr{R}_{ad}$,v_>=$\\mathscr{F}_{ad}$, color=orange] (4,6)\n(4,6) to [R,l^= $\\mathscr{R}_{3}$,v_>=$\\mathscr{F}_3$, color=red] (8,6)\n(8,6) to [R,i^>=$\\phi_3$, l^= $\\mathscr{R}_{g2}$,v_>=$\\mathscr{F}_{g2}$, color=cyan] (8,0)\n(8,0) to [R, l^= $\\mathscr{R}_{dc}$,v_>=$\\mathscr{F}_{dc}$, color=green] (4,0);\n\\end{circuitikz}\n\\label{fig:q1fig}\n\\end{document}"}},"/ElectroMag/Q7Circuit2":{"title":"Description","data":{"":"The code is a LaTeX document with the document class standalone and several packages including circuitikz, graphicx, mathrsfs, latexsym, amssymb, and amsmath. The code defines a new command \\equal that is set to =. The document includes a circuitikz environment that draws a circuit with resistors, a current source, and labels. The circuit is comprised of several lines drawn between coordinates with specified properties, such as current labels and color. Finally, the code includes a label for the circuit figure.","keywords#Keywords":"circuitikz, graphicx, mathrsfs, latexsym, amssymb, amsmath, current, voltage, resistor, inductor.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage[american]{circuitikz}\n\\usepackage{graphicx}\n\\usepackage{mathrsfs}\n\\usepackage{latexsym,amssymb,amsmath}\n\\newcommand{\\equal}{=}\n\\begin{document}\n\\begin{circuitikz}\n\\draw (0,0) to [R,i^<=$\\phi_1$, l^= $\\mathscr{R}_{g1}$,v_<=$\\mathscr{F}_{g1}$, color=blue] (0,6)\n(0,6) -- (4,6)\n(0,0) -- (4,0)\n(4,0) to [I,i=$\\phi$,l_=$(N_1-N_2)i$] (4,4)\n(4,4) -- (4,6)\n(8,0) -- (4,0)\n(4,6) to [R,l^= $\\mathscr{R}_{3}$,v_>=$\\mathscr{F}_3$, color=red] (8,6)\n(8,0) to [R,i^<=$\\phi_2$, l^= $\\mathscr{R}_{g2}$,v_<=$\\mathscr{F}_{g2}$, color=cyan] (8,6)\n\n;\\end{circuitikz}\n\\label{fig:q1fig}\n\\end{document}"}},"/ElectroMag/Q8Circuit":{"title":"Description","data":{"":"The code is a LaTeX document that generates an electrical circuit diagram using the circuitikz package. The circuit diagram consists of a voltage source, three resistors, and wires connecting them. The resistors are labeled with symbols in the mathrsfs font, and the arrows indicating the direction of the current are labeled with symbols in math mode. The circuit elements are colored in blue, purple, and red. The document also includes packages for graphics and math symbols and defines a new command for the equals sign. The document is set up to be compiled as a standalone file. The resulting image has no border and can be used as a standalone figure.","keywords#Keywords":"circuitikz, graphicx, mathrsfs, amssymb, amsmath, circuit, circuit diagram, circuit components, electric circuit, electric circuit diagram, resistor, voltage source, current source, switch, node, path, coordinates, labels, arrows, colors.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage[american]{circuitikz}\n\\usepackage{graphicx}\n\\usepackage{mathrsfs}\n\\usepackage{latexsym,amssymb,amsmath}\n\\newcommand{\\equal}{=}\n\\begin{document}\n\\begin{circuitikz}\n\\draw (6,0) to [V,i^>=$\\phi_T$, l^= $\\mathscr{F}$,v_>=$NI$, color=blue] (0,0)\n(0,0) -- (0,4)\n(0,4) -- (1,4)\n(1,4) -- (1,2)\n(1,4) -- (1,6)\n(1,6) to [R,i>=$\\phi_1$, l^= $\\mathscr{R}_{2}$,v_>=$\\mathscr{F}_2$, color=purple] (3,6)\n(3,6) to [R, l^= $\\mathscr{R}_{3}$,v_>=$\\mathscr{F}_3$, color=purple] (5,6)\n(5,6) -- (5,4)\n(1,2) to [R,i>=$\\phi_1$, l^= $\\mathscr{R}_{1}$,v_>=$\\mathscr{F}_1$, color=red] (4,2)\n(4,2) -- (5,2)\n(5,2) -- (5,4)\n(5,4) -- (6,4)\n(6,4) -- (6,0)\n;\\end{circuitikz}\n\\label{fig:q1fig}\n\\end{document}"}},"/ElectroMag/Transformer3Windings":{"title":"Description","data":{"":"The code defines a TikZ picture that shows a box with three sub-boxes inside it. Each sub-box is defined using the \"rectangle\" command. There are also three input/output terminals (\"terminal_a\" and \"terminal_b\") defined using the \"pic\" command, and each terminal is connected to the sub-boxes using lines. The field lines are defined using another \"pic\" command, and a label is added using the \"\\tikzpictext\" command. The red line connects two terminals. The overall style of the picture is set using various TikZ commands, such as \"\\draw\" and \"\\node\". The document class used is \"standalone\".","keywords#Keywords":"tikz, arrows, pic, draw, fill, coordinate, path, node, rectangle, bend, text, angle, radius, arc, loop, red","source-code#Source Code":"\\documentclass[tikz,border=3mm]{standalone}\n\n\\usetikzlibrary{quotes,arrows.meta}\n\n\\begin{document}\n\n\\tikzset{\nterminal_a/.pic = {%\n\\coordinate (-in) at (-3mm,0);\n\\coordinate (-out) at (-3mm,-4.5mm);\n\n\\path[fill] (-in) circle (2pt);\n\\draw[thick] (-in)--(0,0)--++(0:1cm) arc[start angle=90, delta angle=-180, radius=.75mm];\n\\draw[thick] (0,-1.5mm) arc[start angle=90, delta angle=180, radius=.75mm]--++(0:1cm) arc[start angle=90, delta angle=-180, radius=.75mm];\n\\fill (-out) circle (2pt);\n\\draw[thick] (-out) -- ++(0:3mm);\n},\nterminal_b/.pic = {%\n\\coordinate (-in) at (-3mm,0);\n\\coordinate (-out) at (-3mm,-7.5mm);\n\n\\path[fill] (-in) circle (2pt);\n\\draw[thick] (-in)--(0,0)--++(0:1cm) arc[start angle=90, delta angle=-180, radius=.75mm];\n\\draw[thick] (0,-1.5mm) arc[start angle=90, delta angle=180, radius=.75mm]--++(0:1cm) arc[start angle=90, delta angle=-180, radius=.75mm];\n\\draw[thick] (0,-4.5mm) arc[start angle=90, delta angle=180, radius=.75mm]--++(0:1cm) arc[start angle=90, delta angle=-180, radius=.75mm];\n\\fill (-out) circle (2pt);\n\\draw[thick] (-out) -- ++(0:3mm);\n},\nfield/.pic = {\n\\draw[thick,-Stealth] (0,0) -- (90:7mm) node[above] {\\tikzpictext};\n}\n}\n\n\\begin{tikzpicture}\n\\draw (0,0) rectangle (7,5);\n\\draw (1,1) rectangle (3,4);\n\\draw (4,1) rectangle (6,4);\n\n\\foreach \\i/\\j in {0/A,3/B,6/C}{\n\\pic (upper-\\j) at (\\i,3.8) {terminal_a};\n\\pic (lower-\\j) at (\\i,2) {terminal_b};\n\\pic[\"$\\Psi_\\j$\"] at ([xshift=5mm]\\i,2.2) {field};\n}\n\n\\node[left] at (upper-A-in) {A};\n\\draw[red] (upper-A-out) to [bend right] (lower-A-in);\n\n\\end{tikzpicture}\n\\end{document}"}},"/ElectroMag/Q1Circuit2":{"title":"Description","data":{"":"The code is a LaTeX document that includes a TikZ picture, which represents an electrical circuit. The picture includes a voltage source, a resistor, and two connections. The resistor is labeled with a symbol for equivalent resistance and a variable for magnetic flux. The circuit also includes a label for the voltage source, which is represented by an equation. The circuit is enclosed in a TikZ environment called \"circuitikz,\" and the picture is drawn using the \"draw\" command. Additionally, the \"graphicx,\" \"mathrsfs,\" \"latexsym,\" \"amssymb,\" and \"amsmath\" packages are loaded, and the \"bending\" library is included from the TikZ package. Finally, a label is added to the picture using the \"label\" command.","keywords#Keywords":"document, standalone, circuitikz, graphicx, mathrsfs, latexsym, amssymb, amsmath, tikzlibrary, bending, node, draw, to, V, R, l, v, color, blue, phi, bend","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage[american]{circuitikz}\n\\usepackage{graphicx}\n\\usepackage{mathrsfs}\n\\usepackage{latexsym,amssymb,amsmath}\n\\usetikzlibrary{bending}\n\\newcommand{\\equal}{=}\n\\begin{document}\n\\begin{circuitikz}\n\\draw (0,3) to [V,l_=$\\mathscr{F}\\equal NI$] (0,0)\n(0,3) -- (3,3)\n(3,0) -- (0,0)\n(3,3) to [R, l^= $\\mathscr{R}_{eq}$,v_>=$\\mathscr{F}$, color=blue] (3,0);\n\n%\t     \\draw[thin, <-, >=triangle 45] (1.5,1.5) node[scale=2]{$\\phi$}   ++(-90:0.5) arc (-90:100:0.5);\n\\node (phi) at (1.5,0.5) {$\\phi$};\n\\draw[-stealth]  (1.5,2.5) to [bend left=90] (phi);\n\\end{circuitikz}\n\\label{fig:q1fig}\n\\end{document}"}},"/ElectroMag/TransmissionLine":{"title":"Description","data":{"":"The code is a LaTeX document that uses the packages circuitikz and tikz. It draws a schematic diagram of a transmission line network with a signal generator connected to an input impedance Z_g via a two-port block. The network also includes two transmission lines of equal length connected in parallel between Z_g and Z_L, and a load impedance Z_L connected to the output via another two-port block. The style of the block is defined by a tikzstyle command. The final line connects the input of the network to ground using a sI element.","keywords#Keywords":"circuitikz, twoport, TL, sI, block, draw, fill, rectangle, minimum height, minimum width.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usepackage{circuitikz}\n\\usepackage{tikz}\n\\begin{document}\n\n\\tikzstyle{block} = [draw, fill=white, rectangle,\nminimum height=3em, minimum width=3em]\n\\begin{circuitikz}\n\\draw (0,4) to [twoport,t=$Z_g$](4,4);\n\\draw (4,0) to[TL] (10,0);\n\\draw (4,4) to[TL]  (10,4);\n\\draw (10,4) to [twoport,t=$Z_L$](10,0);\n\\draw (0,0) to [sI] (0,4);\n\\draw (4,0) to (0,0);\n\\end{circuitikz}\n\\end{document}"}},"/ElectroMag/phasor":{"title":"Description","data":{"":"The code is a LaTeX document that generates a single vector diagram using the TikZ package. The diagram depicts a phasor diagram with four vectors:  pointing to the right,  pointing up and to the right at a 45 degree angle,  pointing down and to the left at a 90 degree angle, and  pointing down and to the left at a 45 degree angle. The vectors are labeled with their respective values and angles, and the  vector is also labeled as the current through a resistor. The diagram includes arrows and text to indicate the direction and meaning of each vector. Finally, the code includes commands to draw an arc with a label representing an angle of 45 degrees.","keywords#Keywords":"tikz, siunitx, vector, diagram, coordinate, node, polar, angle.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{tikz}\n\\usepackage{siunitx}\n\n\\begin{document}\n\\begin{tikzpicture}[>=latex]\n%\\draw[style=help lines] (0,0) (3,2);\n\n%\\coordinate (vec1) at (300:1.5);\n%\\coordinate (vec2) at (30:2.5);\n%\\coordinate (vec3) at (0:2.5);\n%\\coordinate (vec4) at (90:2);\n%\\coordinate (vec5) at (270:2);\n%\\coordinate (vec6) at (180:2);\n\n\\coordinate (vec1) at (0:2.5);\n\\coordinate (vec1mid) at (0:2);\n\\coordinate (vec2) at (270:2.5);\n\\coordinate (vec3) at (315:3);\n\\draw[->,thick,black] (0,0) -- (vec1) node[right] {$\\bar{V}_2 \\angle0^\\circ$};\n\\draw[->,thick,black] (0,0) -- (vec1mid) node[midway,above] {$I_R = 2.8  \\angle0^\\circ A$};\n\\draw[->,thick,black] (0,0) -- (vec2) node[below right] {$I_L=2.8  \\angle-90^\\circ$};\n\\draw[->,thick,black] (0,0) -- (vec3) node[midway, below, sloped] {$I_{Load} = 4 A$};\n%\\draw[->,thick,black] (0,0) -- (vec3) node [below] {$Re$};\n%\\draw[->,thick,black] (0,0) -- (vec4) node [left] {$Im$};\n%\\draw[->,thick,black] (0,0) -- (vec5);\n%\\draw[->,thick,black] (0,0) -- (vec6);\n\n%\\draw [black, thick ] (1.0,0) arc (0:30:1cm)    node [midway, right] {$\\theta=45^\\circ$};\n\\draw [black, thick] (0.5,0) arc (0:-60:0.38cm) node [midway, right] {$\\theta=45^\\circ$};\n\n\\end{tikzpicture}\n\\end{document}"}},"/ElectroMag/smithChart":{"title":"Description","data":{"":"This is a LaTeX code for generating a Smith chart with two circles in different colors. The code begins with the document class declaration and package imports, including tikz and pgfplots. The standalone document class is specified with the preview option. The smithchart library of pgfplots is also imported.Within the tikzpicture environment, the smithchart is created. The smithchart environment provides the framework for creating Smith charts, which are a type of graphical representation used in electrical engineering to visualize the complex impedance plane.Two circles are drawn using the path command, one in red with a radius of 1.5cm, and another in blue with a radius of 0.75cm, and its center at (0.2,0.5). A small blue circle with a radius of 0.05cm is also added to the center of the blue circle using the fill option to fill the circle with blue color.Finally, the end{document} command closes the LaTeX document.","keywords#Keywords":"tikz, pgfplots, smithchart.","source-code#Source Code":"\\documentclass[preview]{standalone}\n\\usepackage{tikz}\n\\usepackage{pgfplots}\n\\usepgfplotslibrary{smithchart}\n\\pgfplotsset{compat=1.11}\n\n\\begin{document}\n\\begin{tikzpicture}\n\\begin{smithchart}\n\\path[draw=red] (0pt,0pt) circle (1.5cm);\n\\path[draw=blue] (0.2,0.5) circle (0.75cm);\n\\path[draw=blue,fill=blue] (0.2,0.5) circle (0.05cm);\n\\end{smithchart}\n\\end{tikzpicture}\n\\end{document}"}},"/ElectroMag/tikzElecMag":{"title":"Description","data":{"":"This is a LaTeX code that produces a 3D diagram and two equations with descriptions.The document class is standalone, which generates a tightly cropped output without margins. The packages tikz and bm are loaded. The ragged2e package with the option raggedrightboxes is also included.The code starts by defining the 3D environment using the tikzpicture environment with the x, y, and z axis directions. The axes are drawn using the draw command with different line styles and colors. A propagation vector is also drawn using the draw and node commands.Two different waves are then plotted using the plot command with a domain and a number of samples. Two arrows are also drawn for each point on the wave using a foreach loop.Two labeled nodes,  and , are added using the node command.The second part of the code contains two minipage environments. The first one contains an equation and a table with descriptions, while the second one includes another equation and a table with descriptions.","keywords#Keywords":"TikZ, 3D, wave propagation, electric field, magnetic field, speed of light, formula, table.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{tikz,bm}\n\\usepackage[raggedrightboxes]{ragged2e}\n\\begin{document}\n\\begin{tikzpicture}[x={(-10:1cm)},y={(90:1cm)},z={(210:1cm)}]\n% Axes\n\\draw (-1,0,0) node[above] {$x$} -- (5,0,0);\n\\draw (0,0,0) -- (0,2,0) node[above] {$y$};\n\\draw (0,0,0) -- (0,0,2) node[left] {$z$};\n% Propagation\n\\draw[->,ultra thick] (5,0,0) -- node[above] {$c$} (6,0,0);\n% Waves\n\\draw[thick] plot[domain=0:4.5,samples=200] (\\x,{cos(deg(pi*\\x))},0);\n\\draw[gray,thick] plot[domain=0:4.5,samples=200] (\\x,0,{cos(deg(pi*\\x))});\n% Arrows\n\\foreach \\x in {0.1,0.3,...,4.4} {\n\\draw[->,help lines] (\\x,0,0) -- (\\x,{cos(deg(pi*\\x))},0);\n\\draw[->,help lines] (\\x,0,0) -- (\\x,0,{cos(deg(pi*\\x))});\n}\n% Labels\n\\node[above right] at (0,1,0) {$\\bm{E}$};\n\\node[below] at (0,0,1) {$\\bm{B}$};\n\\end{tikzpicture}\n\n\\begin{minipage}{.5\\linewidth}\n\\[\nc = \\frac{E}{B}\n\\]\n\\begin{tabular}{r@{${}={}$}p{.8\\linewidth}}\n$E$ & electric field amplitude \\\\\n$B$ & magnetic field amplitude (instantaneous values) \\\\\n$c$ & speed of light ($3\\times10^8\\mathrm{m/s}$) \\\\\n\\end{tabular}\n\\end{minipage}%\n\\begin{minipage}{.5\\linewidth}\n\\[\nc = \\frac{1}{\\sqrt{\\mu_0 \\varepsilon_0}}\n\\]\n\\begin{tabular}{r@{${}={}$}p{.8\\linewidth}}\n$\\mu_0$ & magnetic permeability in a vacuum, $\\mu_0 = 1.3\\times10^{-6}\\,\\mathrm{N/A^2}$ \\\\\n$\\varepsilon_0$ & electric permeability in a vacuum, $\\varepsilon_0 = 8.9\\times10^{-12}\\,\\mathrm{C^2/N m^2}$ \\\\\n\\end{tabular}\n\\end{minipage}\n\\end{document}"}},"/ElectroMag/transformer":{"title":"Description","data":{"":"This LaTeX code generates a circuit diagram using the circuitikz package. The circuit consists of a signal generator on the left, connected to a two-port network with characteristic impedance Z_g. The two-port network is connected to two transmission lines with an open circuit at one end and connected to a load with characteristic impedance Z_L at the other end. The circuit is enclosed in a circuitikz environment, and the tikzstyle command defines the style of the rectangle-shaped block that is used to enclose the two-port network in the diagram.","keywords#Keywords":"circuit, tikz, block, twoport, TL, sI, Z_g, Z_L.","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{tikz}\n\\usepackage{circuitikz}\n\\begin{document}\n\\tikzstyle{block} = [draw, fill=white, rectangle,\nminimum height=3em, minimum width=3em]\n\\begin{circuitikz}\n\\draw (0,4) to [twoport,t=$Z_g$](4,4);\n\\draw (4,0) to[TL] (10,0);\n\\draw (4,4) to[TL]  (10,4);\n\\draw (10,4) to [twoport,t=$Z_L$](10,0);\n\\draw (0,0) to [sI] (0,4);\n\\draw (4,0) to (0,0);\n\\end{circuitikz}\n\\end{document}"}},"/EngineeringSoftwareDesign/CPUPicture":{"title":"Description","data":{"":"The code is a LaTeX document containing a tikzpicture environment that creates a diagram of a computer system architecture. The diagram is made up of various shapes and arrows, which are defined using the TikZ library.The shapes used in the diagram include BlockCPU and BlockAltre rectangles, Periferic ellipses, and Registre and RegistreBuit rectangles. The Bus style is used to draw arrows representing buses in the architecture.The diagram represents a computer system architecture, with a CPU (central processing unit) block at the center, surrounded by various other blocks and buses. The CPU block has an interface block, registers, a program counter (PC), and an arithmetic logic unit (ALU).The buses in the architecture include a system bus, an input/output (I/O) bus, and a memory bus. The I/O bus is connected to various peripheral blocks, including a mouse and a keyboard. The memory bus is connected to the main memory block.The diagram also includes labels and annotations to help explain the various components of the architecture.","keywords#Keywords":"tikz, node, draw, rectangle, below, right, left, of, edge, fill, coordinate, text, font, style, path.","source-code#Source Code":"\\documentclass[tikz, border=2mm]{standalone}\n\n\\usetikzlibrary{positioning,shapes,arrows,backgrounds,external,fit,calc}\n\\usepackage[T1]{fontenc}\n\\usepackage[utf8]{inputenc}\n\\usepackage{lmodern}\n\n\\tikzset{\nBlockCPU/.style={draw,thick, fill=blue!20, rectangle},\nBlockAltre/.style={draw,thick, fill=blue!35, rectangle},\nPeriferic/.style={ellipse, draw, fill=blue!15},\nRegistre/.style={rectangle, draw, fill=blue!5},\nRegistreBuit/.style={rectangle, draw, fill=blue!30,minimum width=.9cm, minimum height=3mm, inner sep =0pt, outer sep=0.pt, anchor=south east},\nBus/.style={fill=blue!50},\nNom/.style={font=\\normalsize\\sffamily,text centered, minimum size=1cm, text width=1.5cm}\n}\n\n\\begin{document}\n\\begin{tikzpicture}[font={\\sffamily\\scriptsize}]\n\n\\node[Registre, minimum width=3.9cm, minimum height=3.4cm, anchor=south west, label={above:CPU (Processor)}] (CPU) at (0,0) {};\n%\\node[Nom,above right, align=left] (CPUnom) at (CPU.north west) {CPU};\n\\node[BlockCPU, minimum width=2cm, anchor=south west] (IB) at (0.3,0.3) {Bus interface};\n\\node[RegistreBuit] (Reg1) at ($(IB.north east)+(-2mm,5mm)$) {};\n\\node[RegistreBuit] (Reg2) at (Reg1.north east) {};\n\\node[RegistreBuit] (Reg3) at (Reg2.north east) {};\n\\node[RegistreBuit] (Reg4) at (Reg3.north east) {};\n\\node[RegistreBuit,label={above:Registers}] (Reg5) at (Reg4.north east) {};\n\\node[BlockCPU, left=3mm of Reg3] (PC) {PC};\n\\node[BlockCPU, right=5mm of Reg3, minimum width=1cm, minimum height=2cm] (ALU) {ALU};\n\n\\draw let \\p1=($(Reg1.south) - (Reg1|-IB.north)$), \\n1={veclen(\\x1,\\y1)} in node[double arrow, Bus, shape border rotate=90,anchor=north, minimum height=\\n1-\\pgflinewidth,minimum width=1mm, double arrow head extend=.5mm]  at ([yshift=.5\\pgflinewidth]Reg1.south) {};\n\n\\node[single arrow, Bus, anchor=west, minimum width=2mm, single arrow head extend=.5mm, minimum height=5mm-.5\\pgflinewidth] at (Reg4.east) {};\n\n\\node[single arrow, Bus, anchor=west, minimum width=2mm, single arrow head extend=.75mm, minimum height=5mm-.5\\pgflinewidth, shape border rotate=180] at (Reg2.east) {};\n\n\\node[double arrow, Bus,, anchor=west, minimum width=1mm, double arrow head extend=.75mm] (BusS) at (IB.east) {System bus};\n\n\\node[Registre,minimum width=12mm,minimum height=8mm, anchor=west] (ES) at (BusS.east) {E/S Bridge};\n\n\\node[double arrow, Bus,, anchor=west, minimum width=1mm, double arrow head extend=.75mm] (BusM) at (ES.east) {Memory bus};\n\n\\node[Registre,minimum width=12mm,minimum height=8mm, text centered,text width=12mm,anchor=west] (Mem) at (BusM.east) {Main memory};\n\n\\node[double arrow, Bus,, anchor=north, minimum height=9cm, minimum width=2mm, double arrow head extend=.75mm,anchor=north] (BusES) at ([yshift=-.3cm]ES.south) {Input/Output bus};\n\n\\node[single arrow, Bus,, anchor=north, minimum width=2mm, single arrow head extend=.75mm, minimum height=3mm-.5\\pgflinewidth, shape border rotate=90] (BusESP) at (ES.south) {};\n\n\\node[single arrow, Bus,, anchor=north, minimum width=2mm, single arrow head extend=.75mm, minimum height=5mm-.5\\pgflinewidth, shape border rotate=270] (Per1) at ([shift={(-3.5cm,1mm)}]BusES.south) {};\n\n\\node[Periferic,anchor=north] (Ratoli) at (Per1.south) {Mouse};\n\n\\node[single arrow, Bus, anchor=north, minimum width=2mm, single arrow head extend=.75mm, minimum height=5mm-.5\\pgflinewidth, shape border rotate=270] (Per2) at ([shift={(-1.8cm,1mm)}]BusES.south) {};\n\n\\node[Periferic,anchor=north] (Teclat) at (Per2.south) {Keyboard};\n\n\\node[single arrow, Bus,, anchor=north, minimum width=2mm, single arrow head extend=.75mm, minimum height=5mm, shape border rotate=270] (Per3) at ([shift={(0cm,1mm)}]BusES.south) {};\n\n\\node[Periferic,anchor=north] (Pantalla) at (Per3.south) {Display};\n\n\\node[single arrow, Bus,, anchor=north, minimum width=2mm, single arrow head extend=.75mm, minimum height=5mm, shape border rotate=270] (Per4) at ([shift={(1.5cm,1mm)}]BusES.south) {};\n\n\\node[Periferic,anchor=north] (Disc) at (Per4.south) {Disc};\n\n\\node[single arrow, Bus,, anchor=north, minimum width=2mm, single arrow head extend=.75mm, minimum height=5mm, shape border rotate=270] (Per5) at ([shift={(3.5cm,1mm)}]BusES.south) {};\n\n\\node[Periferic,anchor=north] (Xarxa) at (Per5.south) {Network};\n\n\\path (Disc) -- node {\\dots} (Xarxa);\n\n\\end{tikzpicture}\n\\end{document}"}},"/EngineeringSoftwareDesign/Circles":{"title":"Description","data":{"":"This is a LaTeX code that defines a document class, imports necessary packages, and creates a numbered list with custom formatting.The enumitem package is imported to customize the format of the list. The tcolorbox package is imported to create boxes around some of the list items. The arrows and shapes libraries from TikZ are imported to draw arrows and shapes in the document.Two custom commands are defined: \\mymk and \\circled. \\mymk draws a rectangular box with rounded corners around the given argument, and \\circled draws a circle around the given argument.The document contains a numbered list with custom formatting. Each list item is formatted as an alphabetically ordered list, enclosed in a box with a drop shadow. The fourth list item is formatted as a normal paragraph with a special character, and the fifth list item is formatted as a regular sentence.","keywords#Keywords":"TikZ, rectangle, node, draw, color, line, arrow, style, coordinate, path, fill.","source-code#Source Code":"\\documentclass{article}\n\\usepackage{enumitem}\n\\usepackage[most]{tcolorbox}\n\n\\usetikzlibrary{arrows}\n\\usetikzlibrary{shapes}\n\\newcommand{\\mymk}[1]{%\n\\tikz[baseline=(char.base)]\\node[anchor=south west, draw,rectangle, rounded corners, inner sep=2pt, minimum size=7mm,\ntext height=2mm](char){\\ensuremath{#1}} ;}\n\n\\newcommand*\\circled[1]{\\tikz[baseline=(char.base)]{\n\\node[shape=circle,draw,inner sep=2pt] (char) {#1};}}\n\n\\begin{document}\n\\begin{enumerate}\n\\def\\labelenumi{(\\alph{enumi})}\n\\item  \\tcbox[enhanced,drop shadow,colback=white]{Multiple users will be able to log on.}\n\\item  \\tcbox[enhanced,drop shadow,colback=white]{The program will not have any delays.}\n\\item  If the system detects a major issue, it will save state and restart.\n\\item  \\tcbox[enhanced,drop shadow,colback=white]{The user will be able to modify the location of the program’s save location on their machine.}\n\\item  The program will show an error message to the user if they enter an invalid value in any section.\n\\end{enumerate}\n\\end{document}"}},"/EngineeringSoftwareDesign/ClassDiagram":{"title":"Description","data":{"":"This is a LaTeX code that generates a UML class diagram using the TikZ-UML package. The diagram depicts a game application involving pirates, players, bullets, hearts, and mini-ships. The code defines several classes such as Pirates Game, Player, Bullet, Hearts, and Mini-ships, and includes attributes and methods for each class. The arrows between the classes depict the relationships between them such as compositions, associations, and generalizations. The code also defines a constant value and a custom command. Finally, the code includes a note describing the interactions between players and game objects.","keywords#Keywords":"latex, tikz-uml, umlclass, constant, type, preload, create, GameLoop, CreateShip, Player, update, Bullet, Hearts, Mini-ships, server, client, spawns, shoots, destroys, association, composition, note.","source-code#Source Code":"\\documentclass[border=3mm]{standalone}\n\\usepackage[english]{babel}\n\\usepackage{tikz-uml}\n\\newcommand\\blank[1]{\\rule[-.2ex]{#1}{.4pt}}\n\n\\begin{document}\n\\begin{tikzpicture}\n%\\umlclass[type=interface]{InterfaceA}{}{}\n%\\umlclass[y=-4]{ClassA}{}{}\n%\\umlimpl[stereo=realizes, pos stereo=0.5]{ClassA}{InterfaceA}\n%\n%\\umlclass[x=4, type=interface]{InterfaceB}{}{}\n%\\umlclass[x=4, y=-4]{ClassB}{}{}\n%\\umlimpl[]{ClassB}{InterfaceB}\n%\\node[] at (3,-2) {<<realizes>>};\n\\umlclass[]{Pirates Game}\n{\nWORLD\\blank{0.2cm}SIZE : constant\\blank{0.2cm}type = {w:1500,h:1000}  \\\\\nWINDOW\\blank{0.2cm}WIDTH  : constant\\blank{0.2cm}type = 750\t\\\\\nWINDOW\\blank{0.2cm}HEIGHT : constant\\blank{0.2cm}type = 500\n}\n{\npreload() : void \\\\\ncreate() : void \\\\\nGameLoop() : void \\\\\nCreateShip(string,Number,Number,Number) : Sprite \\\\\n}\n\n\\umlclass[x=-2,y=-8]{Player}\n{\n+ x : Number \\\\\n+ y : Number \\\\\n+ rotation : Number \\\\\n+ health : Number \\\\\n+ alive : Boolean \\\\\n+ shot  : Boolean \\\\\n+ bullets : Number \\\\\n+ speed\\blank{0.2cm}x : Number \\\\\n+ speed\\blank{0.2cm}y : Number \\\\\n}\n{\nupdate () : void \\\\\n}\n\n\\umlclass[x=4,y=-6]{Bullet}\n{\n+ x : Number \\\\\n+ y : Number \\\\\n+ speed\\blank{0.2cm}x : Number \\\\\n+ speed\\blank{0.2cm}y : Number \\\\\n}\n{\n}\n\n\\umlclass[x=12,y=-5]{Hearts}\n{\n+ x : Number \\\\\n+ y : Number \\\\\n+ speed\\blank{0.2cm}x : Number \\\\\n+ speed\\blank{0.2cm}y : Number \\\\\n}\n{}\n\n\\umlclass[x=12,y=0]{Mini-ships}\n{\n+ x : Number \\\\\n+ y : Number \\\\\n+ speed\\blank{0.2cm}x : Number \\\\\n+ speed\\blank{0.2cm}y : Number \\\\\n+ rotationDirection : Number \\\\\n+ rotation : Number\n}\n{\n}\n\\umlnote[x=7,y=-10,width=7.5cm]{Player}{Interactions between players and  game objects is controlled by the server and client. Each player \\\\ updates their own position.}\n\\umlunicompo[mult1=spawns,arg1=server,mult2=bullets,pos1=0.35,pos2=0.65]{Pirates Game}{Bullet}\n\\umlunicompo[mult1=spawns,arg1=server,mult2=Hearts,pos1=0.15,pos2=0.85]{Pirates Game}{Hearts}\n\\umlunicompo[geometry=|-|,arg1=creates, mult1=server,arg2=player,mult2=client,pos1=1.5,pos2=2.6]{Pirates Game}{Player}\n\\umlassoc[geometry=-|,arg1=player,mult1=shoots,mult2=bullets]{Player}{Bullet}\n\\umlunicompo[mult1=spawns,arg1=server,mult2=Mini-ships]{Pirates Game}{Mini-ships}\n\\umlassoc[geometry=|-|,arg1=destroys,pos1=1.75]{Bullet}{Mini-ships}\n\\umlassoc[geometry=-|,arg1=destroys,pos1=0.35]{Bullet}{Hearts}\n\\end{tikzpicture}\n\\end{document}"}},"/EngineeringSoftwareDesign/ClientServer":{"title":"Description","data":{"":"The code is a LaTeX document that uses the TikZ package to create a diagram consisting of a set of interconnected modules.The diagram represents a game architecture that is divided into client-side modules and server-side modules. The client-side modules are depicted in blue, while the server-side modules are depicted in orange.The TikZ styles and commands used to define the appearance and behavior of the modules include simple module, square module, long module, combo module, module right arrow, module left arrow, module down arrow, module up arrow, and pics/horizontal module. These styles and commands define the appearance of the modules as well as the arrows that connect them. The pic command is used to define the horizontal and vertical modules.The code also uses counter to assign labels to the modules, and the command \\renewcommand*\\themodule{\\Alph{module}} is used to redefine the module labels to be capitalized alphabets.Overall, the code generates a diagram that visually represents the game architecture and its various components.","keywords#Keywords":"tikzpicture, draw, node, circle, fill, path, foreach, in, right, of, above, below, left, rectangle, coordinate, edge, style, bend right, bend left, thick.","source-code#Source Code":"\\documentclass[tikz,border=10pt]{standalone}\n\\usetikzlibrary{positioning,fit,shapes.arrows,shadows}\n\\newcounter{module}\n\\setcounter{module}{0}\n\\renewcommand*\\themodule{\\Alph{module}}\n\\tikzset{%\nmodule/.style={rounded corners, align=center, font=\\sffamily, thick},\nsimple module/.style={module, top color=blue!10, bottom color=blue!35, draw=blue!75, text width=40mm, minimum height=15mm, drop shadow},\nsquare module/.style={module, draw=orange!75!black, minimum height=20mm, text width=20mm},\nlong module/.style={module, draw=orange!75!black, minimum height=20mm, text width=50mm},\ncombo module/.style={module, draw=blue!75!black},\nsimple module/.pic={\n\\stepcounter{module}\n\\node (module \\themodule) [simple module] {};\n},\nmodule down arrow/.style={module arrow, shape border rotate=-90, yshift=1.25mm},\nmodule up arrow/.style={module arrow, shape border rotate=90, yshift=-1.25mm},\nmodule right arrow/.style={module arrow, xshift=-1.25mm},\nmodule left arrow/.style={module arrow, rotate = -180, xshift=1.25mm},\nmodule rightup arrow/.style={module arrow,rotate =45, yshift=1.25mm,xshift=1.25mm},\nmodule rightdown arrow/.style={module arrow,rotate =-45, yshift=-1.25mm,xshift=1.25mm},\nmodule leftup arrow/.style={module arrow,rotate =135, yshift=1.25mm,xshift=-1.25mm},\nmodule leftdown arrow/.style={module arrow,rotate =215, yshift=-1.25mm,xshift=-1.25mm},\npics/horizontal module/.style n args=3{\ncode={\n\\stepcounter{module}\n\\coordinate (c) at (0,0);\n\\node [module right arrow] at (c) {};\n\\node (module \\themodule-1) [square module, left=7.5mm of c] {#1};\n\\node (module \\themodule-2) [square module, right=7.5mm of c] {#2};\n\\node (module \\themodule-3) [below=1.5mm of c |- module \\themodule-2.south, module] {#3};\n\\node (module \\themodule) [fit=(module \\themodule-1) (module \\themodule-2) (module \\themodule-3), combo module] {};\n}\n},\npics/vertical module/.style n args=3{\ncode={\n\\stepcounter{module}\n\\coordinate (c) at (0,0);\n\\node [module down arrow] at (c) {};\n\\node (module \\themodule-1) [long module, above=7.5mm of c] {#1};\n\\node (module \\themodule-2) [long module, below=7.5mm of c] {#2};\n\\node (module \\themodule-3) [above=1.5mm of module \\themodule-1.north, module] {#3};\n\\node (module \\themodule) [fit=(module \\themodule-1) (module \\themodule-2) (module \\themodule-3), combo module] {};\n}\n},\nmodule arrow/.style={single arrow, single arrow head extend=2.5mm, drop shadow, draw=gray!75, inner color=gray!20, outer color=gray!35, thick, shape border uses incircle, text height=1.5mm, text width=2.5mm, anchor=center},\nmodule doubleArrow/.style={double arrow, double arrow head extend=2.5mm, drop shadow, draw=gray!75, inner color=gray!20, outer color=gray!35, thick, shape border uses incircle, text height=1mm, text width=5mm, anchor=center},\n}\n\\begin{document}\n\\begin{tikzpicture}\n%% Module A --- client side modules\n\\pic {simple module};\n\\node[] (node name) at (module A) {\\large {\\textbf{Client-Side}}};\n\\node [module down arrow] at ([yshift=-7.5mm]module A.south) {};\n\\node [module up arrow] at ([yshift=7.5mm]module A.north) {};\n\\node [module left arrow] at ([xshift=-7.5mm]module A.west) {};\n%% Module b, below module A\n\\pic [below=27.5mm of module A.south] {horizontal module={Collisions with bullets, hearts and ships.}{Update player health and position}{Physics}};\n\\node [module rightup arrow] at ([xshift=6.5mm,yshift=20mm]module B.east) {};\n%% Module c, above module A\n\\pic [above=33.5mm of module A.north] {horizontal module={Respond to keyboard and mouse inputs.}{Move player and shoot bullets}{Controls}};\n\\node [module rightdown arrow] at ([xshift=6.5mm,yshift=-20mm]module C.east) {};\n%% Module D, left of module A, removed phaser\n\\pic [left=45mm of module A.west] {vertical module={Load Sprites, Images and Sound from folder specific in server. Create game enviroment and create player for the client}{Play music, remove destroyed objects from client and render sprites. Update healthbar for player and output messages when player is destroyed.}{Game Engine}};\n%% Module E\n\\pic [right=20mm of module A.east] {simple module};\n\\node[] (node name) at (module E) {\\large {\\textbf{Socket-io}}};\n\\node [module left arrow] at ([xshift=-7.5mm]module E.west) {};\n\\node [module right arrow] at ([xshift=8.75mm]module E.east) {};\n\n%% Module F --- server side modules\n\\pic [right=19mm of module E.east] {simple module};\n\\node[] (node name) at (module F) {\\large {\\textbf{Server-Side}}};\n\\node [module right arrow] at ([xshift=7.5mm]module F.east) {};\n\\node [module up arrow] at ([yshift=7.5mm]module F.north) {};\n\\node [module down arrow] at ([yshift=-7.5mm]module F.south) {};\n%% Module G\n\\pic [right=45mm of module F.east] {vertical module={Periodically spawn hearts and mini-ships in seperate arrays, generate bullets when user presses shoot button.}{Delete hearts and mini-ships if they go out of bounds or hit by bullet. Delete bullets if out of bounds and output log messages.}{Create Obstacles and bullets}};\n%% Module H\n\\pic [above=33.5mm of module F.north] {horizontal module={Logic for when players connect and disconnect or destroyed.}{Update players location and send updates to client}{Manage Players}};\n\\node [module leftdown arrow] at ([xshift=-6.5mm,yshift=-22.5mm]module H.west) {};\n%% Module I\n\\pic [below=27.5mm of module F.south] {horizontal module={Load Folders (assets, sound, js files)}{Update location of obstacles at set intervals}{Manage Game Assets and Obstacles}};\n\\node [module leftup arrow] at ([xshift=-6.5mm,yshift=22.5mm]module I.west) {};\n%  \\pic [right=42.5mm of module B.east] {vertical module={Description 3}{Description 4}};\n%  \\node [module down arrow] at ([yshift=-7.5mm]module C.south) {};\n%  \\pic [below=27.5mm of module C.south] {horizontal module={Description 5}{Description 6}};\n%  \\node [module down arrow] at ([yshift=-7.5mm]module D.south) {};\n%  \\pic [below=17.5mm of module D.south] {simple module};\n\\end{tikzpicture}\n\\end{document}"}},"/EngineeringSoftwareDesign/DisconnectedFromGame":{"title":"Description","data":{"":"This is a LaTeX document that uses the TikZ package to draw a sequence diagram for a multiplayer game server. The diagram shows interactions between three components: \"Player A\", \"Player B\", and the \"Server\".The diagram starts with \"Player A\" calling the \"move-player\" operation on the \"Server\", which then returns an \"update-players\" message to both \"Player A\" and \"Player B\".Then, \"Player B\" calls the \"shoot-bullet\" operation on the \"Server\", which returns a \"bullets-update\" message to both \"Player A\" and \"Player B\". The \"Server\" then sends a \"player-hit\" message to \"Player A\".Next, \"Player A\" initiates a \"disconnect\" operation with the \"Server\", which returns another \"update-players\" message to \"Player B\".The commented out sections of the code suggest that there may have been further interactions and features planned for this game, but are not currently in use.","keywords#Keywords":"tikz, tikzscale, pgfdeclarelayer, pgfsetlayers, tikz-uml, babel, umlseqdiag, umlactor, umlmulti, umlcall, umlcallself, umlfragment.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{tikz}\n\\usepackage{tikzscale}\n\\pgfdeclarelayer{background,foreground}\n\\pgfsetlayers{background,main,foreground}\n\\usepackage{tikz-uml}\n\\usepackage[english]{babel}  % load this package so tikz-uml loads, it may be due to my japanesse localle lol.\n\n\\begin{document}\n\\begin{tikzpicture}\n\\begin{umlseqdiag}\n\\umlactor{Player A}\n%\\umlobject{Server}\n\\umlmulti{Server}\n\\umlactor{Player B}\n\n% Player spawns, no other player on the map\n\\begin{umlcall}[op=move-player,return=update-players]{Player A}{Server}\n\n\\begin{umlcall}[type=return,op=update-players]{Server}{Player B}\n\\end{umlcall}\n\\end{umlcall}\n\n% Player B shoots a bullet\n\\begin{umlcall}[op=shoot-bullet,return=bullets-update]{Player B}{Server}\n\\begin{umlcallself}[op=ServerGameLoop]{Server}\n\\end{umlcallself}\n\\begin{umlcall}[type=return,op=bullets-update]{Server}{Player A}\n\\end{umlcall}\n\\end{umlcall}\n\\begin{umlcall}[type=return,op=player-hit]{Server}{Player A}\n\\end{umlcall}\n\n\\begin{umlcall}[op=disconnect,type = synchron]{Player A}{Server}\n\\end{umlcall}\n\\begin{umlcall}[type=return,op=update-players]{Server}{Player B}\n\\end{umlcall}\n% Player A Moves\n%\t\t\\begin{umlcall}[op=move-player,return=update-players]{Player B}{Server}\n%\t\t\\begin{umlcall}[type=return,op=update-players]{Server}{Player A}\n%\t\t\\end{umlcall}\n%\t\t\\end{umlcall}\n\n%% Game Loop\n%\t\t\\begin{umlfragment}[type=loop]\n%\t\t\\begin{umlcallself}[dt=5,op=ServerGameLoop]{Server}\n%\t\t\\begin{umlcallself}[op=spawnHealthPacks]{Server}\n%\t\t\\end{umlcallself}\n%\t\t% Update hearts, mini-ships on both sides\n%\t\t\\begin{umlcall}[type=return,op=healthPack-update]{Server}{Player A}\n%\t\t\\end{umlcall}\n%\t\t\\begin{umlcall}[type=return,op=healthPack-update]{Server}{Player B}\n%\t\t\\begin{umlcall}[type=return,op=bullet-update]{Server}{Player A}\n%\t\t\\end{umlcall}\n%\t\t\\begin{umlcall}[type=return,op=bullet-update]{Server}{Player B}\n%\t\t\\end{umlcall}\n%\t\t\\end{umlcall}\n%\t\t\t\t\\end{umlcallself}\n%\t\t\\end{umlfragment}\n\\end{umlseqdiag}\n\\end{tikzpicture}\n\n\n\\end{document}"}},"/EngineeringSoftwareDesign/FlowChart":{"title":"Description","data":{"":"The code is a LaTeX document that generates a diagram of the Android activity life cycle using the TikZ package. The diagram consists of rectangular nodes with rounded corners, each with a different color to represent a different stage of the activity's life cycle. The arrows between the nodes indicate the transitions between the different stages. The code includes specifications for the style of the nodes and the arrows, as well as the distance between nodes and the alignment of the text inside the nodes. Each node is labeled with a function that is called during the activity's life cycle. Additionally, the code includes text annotations for some of the arrows to provide additional context for the transitions.","keywords#Keywords":"tikz, nodes, arrows, activity, life cycle, LaTeX","source-code#Source Code":"% Diagram of Android activity life cycle\n% Author: Pavel Seda\n\\documentclass[border=10pt]{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{arrows.meta}\n\\tikzset{%\n>={Latex[width=2mm,length=2mm]},\n% Specifications for style of nodes:\nbase/.style = {rectangle, rounded corners, draw=black,\nminimum width=4cm, minimum height=1cm,\ntext centered, font=\\sffamily},\nactivityStarts/.style = {base, fill=blue!30},\nstartstop/.style = {base, fill=red!30},\nactivityRuns/.style = {base, fill=green!30},\nprocess/.style = {base, minimum width=2.5cm, fill=orange!15,\nfont=\\ttfamily},\n}\n\\begin{document}\n% Drawing part, node distance is 1.5 cm and every node\n% is prefilled with white background\n\\begin{tikzpicture}[node distance=1.5cm,\nevery node/.style={fill=white, font=\\sffamily}, align=center]\n% Specification of nodes (position, etc.)\n\\node (start)             [activityStarts]              {Activity starts};\n\\node (onCreateBlock)     [process, below of=start]          {onCreate()};\n\\node (onStartBlock)      [process, below of=onCreateBlock]   {onStart()};\n\\node (onResumeBlock)     [process, below of=onStartBlock]   {onResume()};\n\\node (activityRuns)      [activityRuns, below of=onResumeBlock]\n{Activity is running};\n\\node (onPauseBlock)      [process, below of=activityRuns, yshift=-1cm]\n{onPause()};\n\\node (onStopBlock)       [process, below of=onPauseBlock, yshift=-1cm]\n{onStop()};\n\\node (onDestroyBlock)    [process, below of=onStopBlock, yshift=-1cm]\n{onDestroy()};\n\\node (onRestartBlock)    [process, right of=onStartBlock, xshift=4cm]\n{onRestart()};\n\\node (ActivityEnds)      [startstop, left of=activityRuns, xshift=-4cm]\n{Process is killed};\n\\node (ActivityDestroyed) [startstop, below of=onDestroyBlock]\n{Activity is shut down};\n% Specification of lines between nodes specified above\n% with aditional nodes for description\n\\draw[->]             (start) -- (onCreateBlock);\n\\draw[->]     (onCreateBlock) -- (onStartBlock);\n\\draw[->]      (onStartBlock) -- (onResumeBlock);\n\\draw[->]     (onResumeBlock) -- (activityRuns);\n\\draw[->]      (activityRuns) -- node[text width=4cm]\n{Another activity comes in\nfront of the activity} (onPauseBlock);\n\\draw[->]      (onPauseBlock) -- node {The activity is no longer visible}\n(onStopBlock);\n\\draw[->]       (onStopBlock) -- node {The activity is shut down by\nuser or system} (onDestroyBlock);\n\\draw[->]    (onRestartBlock) -- (onStartBlock);\n\\draw[->]       (onStopBlock) -| node[yshift=1.25cm, text width=3cm]\n{The activity comes to the foreground}\n(onRestartBlock);\n\\draw[->]    (onDestroyBlock) -- (ActivityDestroyed);\n\\draw[->]      (onPauseBlock) -| node(priorityXMemory)\n{higher priority $\\rightarrow$ more memory}\n(ActivityEnds);\n\\draw           (onStopBlock) -| (priorityXMemory);\n\\draw[->]     (ActivityEnds)  |- node [yshift=-2cm, text width=3.1cm]\n{User navigates back to the activity}\n(onCreateBlock);\n\\draw[->] (onPauseBlock.east) -- ++(2.6,0) -- ++(0,2) -- ++(0,2) --\nnode[xshift=1.2cm,yshift=-1.5cm, text width=2.5cm]\n{The activity comes to the foreground}(onResumeBlock.east);\n\\end{tikzpicture}\n\\end{document}"}},"/EngineeringSoftwareDesign/GanttScheduling":{"title":"Description","data":{"":"The code defines a Gantt chart using the pgfgantt package. The Gantt chart visualizes a schedule of tasks that run on a single CPU, with some tasks requiring I/O and others not. The chart is defined in a ganttchart environment, with various options set for the appearance of the chart. The chart is divided into units of 0.35cm for the x-axis and 1.4cm for the y-axis. The chart has vertical gray lines every unit and bars are drawn inline with no group borders. The y-axis titles are set to a height of 0.5cm.The Gantt chart displays a total of 32 units of time, with the time intervals labeled on the top of the chart. There are two groups of tasks displayed: CPU and I/O. The CPU tasks are colored in red, green, and blue, and the I/O tasks are colored in red and green. Some tasks are followed by a number in parentheses that indicates the time duration of the task.There are three processes represented on the chart: , , and . Each process is represented by a series of bars with different colors representing the different phases of the process. The chart indicates the times when the processes are executing, waiting for I/O, or in an idle state. There are also three instances of a milestone represented on the chart with a small dot and a label on the left.","keywords#Keywords":"tikz, documentclass, usepackage, begin, center, tikzpicture, draw, node, circle, fill, edge, path, right, left, above, below, label, style","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{pgfgantt}\n\\definecolor{blue}{HTML}{74BBC9}\n\\definecolor{yellow}{HTML}{F7E967}\n\\definecolor{green}{HTML}{7CFC00}\t% lawn green\n\\definecolor{red}{HTML}{FF6347}\t\t% tomato\n\\begin{document}\n%\\begin{figure}\n\\begin{ganttchart}[\nx unit=0.35cm,\ny unit chart=1.4cm,\ncanvas/.style={draw=none,fill=none}, % remove canvas borders, etc\nvgrid={*1{draw=black!12}},           % vertical gray lines every unit\ninline,                              % draw bars inline\ngroup/.style={draw=none,fill=none},  % remove group borders, etc\nbar top shift=0.1,                   % give bar 10% padding top/bottom\nbar height=0.8,                      % bar size 80% of vertical space\ny unit title=0.5cm,                  % crop titles a little smaller\ntitle/.style={draw=none,fill=none},  % remove title borders, etc\ninclude title in canvas=false,        % no vertical grid in title\nmilestone inline label node/.append style={left=5mm}\t% see if I can include milestones\n]{-1}{32}\n\n\\gantttitle{0}{3}\n\\gantttitle{4}{4}\n\\gantttitle{8}{4}\n\\gantttitle{12}{4}\n\\gantttitle{16}{4}\n\\gantttitle{20}{4}\n\\gantttitle{24}{4}\n\\gantttitle{28}{4}\n\\gantttitle{32}{4}\\\\\n\n% Note that 2 units = 4 in the diagram\n\\ganttgroup[inline=false]{CPU}{0}{1}\n\\ganttbar[bar/.style={fill=red}]{$P_1$4}{0}{3}\n\\ganttbar[bar/.style={fill=green}]{$P_2\\mid$5}{4}{8}\n\\ganttbar[bar/.style={fill=red}]{$P_1\\mid$4}{9}{12}\n\\ganttbar[bar/.style={fill=green}]{$P_2\\mid$5}{13}{17}\n\\ganttbar[bar/.style={fill=red}]{$P_1\\mid$4}{18}{21}\n\\ganttbar[bar/.style={fill=blue}]{\\tiny{$P_3\\mid$2}}{22}{23}\n\\ganttbar[bar/.style={fill=white}]{\\tiny {IDLE}}{24}{25}\n\\ganttbar[bar/.style={fill=blue}]{\\tiny{$P_3\\mid$2}}{26}{27}\n\\ganttbar[bar/.style={fill=white}]{\\tiny {IDLE}}{28}{29}\n\\ganttbar[bar/.style={fill=blue}]{\\tiny{$P_3\\mid$2}}{30}{31}\n\\\\\n%\t\\ganttmilestone{$T_4-16 =8$}{18}\n\n\\ganttgroup[inline=false]{I/O}{0}{1}\n\\ganttbar[bar/.style={fill=red}]{\\tiny{$P_1\\mid$2}}{4}{5}\n\\ganttbar[bar/.style={fill=white}]{\\tiny{IDLE}}{6}{8}\n\\ganttbar[bar/.style={fill=green}]{\\tiny{$P_2\\mid$2}}{9}{10}\n\\ganttbar[bar/.style={fill=white}]{\\tiny{IDLE}}{11}{12}\n\\ganttbar[bar/.style={fill=red}]{\\tiny{$P_1\\mid$2}}{13}{14}\n\\ganttbar[bar/.style={fill=white}]{\\tiny{IDLE}}{15}{23}\n\\ganttbar[bar/.style={fill=blue}]{\\tiny{$P_3\\mid$2}}{24}{25}\n\\ganttbar[bar/.style={fill=white}]{\\tiny{IDLE}}{26}{27}\n\\ganttbar[bar/.style={fill=blue}]{\\tiny{$P_3\\mid$2}}{28}{29}\n%\\ganttbar[bar/.style={fill=blue}]{2}{2}{5}\n%\\ganttbar[bar/.style={fill=yellow}]{6}{6}{8}\n%\\ganttbar[bar/.style={fill=white}]{IDLE}{25}{29}\n%\t\\ganttgroup[inline=false]{$T_{2,1}$}{0}{1}\n%\t\\ganttbar[bar/.style={fill=blue}]{1}{0}{1}\n%\t\\ganttbar[bar/.style={fill=yellow}]{7}{9}{11} \\\\\n\n%\t\\ganttgroup[inline=false]{$T_{3,1}$}{0}{1}\n%\t\\ganttbar[bar/.style={fill=yellow}]{4}{0}{2}\n\n\\node (a) [fill=blue,draw,anchor=south] at (current bounding box.north){$P_3$};\n\\node (b) [fill=green,draw,anchor=south] at ([xshift=-30pt]a.south west){$P_2$};\n\\node (c) [fill=red,draw,anchor=south] at ([xshift=-30pt]b.south west){$P_1$};\n\\node (legend) [fill=white,draw,anchor=south] at ([xshift=-30pt]c.south west){Legend:};\n%\\node[fill=purple,draw,anchor=west] at ([yshift=-20pt]d.south west){Box North East};\n\\end{ganttchart}\n%\\caption{A flexible job shop schedule}\n%\\label{fig:schedule}\n%\\end{figure}\n\n\\end{document}"}},"/EngineeringSoftwareDesign/GitWorkFlow":{"title":"Description","data":{"":"This code defines a LaTeX document with a tikzpicture environment that draws a diagram illustrating the basic Git workflow. The tikz package and several of its libraries are loaded, including calc, fadings, shapes.arrows, shadows, and backgrounds.The tikzset command defines three styles: bubble, which is a rectangular node with rounded corners and a fill color, arrowfill, which is used to create a gradient fill for the arrow shapes, and arrowstyle, which is a style for the arrow shapes themselves.The tikzfading command defines a fading named arrowfading, which is used in the arrowfill style.Within the tikzpicture environment, four bubble nodes are defined for the working directory, staging area, local repository, and remote repository, each with a different fill color. The above option is used to add labels for the \"Remote\" and \"Local\" repositories.Four types of arrows are defined: git add, git commit, git push, and git fetch. These arrows are created using the arrowstyle style, with different heights and rotation angles. They are positioned using the $(...)!0.5!(...)$ syntax to determine the midpoint of the line between two nodes, and the xshift and yshift options to adjust the arrow positions.Finally, a gray background is added to the diagram using the pgfonlayer environment, and a dashed line is drawn to separate the local and remote repository sections.","keywords#Keywords":"tikz, standalone, calc, fadings, shapes, arrows, shadows, backgrounds, positioning, node, draw, ultra thick, gray, pgfonlayer, fill, dashed, shorten, rectangle, align, minimum height, minimum width, font, xshift, yshift, shape border rotate,foreach, general shadow, single arrow, single arrow head extend.","source-code#Source Code":"\\documentclass[svgnames]{standalone}\n\n\\usepackage{tikz}\n\\usetikzlibrary{calc,fadings,shapes.arrows,shadows,backgrounds, positioning}\n\n\\tikzset{bubble/.style={rectangle, draw=gray,rounded corners,fill=#1,align = flush center,minimum height=1cm,minimum width=1.75cm}}\n\n\\tikzfading [name=arrowfading, top color=transparent!0, bottom color=transparent!95]\n\\tikzset{arrowfill/.style={top color=OrangeRed!20, bottom color=Red, general shadow={fill=black, shadow yshift=-0.8ex, path fading=arrowfading}}}\n\\tikzset{arrowstyle/.style={draw=FireBrick,arrowfill, single arrow,minimum height=#1, single arrow,\nsingle arrow head extend=.4cm,}}\n\n\\begin{document}\n\n\\begin{tikzpicture}\n% Bubbles\n\\node[bubble=ForestGreen!40] (wd) at (0,0) {working\\\\directory};\n\\node[bubble=Gold!40] (sa) at (2.5,0) {staging\\\\area};\n\\node[bubble=DodgerBlue!40] (lc) at (5,0) {local repo};\n\\node[bubble=Tomato!40] (rc) at (8.5,0) {remote repo};\n\n\\node[above= 1 cm of rc,font={\\bf}]{Remote};\n\\node[above= 1 cm of sa,font={\\bf}]{Local};\n% Lines\n\\foreach \\bubble in {wd,sa,lc,rc}\n\\draw[ultra thick, gray] ($(\\bubble.south)-(0,0.25)$)--($(\\bubble.south)-(0,9)$);\n\n% Arrows\n\\node [arrowstyle=2.5cm,xshift=-0.1cm,yshift=-1.5cm] at ($(wd.south)!0.5!(sa.south)$) {git add};\n\\node [arrowstyle=2.5cm,xshift=-0.1cm,yshift=-2.5cm] at ($(sa.south)!0.5!(lc.south)$) {git commit};\n\\node [arrowstyle=3.5cm,xshift=-0.1cm,yshift=-3.5cm] at ($(lc.south)!0.5!(rc.south)$) {git push};\n\\node [arrowstyle=3.5cm,xshift=0.1cm,yshift=-5cm,shape border rotate=180] at ($(rc.south)!0.5!(lc.south)$) {git fetch};\n\\node [arrowstyle=5cm,xshift=0.1cm,yshift=-6.5cm,shape border rotate=180] at ($(lc.south)!0.5!(wd.south)$) {git checkout};\n\\node [arrowstyle=5cm,xshift=0.1cm,yshift=-8cm,shape border rotate=180] at ($(lc.south)!0.5!(wd.south)$) {git merge};\n\n% Background\n\\begin{pgfonlayer}{background}\n\\fill[gray!10]($(lc.north)!0.5!(rc.north)+(0,0.5)$)rectangle($(lc.south)!0.5!(rc.south)+(4,-9.5)$) ;\n\\draw[dashed, shorten <=-1.5cm] ($(lc.south)!0.5!(rc.south)$)--($(lc.south)!0.5!(rc.south)-(0,9.5)$);\n\\end{pgfonlayer}\n\\end{tikzpicture}\n\n\n\\end{document}"}},"/EngineeringSoftwareDesign/Matching":{"title":"Description","data":{"":"This code defines a LaTeX document with the article document class and imports several packages including tikz and xparse. It also defines a few custom colors using the RGB color model.The code defines a new command called \\MyArrow using xparse. This command takes five mandatory arguments and one optional argument. The command creates an arrow between two points on the page using TikZ. The arrow style and positioning can be customized using the optional argument.The rest of the code defines an itemized list with several items. The \\tikzmark command is used to mark certain points on the page for use in the \\MyArrow command. The \\MyArrow command is then used three times to draw arrows between different points in the list.","keywords#Keywords":"latex, tikz, xparse, tikzmark, decorations, calc, overlays, remember picture, draw, arrow, pic, define color, itemize, ex, em.","source-code#Source Code":"\\documentclass{article}\n\\usepackage{tikz}\n\\usepackage{xparse}\n\\usetikzlibrary{tikzmark,decorations.pathreplacing,calc,decorations.markings}\n\n\\definecolor{colori}{RGB}{166,35,41}\n\\definecolor{colorii}{RGB}{248,219,162}\n\n\\NewDocumentCommand\\MyArrow{O{0pt}mmmO{out=150,in=210}}\n{%\n\\begin{tikzpicture}[overlay, remember picture]\n\\draw [->,thick,line width=4pt,#4]\n( $ ({pic cs:#3}|-{pic cs:#2}) + (-#1,1.3ex) $ ) to[#5]\n( $ (pic cs:#3) + (-#1,0) $ );\n\\end{tikzpicture}%\n}\n\n\\begin{document}\n\n\\MyArrow[0.8em]{start1}{end1}{colorii,line width=3pt}[out=90,in=-90]\n\\MyArrow[1.8em]{start2}{end1}{colori}[out=120,in=250]\n\\MyArrow[0.4em]{start3}{end3}{colori}[out=240,in=-30]\n\\begin{itemize}\n\\item\\tikzmark{end1}Processing\n\\item\\tikzmark{start1}Embedding in paraffin blocks\n\\item Microtomy\n\\item\\tikzmark{start2}Staining\n\\item Microscopy\n\\item Testing \\tikzmark{start3} \\hfill Math \\tikzmark{end3}\n\\item\n\\end{itemize}\n\n\\end{document}"}},"/EngineeringSoftwareDesign/MatchingTable":{"title":"Description","data":{"":"This is a LaTeX code that creates a table of software development methodologies and visualizes their relationships using arrows.The code includes the following packages: tikz, tikzmark, booktabs, amssymb, and amsmath.The table is created using the tabular environment, with three columns of equal width defined by the L column type, which centers the contents of the column and wraps the text. The table contains five rows, with a heading row and four data rows, each consisting of two cells separated by an empty cell.The arrows are created using TikZ within a tikzpicture environment. The overlay and remember picture options are used to ensure that the arrows are drawn on top of the text in the table. The arrows are drawn using the \\draw command, with the start and end points specified using the pic cs coordinate system. The shorten >=.5pt and shorten <=.5pt options are used to slightly shorten the arrows to avoid overlapping with the text.There are also several tikzmark commands used to mark positions in the table where the arrows should start or end.","keywords#Keywords":"TikZ, tabular, tikzmark, columns, arrows.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{tikzmark}\n\\usepackage{booktabs}\n\\usepackage{amssymb}  % For more math\n\\usepackage{amsmath}\n\\usepackage{tabularx}\n\n% no hyphens\n\\tolerance=1\n\\emergencystretch=\\maxdimen\n\\hyphenpenalty=10000\n\\hbadness=10000\n\\begin{document}\n%  \\begin{tabular}{cc}\n%    14\\tikzmark{a}  &   78  \\\\\n%    71\\tikzmark{b}  &   \\tikzmark{c}93  \\\\\n%  \\end{tabular} \\newline\n\\newcolumntype{L}{>{\\centering \\arraybackslash}m{4cm}}\n\\begin{tabular}{L L L}\n(a) code-and-fix \\tikzmark{a1} & & \\tikzmark{a2} (a) assess risks at each step; do most critical\naction first \\\\ \\midrule\n(b) evolutionary/prototyping \\tikzmark{b1} & & \\tikzmark{b2}(b) build an initial small requirement\nspec, code it, then ``evolve'' the spec and code as\nneeded \\\\ \\midrule\n(c) spiral \\tikzmark{c1} & & \\tikzmark{c2} (c) build initial requirement specs for several releases,\nthen design-and-code each in sequence \\\\ \\midrule\n(d) staged delivery \\tikzmark{d1} & & (d) standard phases ( \\tikzmark{d2}requirements, design, code,\ntest) in order \\\\ \\midrule\n(e) waterfall \\tikzmark{e1} & & \\tikzmark{e2} (e) write some code, debug it, repeat (i.e.\nad-hoc)\n\\end{tabular}\n\\begin{tikzpicture}[overlay, remember picture, yshift=.25\\baselineskip, shorten >=.5pt, shorten <=.5pt]\n% \\draw [->] ({pic cs:a1}) [bend left] to ({pic cs:e2});\n\\draw [->] ({pic cs:a1}) -- ({pic cs:e2});\n\\draw [->] ({pic cs:c1}) [bend right] to ({pic cs:a2});\n\\draw [->] ([yshift=.75pt]{pic cs:e1}) -- ({pic cs:d2});\n\\draw [->] ([yshift=.75pt]{pic cs:b1}) -- ({pic cs:b2});\n\\draw [->] ([yshift=.75pt]{pic cs:d1}) -- ({pic cs:c2});\n\\end{tikzpicture}\n\\end{document}"}},"/EngineeringSoftwareDesign/QueuePictures":{"title":"Description","data":{"":"This is a LaTeX code that generates a diagram using TikZ package.First, the document class is set to \"standalone\", which means that the output will be a single, cropped image.Then, the TikZ and \"calc\" libraries are imported.A new command called \"\\cells\" is defined that takes three parameters: the total number of cells, the number of grey cells, and the index for the \"front\" cell. The command creates a row of cells, with each cell labeled with a number. The grey cells are filled with a dark color to distinguish them from the other cells. The \"front\" and \"back\" cells are labeled with the text \"front\" and \"back\", respectively.Two styles are defined using the \"\\tikzset\" command: \"cell\" and \"shaded cell\". The \"cell\" style sets the minimum width and height of the cell and the \"shaded cell\" style inherits from the \"cell\" style and fills the cell with a dark color.Finally, a TikZ picture is created using the \"\\begin{tikzpicture}\" command. The \"\\cells\" command is called with the parameters 8, 7, and 0, which generates a row of 8 cells with 7 shaded cells starting at index 0. Each cell is then labeled with a number using a loop that uses the \"\\node\" command to add a label to each cell. The resulting diagram shows a row of 8 cells, with 7 shaded cells and numbers labeled in each cell.","keywords#Keywords":"latex, tikz, picture, plot, array, matrix, nodes, styles, axes.","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{tikz}\n\\usetikzlibrary{calc}\n\n\\def\\cells#1#2#3{%\n% #1 = total number of cells\n% #2 = number of grey cells\n% #3 = index for \"front\" (\"back\" is mod(#3+#2-1, #1))\n\\foreach [count=\\i from 0] \\j  in {1,...,#1} {\n% \\node[cell,label=above:\\i] (cell\\i) at (\\i,0) {};\n\\node[cell] (cell\\i) at (\\i,0) {};\n}\n\\pgfmathsetmacro{\\last}{#3+#2-1}\n\\foreach \\i in {#3,...,\\last} {\n\\pgfmathsetmacro{\\back}{mod(\\i,#1)}\n\\node[shaded cell] (back) at (\\back,0) {};\n}\n\\node[below] at (cell#3.south) {front};\n\\node[below] at (back.south) {back};\n}\n\n\\tikzset{\ncell/.style = {draw, minimum width=1cm, minimum height=0.8cm},\nshaded cell/.style = {cell, fill=black!30},\n}\n\n\\begin{document}\n%\\begin{tikzpicture}\n%\\cells{6}{3}{0}\n%\\end{tikzpicture} \\\\\n%\n%\\begin{tikzpicture}\n%\\cells{6}{3}{3}\n%\\end{tikzpicture} \\\\\n%\n%\\begin{tikzpicture}\n%\\cells{6}{3}{4}\n%\\end{tikzpicture} \\\\\n\n\\begin{tikzpicture}\n\\cells{8}{7}{0}\n\\foreach [count=\\i from 0] \\number in {$P_1[0]$, $P_2[0]$, $P_3[0]$, 299, 8, 14, 53, 78}\n\\node at (cell\\i) {\\number};\n\\end{tikzpicture}\n\n\\end{document}"}},"/EngineeringSoftwareDesign/SeqDia1":{"title":"Description","data":{"":"This code generates a sequence diagram using the tikz-uml package in LaTeX. The diagram shows a sequence of interactions between three entities: an actor named user, an object named AudioService, and another object named Settings.The diagram shows a message being sent from the user to the AudioService object with the operation name handleMessage(). The AudioService object then sends a message to itself with the operation name persistVolume(). This operation involves sending a message to the Settings object to store some data. The Settings object sends two messages to itself to store the data.Finally, the code adds a node to the diagram to display a message label below the a-op object (which corresponds to the persistVolume() operation). The message label reads MSG_PERSIST_VOLUME, and is displayed in a smaller font size.","keywords#Keywords":"tikz-uml, umlseqdiag, umlactor, umlobject, umlcall, op, return, name.","source-code#Source Code":"\\documentclass[border=20pt]{standalone}\n\\usepackage[english]{babel}\n\\usepackage{tikz-uml}\n\n\\begin{document}\n\\small\\begin{tikzpicture}\n\\begin{umlseqdiag}\n\\umlactor{user}\n\\umlobject{AudioService}\n\\umlobject[]{Settings}\n\\begin{umlcall}[op=handleMessage(),return=1,name=a]{user}{AudioService}\n\\begin{umlcall}[op=persistVolume(),return=1]{AudioService}{AudioService}\n\\begin{umlcall}[op=putIntForUser(),return=1]{AudioService}{Settings}\n\\begin{umlcall}[op=putStringForUser(),return=1]{Settings}{Settings}\n\\end{umlcall}\n\\end{umlcall}\n\\end{umlcall}\n\\end{umlcall}\n\\end{umlseqdiag}\n\n\\node [below,font=\\scriptsize] at (a-op.south) {MSG\\_PERSIST\\_VOLUME};\n\\end{tikzpicture}\n\\end{document}"}},"/EngineeringSoftwareDesign/SeqDiagramReport":{"title":"Description","data":{"":"This code generates a UML sequence diagram using the TikZ-UML package. The diagram depicts a server-client game where players can spawn, move, and shoot bullets. The diagram shows the interactions between the two players and the server through various calls.The actors in the sequence diagram are \"Player A\" and \"Player B,\" and the object is the \"Server.\" The first call in the diagram represents the spawning of a new player. If a player spawns after another player, then an update is made to both players.The second call depicts Player B shooting a bullet and updating both players with the changes. The third call represents Player A moving, with the server updating both players again. The fourth call, which is inside a loop fragment, depicts the server's continuous game loop where it spawns health packs and updates both players with the changes.The code uses TikZ to create the diagram, and the tikz-uml package to generate UML-specific syntax, such as actors, objects, and calls. The code also creates three layers, the foreground, main, and background, for styling and ordering purposes.","keywords#Keywords":"tikz, tikz-uml, umlseqdiag, actor, object, call, fragment, loop, op, return, type, dt.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{tikz}\n\\usepackage{tikzscale}\n\\pgfdeclarelayer{background,foreground}\n\\pgfsetlayers{background,main,foreground}\n\\usepackage{tikz-uml}\n\\usepackage[english]{babel}  % load this package so tikz-uml loads, it may be due to my japanesse localle lol.\n\n\\begin{document}\n\\begin{tikzpicture}\n\\begin{umlseqdiag}\n\\umlactor{Player A}\n\\umlobject{Server}\n\\umlactor{Player B}\n\n% Player spawns, no other player on the map\n\\begin{umlcall}[op=new-player,return=update-players]{Player A}{Server}\n\\end{umlcall}\n\n% Player spawns after player A, update both\n\\begin{umlcall}[dt=7.5,op=new-player,return=update-players]{Player B}{Server}\n\n\\begin{umlcall}[type=return,op=update-players]{Server}{Player A}\n\\end{umlcall}\n\\end{umlcall}\n\n% Player B shoots a bullet\n\\begin{umlcall}[op=shoot-bullet,return=bullets-update]{Player B}{Server}\n\\begin{umlcall}[type=return,op=bullets-update]{Server}{Player A}\n\\end{umlcall}\n\\end{umlcall}\n\n% Player A Moves\n\\begin{umlcall}[op=move-player,return=update-players]{Player B}{Server}\n\\begin{umlcall}[type=return,op=update-players]{Server}{Player A}\n\\end{umlcall}\n\\end{umlcall}\n\\begin{umlfragment}[type=loop]\n\\begin{umlcallself}[dt=5,op=ServerGameLoop]{Server}\n\\begin{umlcallself}[op=spawnHealthPacks]{Server}\n\\end{umlcallself}\n% Update hearts, mini-ships on both sides\n\\begin{umlcall}[type=return,op=healthPack-update]{Server}{Player A}\n\\end{umlcall}\n\\begin{umlcall}[type=return,op=healthPack-update]{Server}{Player B}\n\\begin{umlcall}[type=return,op=bullet-update]{Server}{Player A}\n\\end{umlcall}\n\\begin{umlcall}[type=return,op=bullet-update]{Server}{Player B}\n\\end{umlcall}\n\\end{umlcall}\n\\end{umlcallself}\n\\end{umlfragment}\n\\end{umlseqdiag}\n\\end{tikzpicture}\n\n\\end{document}"}},"/EngineeringSoftwareDesign/SeqGoodExample":{"title":"Description","data":{"":"The code defines a sequence diagram using the tikz-uml package in LaTeX. The diagram includes three objects/classes B, C, and D. The fill object and fill call styles are set to white and gray, respectively. The diagram depicts a loop where B sends a message to C, and based on a condition, C may either send a message to D or assess the update and send a message back to B. The condition is depicted with an alt fragment. If C sends the message to D, D will execute the run operation before returning a message to C, which will then continue the loop. The diagram also includes three timeline markers for B, C, and D that indicate the duration between messages.","keywords#Keywords":"latex, tikz-uml, umlobject, umlseqdiag, umlfragment, umlcallself, umlcall, umlfpart, umlsdnode","source-code#Source Code":"\\documentclass[border=3mm]{standalone}\n\\usepackage[english]{babel}\n\\usepackage{tikz-uml}\n\n\\begin{document}\n\n\\begin{tikzpicture}\n\\tikzumlset{fill object = white, fill call = gray!20}\n\\begin{umlseqdiag}\n\\umlobject[class=B]{b}\n\\umlobject[class=C]{c}\n\\umlobject[class=D]{d}\n\n\n\\begin{umlfragment}[type=loop]\n\\begin{umlcallself}[op=run]{b}\n\n\\begin{umlcall}[op=send, type=asynchron]{b}{c}\n\\begin{umlfragment}[type=alt, label=condition, inner xsep=8]\n\\begin{umlcall}[op=send, type=synchron, return=send update]{c}{d}\n\\begin{umlcallself}[padding=1.5, op=run]{d}\n\\end{umlcallself}\n\\end{umlcall}\n\\begin{umlcallself}[op=assess update]{c}\n\\begin{umlcall}[op=send update, type=synchron, return=acknowledge]{c}{b}\n\\end{umlcall}\n\\begin{umlcall}[op=allow continue, padding=-2.5, type=asynchron]{c}{b}\n\\end{umlcall}\n\\end{umlcallself}\n\\umlfpart[default]\n\\begin{umlcall}[op=allow continue, type=asynchron]{c}{b}\n\\end{umlcall}\n\\end{umlfragment}\n\\end{umlcall}\n\n\\end{umlcallself}\n\n\\end{umlfragment}\n\\umlsdnode[dt=1.5]{b}\n\\umlsdnode[dt=5]{c}\n\\umlsdnode[dt=32]{d}\n\\end{umlseqdiag}\n\\end{tikzpicture}\n\\end{document}"}},"/EngineeringSoftwareDesign/Tables":{"title":"Description","data":{"":"The code is a LaTeX document that defines a table with a gray header row and alternating row colors. The table contains information related to a use case identified as \"UC1 - Login\". The table has several columns for different attributes of the use case, including identifier/name, importance, difficulty, actors, goal, preconditions, summary, steps, and postcondition. The information in the table provides details about the use case, such as the steps involved and the expected outcome. The table is formatted using the xcolor package, which defines a custom light blue color and sets row colors using the rowcolors command. The table is typeset within the document using the tabular environment.","keywords#Keywords":"latex, table, rowcolors, tabular, rowcolor, textcolor, definecolor, documentclass.","source-code#Source Code":"\\documentclass{report}\n\\usepackage[table]{xcolor}\n\\definecolor{lightblue}{rgb}{0.93,0.95,1.0}\n\n\\begin{document}\n\\rowcolors{1}{lightgray}{white}   %% <--- here\n\\noindent\n\\begin{tabular}[!ht]{>{\\bfseries}l <{\\raggedright}p{10cm}}\n\\rowcolor{black!90}\\textcolor{white}{Identifier/Name} & \\textcolor{white}{\\textbf{UC1 - Login}}  \\\\\nImportance    & 5/5\\\\\nDifficulty    & 1/5\\\\\nActor(s)      & Generalized User\\\\\nGoal          & To allow the user to access the system.\\\\\nPreconditions & The user is at the login page. \\\\\nSummary       & Will validate the users name and password and subsequently give them access to the\nsystem.\\\\\nSteps         &\n{\\begin{tabular}{@{}p{4cm} | p{4cm}@{}}\n1. User provides username and password. & 2. System directs user to main system page. \\\\\n\\end{tabular}} \\\\\nPostcondition & \\textbf{Success:} User is logged in. \\newline \\textbf{Failure:} The system reamins at the login state. \\\\\n\\end{tabular}\n\\end{document}"}},"/EngineeringSoftwareDesign/WBSChart":{"title":"Description","data":{"":"The code defines a forest environment with different styles for the nodes in a tree. The forest uses the TikZ package and sets different styles for the nodes to create a tree with various colors and shapes. The tree has three levels of nodes, where the first level is the root node and the second and third levels are onode and xnode, respectively. Each node has a different text width, fill color, and shape, with the root node being green and rounded, the onode being green with rounded corners, and the xnode being blue with rounded corners. The tree is created using the forest package, and the edges between the nodes are drawn using arrows with different styles, including a latex arrow tip.","keywords#Keywords":"forest, tikzset, basic, root, onode, tnode, xnode, wnode, edge from parent, grow, growth parent anchor, parent anchor, child anchor, edge path.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{forest}\n\\usetikzlibrary{arrows.meta,shapes,positioning,shadows,trees}\n%\n\\tikzset{\nbasic/.style  = {draw, text width=2cm, drop shadow, font=\\sffamily, rectangle},\nroot/.style   = {basic, rounded corners=2pt, thin, align=center,\nfill=green!30},\nonode/.style = {basic, thin, rounded corners=2pt, align=center, fill=green!60,text width=3cm,},\ntnode/.style = {basic, thin, align=left, fill=pink!60, text width=6.5em},\nxnode/.style = {basic, thin, rounded corners=2pt, align=center, fill=blue!20,text width=5cm,},\nwnode/.style = {basic, thin, align=left, fill=pink!10!blue!80!red!10, text width=6.5em},\nedge from parent/.style={draw=black, edge from parent fork right}\n\n}\n%\n\\begin{document}\n\\begin{forest} for tree={\ngrow=east,\ngrowth parent anchor=east,\nparent anchor=east,\nchild anchor=west,\nedge path={\\noexpand\\path[\\forestoption{edge},->, >={latex}]\n(!u.parent anchor) -- +(5pt,0pt) |- (.child anchor)\n\\forestoption{edge label};}\n}\n[Networked Game Work BreakDown, root\n[Software Engineering Report, xnode\n[Setting shape, tnode]\n[Choosing color, tnode]\n[Adding shading, tnode] ]\n[Game Demo Preparation, onode\n[Using a Matrix, tnode]\n[Relatively, tnode]\n[Absolutely, tnode]\n[Using overlays, wnode] ]\n[Project Proposal and Game Logic, onode\n[Default arrows, tnode]\n[Arrow library, tnode]\n[Resizing tips, tnode]\n[Shortening, tnode]\n[Bending, tnode] ] ]\n\\end{forest}\n\\end{document}"}},"/EngineeringSoftwareDesign/basicBlock":{"title":"Description","data":{"":"The code creates a block diagram using the \"blox\" package, where the blocks are connected in a chain. The \"steinmetz\" package is used to typeset the phase symbol. The \"positioning\" library is used to position the blocks. The diagram represents a simple pipelined processor consisting of five stages, identified as \"IF\", \"ID\", \"EXE\", \"Mem\", and \"WB\". The blocks are labeled with the corresponding stage names, except for the second block which is labeled as \"\". The input block is labeled as \"E\".","keywords#Keywords":"TikZ, blox, steinmetz, positioning, circuits.","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{blox}\n\\usepackage{tikz}\n\\usepackage{steinmetz}\n\\usetikzlibrary{positioning}\n\n\\usetikzlibrary{circuits}\n\\begin{document}\n\n\\begin{tikzpicture}\n\\bXInput{E}\n\\bXChain[2]{E}%\n{Md/IF,fred/$ID\\phase{RR}$,head/EXE,Fun/Mem, Games/WB}\n\\end{tikzpicture}\n\\end{document}"}},"/EngineeringSoftwareDesign/betterClientServer":{"title":"Description","data":{"":"The code defines a TikZ picture that contains a module diagram with labeled boxes and arrows. The TikZ library positioning, matrix, and shapes.arrows are used. The tikzset command is used to define the styles for the different modules and arrows.The diagram consists of five modules, labeled as A, B, C, D, and E, and labeled with descriptions. The module B is a matrix of two nodes with descriptions 1 and 2. Module C is a matrix of two nodes with descriptions 3 and 4. Module D is a matrix of two nodes with descriptions 5 and 6. Modules A and E are simple modules, and each has a down arrow pointing to the next module.Arrows are drawn between the modules, with the arrow style depending on the direction. Modules A, C-1-1, C, and D have down arrows, while modules B-1-1, B, and D-1-1 have right arrows.","keywords#Keywords":"tikz, positioning, matrix, shapes, arrows.","source-code#Source Code":"\\documentclass[border=3mm]{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning,matrix,shapes.arrows}\n\n\\tikzset{\nmodulematrix/.style={draw=blue!50!red,rounded corners,matrix of nodes,row sep=1cm,column sep=1cm,nodes={draw=green!70,align=center,font=\\sffamily},inner ysep=0.5cm},\nmodule/.style={rounded corners, align=center, font=\\sffamily, thick},\nsimple module/.style={module, top color=blue!10, bottom color=blue!35, draw=blue!75, text width=40mm, minimum height=15mm},\nmodule down arrow/.style={module arrow, shape border rotate=-90},\nmodule right arrow/.style={module arrow},\nmodule arrow/.style={single arrow, single arrow head extend=2.5mm, draw=gray!75, inner color=gray!20, outer color=gray!35, thick, shape border uses incircle, anchor=tail,minimum height=0.7cm},\n}\n\\begin{document}\n\\begin{tikzpicture}\n\\node [simple module] (mA) {Module A};\n\\matrix[modulematrix,below=of mA,label={[anchor=south]below:Module B}] (mB) {Description 1 & Description 2 \\\\};\n\\matrix[modulematrix,right=of mB,nodes={text width=5cm,align=center},label={[anchor=north]above:Module C}] (mC) {Description 3 \\\\ Description 4 \\\\};\n\\matrix[modulematrix,below=of mC,label={[anchor=south]below:Module D}] (mD) {Description 5 & Description 6 \\\\};\n\\node [simple module,below=of mD] (mE) {Module E};\n\n\\foreach \\n in {mA,mC-1-1,mC,mD}\n\\node[module down arrow,below=1mm of \\n] {};\n\n\\foreach \\n in {mB-1-1,mB,mD-1-1}\n\\node[module right arrow,right=1mm of \\n] {};\n\\end{tikzpicture}\n\\end{document}"}},"/EngineeringSoftwareDesign/bytefieldCENG356A2":{"title":"Description","data":{"":"The code is a LaTeX document that defines two bytefields using the bytefield package. The first bytefield has a total of 64 bits, divided into two colorbitboxes colored light cyan and light green respectively. The second bytefield has a total of 40 bits, divided into two colorbitboxes colored lightsomething and lightsomething2 respectively. The code also defines several colors using the \\definecolor command and uses packages such as graphicx, graphics, xcolor, and subcaption. The purpose of this code is to create a visual representation of bitfields.","keywords#Keywords":"bytefield, graphicx, graphics, xcolor, subcaption, bitbox, bitheader, definecolor.","source-code#Source Code":"\\documentclass[border=5pt]{standalone}\n\\usepackage{bytefield}\n\\usepackage{graphicx}\n\\usepackage{graphics}\n\\usepackage{xcolor}\n\\usepackage{subcaption}\n\\begin{document}\n\\definecolor{lightcyan}{rgb}{0.84,1,1}\n\\definecolor{lightgreen}{rgb}{0.64,1,0.71}\n\\newcommand{\\colorbitbox}[3]{%\n\\rlap{\\bitbox{#2}{\\color{#1}\\rule{\\width}{\\height}}}%\n\\bitbox{#2}{#3}}\n\\begin{bytefield}[bitwidth=2pt,bitheight=\\widthof{~Sign~},\nboxformatting={\\centering\\small}]{64}\n\\bitheader[endianness=big]{63,13,0} \\\\\n\\colorbitbox{lightcyan}{50}{VPN} &\n\\colorbitbox{lightgreen}{14}{Page Offset}\n\\end{bytefield} \\hfill \\break \\newline\n\n\\definecolor{lightsomething}{rgb}{0.84,0.7,0.7}\n\\definecolor{lightsomething2}{rgb}{0.64,0.5,0.71}\n\\begin{bytefield}[bitwidth=2pt,bitheight=\\widthof{~Sign~},\nboxformatting={\\centering\\small}]{40}\n\\bitheader[endianness=big]{39,13,0} \\\\\n\\colorbitbox{lightsomething}{26}{FPN} &\n\\colorbitbox{lightsomething2}{14}{Frame Offset}\n\\end{bytefield}\n\n\\end{document}"}},"/EngineeringSoftwareDesign/bytefieldTest":{"title":"Description","data":{"":"This LaTeX code defines four bytefields using the bytefield package for typesetting binary data structures.The first bytefield is a simple 16-bit sequence with three 4-bit boxes for \"src\", \"dest\", and \"const\". The second bytefield has a more complex structure, with a header section containing a 4-bit \"Tag\" box and a 12-bit \"Mask\" box, and a 16-bit \"Source\" box and an 8-bit \"Destination\" box. The third bytefield uses custom colors to represent a 32-bit floating point number using a 1-bit sign box, an 8-bit exponent box, and a 23-bit mantissa box. The fourth bytefield is a TCP header layout using various box sizes to represent different fields and headers, including a custom key-value field, a timestamp, and a 64-bit random number.","keywords#Keywords":"bytefield, xcolor, graphicx, bitboxes, bitbox, bitheader, wordbox, rightwordgroup, leftwordgroup.","source-code#Source Code":"\\documentclass{article}\n\\usepackage{bytefield}\n\\usepackage{xcolor}\n\\usepackage{graphicx}\n\\begin{document}\n\\begin{bytefield}{16}\n\\bitboxes*{1}{01000010} & \\bitbox{4}{src\\strut} &\n\\bitbox{4}{dest\\strut} & \\bitbox{4}{const\\strut}\n\\end{bytefield}\n\\section{More testing}\n\\begin{bytefield}{16}\n\\bitheader{0,7,8,15} \\\\\n\\begin{rightwordgroup}{Header}\n\\bitbox{4}{Tag} & \\bitbox{12}{Mask} \\\\\n\\bitbox{8}{Source} & \\bitbox{8}{Destination}\n\\end{rightwordgroup} \\\\\n\\wordbox{3}{Data}\n\\end{bytefield}\n\\section{Games}\n\\medskip\n\\newcommand{\\colorbitbox}[3]{%\n\\rlap{\\bitbox{#2}{\\color{#1}\\rule{\\width}{\\height}}}%\n\\bitbox{#2}{#3}}\n\\definecolor{lightcyan}{rgb}{0.84,1,1}\n\\definecolor{lightgreen}{rgb}{0.64,1,0.71}\n\\definecolor{lightred}{rgb}{1,0.7,0.71}\n\\begin{bytefield}[bitheight=\\widthof{~Sign~},\nboxformatting={\\centering\\small}]{32}\n\\bitheader[endianness=big]{31,23,0} \\\\\n\\colorbitbox{lightcyan}{1}{\\rotatebox{90}{Sign}} &\n\\colorbitbox{lightgreen}{8}{Exponent} &\n\\colorbitbox{lightred}{23}{Mantissa}\n\\end{bytefield}\n\\section{Games}\n\\medskip\n\\begin{bytefield}[bitheight=2.5\\baselineskip]{32}\n\\bitheader{0,7,8,15,16,23,24,31} \\\\\n\\begin{rightwordgroup}{\\parbox{6em}{\\raggedright These words were taken\nverbatim from the TCP header definition (RFC~793).}}\n\\bitbox{4}{Data offset} & \\bitbox{6}{Reserved} &\n\\bitbox{1}{\\tiny U\\\\R\\\\G} & \\bitbox{1}{\\tiny A\\\\C\\\\K} &\n\\bitbox{1}{\\tiny P\\\\S\\\\H} & \\bitbox{1}{\\tiny R\\\\S\\\\T} &\n\\bitbox{1}{\\tiny S\\\\Y\\\\N} & \\bitbox{1}{\\tiny F\\\\I\\\\N} &\n\\bitbox{16}{Window} \\\\\n\\bitbox{16}{Checksum} & \\bitbox{16}{Urgent pointer}\n\\end{rightwordgroup} \\\\\n\\wordbox[lrt]{1}{Data octets} \\\\\n\\skippedwords \\\\\n\\wordbox[lrb]{1}{} \\\\\n\\begin{leftwordgroup}{\\parbox{6em}{\\raggedright Note that we can display,\nfor example, a misaligned 64-bit value with clever use of the\noptional argument to \\texttt{\\string\\wordbox} and\n\\texttt{\\string\\bitbox}.}}\n\\bitbox{8}{Source} & \\bitbox{8}{Destination} &\n\\bitbox[lrt]{16}{} \\\\\n\\wordbox[lr]{1}{Timestamp} \\\\\n\\begin{rightwordgroup}{\\parbox{6em}{\\raggedright Why two Length fields?\nNo particular reason.}}\n\\bitbox[lrb]{16}{} & \\bitbox{16}{Length}\n\\end{leftwordgroup} \\\\\n\\bitbox{6}{Key} & \\bitbox{6}{Value} & \\bitbox{4}{Unused} &\n\\bitbox{16}{Length}\n\\end{rightwordgroup} \\\\\n\\wordbox{1}{Total number of 16-bit data words that follow this\nheader word, excluding the subsequent checksum-type value} \\\\\n\\bitbox{16}{Data~1} & \\bitbox{16}{Data~2} \\\\\n\\bitbox{16}{Data~3} & \\bitbox{16}{Data~4} \\\\\n\\bitbox[]{16}{$\\vdots$ \\\\[1ex]} &\n\\bitbox[]{16}{$\\vdots$ \\\\[1ex]} \\\\\n\\bitbox{16}{Data~$N-1$} & \\bitbox{16}{Data~$N$} \\\\\n\\bitbox{20}{\\[ \\mbox{A5A5}_{\\mbox{\\scriptsize H}} \\oplus\n\\left(\\sum_{i=1}^N \\mbox{Data}_i \\right) \\bmod 2^{20} \\]} &\n\\bitboxes*{1}{000010 000110} \\\\\n\\wordbox{2}{64-bit random number}\n\\end{bytefield}\n\\end{document}"}},"/EngineeringSoftwareDesign/commandPrompt":{"title":"Description","data":{"":"The code is a LaTeX document that includes the packages xcolor and listings. It defines a new style for listings called \"DOS\", which sets the background color to black and the text color to white with a small size and a monospace font. The code then includes a listing environment with the \"DOS\" style that displays a command prompt session output. The output shows various messages related to a game server, including players joining and disconnecting, spawning of objects, and collisions between players and health packs.","keywords#Keywords":"TikZ, graphics, nodes, arrows, styles, positioning","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{xcolor}\n\\usepackage{listings}\n\n\n\\lstdefinestyle{DOS}\n{\nbackgroundcolor=\\color{black},\nbasicstyle=\\scriptsize\\color{white}\\ttfamily\n}\n\\begin{document}\n\\begin{lstlisting}[style=DOS]\nMicrosoft Windows [Version 6.1.7601]\nCopyright (c) 2009 Microsoft Corporation. All rights reserved.\n\nC:> node server\nlistening on port 8000\nNew player joined with state: { x: 889.8103577555021,\ny: 752.1248414312639,\nangle: 0,\ntype: '6',\nhealth: 100 }\nSpawning DriftWood (316.6456740652798,706.8880647171098)\nNew player joined with state: { x: 849.9970300626003,\ny: 818.0782645328588,\nangle: 0,\ntype: '5',\nhealth: 100 }\nSpawning DriftWood (729.4982454697532,698.3670219092813)\nSpawning Health Pack (302.4444058918867,648.1832695147405)\nPlayer: [l-CPwPTDumIpyxZJAAAA], hit by bullet\nDriftWood number [0] destroyed by bullet [4]\nBullet [0] destroyed because it went offscreen (1057.767911147365,-15.736576261039652)\nSpawning DriftWood (677.7964228519133,198.37306259674156)\nSpawning Health Pack (696.4702310426835,208.46569810396736)\nSpawning DriftWood (651.8236801243313,27.688863345238822)\nBullet [0] destroyed because it went offscreen (-13.088735950588386,764.9687287294422)\nCollision between player[00-i166b_J4WWW3tAAAB], healthPack[0]\nPlayer disconnected with state:  transport close\nPlayer disconnected with state:  transport close\n\\end{lstlisting}\n\\end{document}"}},"/EngineeringSoftwareDesign/fileDirectory":{"title":"Description","data":{"":"The code is a LaTeX document that produces a directory tree diagram using the TikZ and Forest packages. The code defines some colors, a folded paper icon, and some icons for folders and files. The directory tree is created using a forest environment with options for customizing the style of the tree nodes. The directory structure is specified using a series of nested nodes, with each node representing a directory or file and associated with the appropriate icon. The resulting diagram shows a file system structure with files and directories arranged hierarchically.","keywords#Keywords":"latex, tikz, circuit, electrical circuit, circuitikz, resistor, capacitor, inductor, ground, current source, voltage source.","source-code#Source Code":"\\documentclass[border=10pt,multi,tikz]{standalone}\n\\usepackage[edges]{forest}\n\\definecolor{folderbg}{RGB}{124,166,198}\n\\definecolor{folderbg3}{RGB}{24,206,148}\n\\definecolor{folderborder}{RGB}{110,144,169}\n\\def\\foldedpaper#1{\n\\tikz[scale=#1,line width={#1*1pt}]{\n\\def\\a{1.41} % relative height\n\\def\\b{0.2}  % relative height/width of corner\n\\def\\c{0.1}  % relative margin width (on either side)\n\\def\\d{0.05} % vertical offset of lines\n\\def\\N{6}    % number of lines\n\\draw         (0,0)\n--  ++(-1,0)\n--  ++(0,\\a)\n--  ++(1-\\b,0)\n--  ++(\\b,-\\b)\n-- cycle;\n\\foreach \\lnum in {1,...,\\N}{\n\\pgfmathsetmacro\\yline{\\a-\\d-\\lnum*\\a/(\\N+1)}\n\\draw (-1+\\c,\\yline) -- (-\\c,\\yline);\n}\n\\draw[fill=white] (0,\\a-\\b) -- ++(-\\b,0) -- ++ (0,\\b);\n}\n}\n\\newlength\\Size\n\\setlength\\Size{4pt}\n\\tikzset{%\nfolder/.pic={%\n\\filldraw [draw=folderborder, top color=folderbg!50, bottom color=folderbg] (-1.05*\\Size,0.2\\Size+5pt) rectangle ++(.75*\\Size,-0.2\\Size-5pt);\n\\filldraw [draw=folderborder, top color=folderbg!50, bottom color=folderbg] (-1.15*\\Size,-\\Size) rectangle (1.15*\\Size,\\Size);\n},\nfile/.pic={%\n\\filldraw [draw=folderborder, top color=folderbg!5, bottom color=folderbg!10] (-\\Size,.4*\\Size+5pt) coordinate (a) |- (\\Size,-1.2*\\Size) coordinate (b) -- ++(0,1.6*\\Size) coordinate (c) -- ++(-5pt,5pt) coordinate (d) -- cycle (d) |- (c) ;\n},\nfile2/.pic={%\n\\filldraw [draw=folderborder, top color=folderbg3!20, bottom color=folderbg3!50] (-\\Size,.4*\\Size+5pt) coordinate (a) |- (\\Size,-1.2*\\Size) coordinate (b) -- ++(0,1.6*\\Size) coordinate (c) -- ++(-5pt,5pt) coordinate (d) -- cycle (d) |- (c) ;\n},\nnone/.pic={%\n},\n}\n\\forestset{%\ndeclare autowrapped toks={pic me}{},\npic dir tree/.style={%\nfor tree={%\nfolder,\nfont=\\ttfamily,\ngrow'=0,\n},\nbefore typesetting nodes={%\nfor tree={%\nedge label+/.option={pic me},\n},\n},\n},\npic me set/.code n args=2{%\n\\forestset{%\n#1/.style={%\ninner xsep=2\\Size,\npic me={pic {#2}},\n}\n}\n},\npic me set={directory}{folder},\npic me set={file}{file},\npic me set={file2}{file2},\npic me set={none}{none},\n}\n\\begin{document}\n\n\\begin{forest}\npic dir tree,\nwhere level=0{}{% folder icons by default; override using file for file icons\ndirectory,\n},\n[system\n[assets\n[ship.png, file\n]\n[water.png, file\n]\n[cannonball.png, file\n]\n]\n[js\n[client.js,file2\n]\n[healthMeter.js, file\n]\n]\n[package.json, file\n]\n[index.html, file2\n]\n[server.js, file2\n]\n]\n\\end{forest}\n\\end{document}"}},"/EngineeringSoftwareDesign/document":{"title":"Description","data":{"":"This is a LaTeX document that includes a TikZ picture. The picture is a number line with ticks marking various points on the line, and with labels \"i\" through \"vi\" beneath the line indicating the position of those ticks. There are three lines connecting the labels \"v\" and \"vi,\" one straight, one bending left, and one curving upwards to the right. The second TikZ picture is commented out and is an alternate version of the first picture with different lines connecting \"v\" and \"vi.\" The document class is \"standalone\" with a 12pt font size, and the \"inputenc\" package is used to support unicode characters.","keywords#Keywords":"tikzpicture, draw, foreach, node, latex-latex, blue, red, bend left, out, in.","source-code#Source Code":"\\documentclass[12pt,a4paper]{standalone}\n\\usepackage[utf8]{inputenc}\n\\usepackage[T1]{fontenc}\n\\usepackage{tikz}\n\\begin{document}\n\n\\begin{tikzpicture}\n\\draw (0,0) -- (13,0);\n\\foreach \\x in {0,2,4,6,8,12,13}\n\\draw (\\x cm,3pt) -- (\\x cm,-3pt);\n\\draw (0,0) node[below=3pt] (a) {$(i)$} node[above=3pt] {};\n\\draw (2,0) node[below=3pt] (b) {} node[above=3pt] {$(ii)$};\n\\draw (4,0)  node[below=3pt]  {$(iii)$} node[above=3pt] (c) {};\n\\draw (6,0) node[below=3pt](d) {} node[above=3pt] {$(iv)$};\n\\draw (8,0) node[below=3pt](e) {$(v)$} node[above=3pt] {};\n\\draw (12,0) node[above=3pt] (f) {$(vi)$} node[below=3pt] {};\n\\draw[latex-latex]\n(e.north) -- (f.north);\n\\draw[latex-latex,blue]\n(e.north) to[bend left] (f.north);\n\\draw[latex-latex,red]\n(e.north) to[out=60,in=150] (f.north);\n\\end{tikzpicture}\\qquad\n%\t\\begin{tikzpicture}\n%\t\\draw (0,0) -- (13,0);\n%\t\\foreach \\x in {0,2,4,6,8,12,13}\n%\t\\draw (\\x cm,3pt) -- (\\x cm,-3pt);\n%\t\\draw (0,0) node[below=3pt] (a) {$(i)$} node[above=3pt] {};\n%\t\\draw (2,0) node[below=3pt] (b) {} node[above=3pt] {$(ii)$};\n%\t\\draw (4,0)  node[below=3pt]  {$(iii)$} node[above=3pt] (c) {};\n%\t\\draw (6,0) node[below=3pt](d) {} node[above=3pt] {$(iv)$};\n%\t\\draw (8,0) node[below=3pt](e) {$(v)$} node[above=3pt] {};\n%\t\\draw (12,0) node[above=3pt] (f) {$(vi)$} node[below=3pt] {};\n%\t\\draw[latex-latex]\n%\t(e.north|-f.north) -- (f.north);\n%\t\\draw[latex-latex,blue]\n%\t(e.north|-f.north) to[bend left] (f.north);\n%\t\\draw[latex-latex,red]\n%\t(e.north|-f.north) to[out=60,in=120] (f.north);\n%\t\\end{tikzpicture}\n\n\\end{document}"}},"/EngineeringSoftwareDesign/serverClient":{"title":"Description","data":{"":"The code is a LaTeX document that creates a sequence diagram using the pgf-umlsd package. The diagram shows a simple example of client-server messaging with two threads: a client and a server. The document begins with the definition of a new command \"bloodymess\" that draws arrows between the client and server and specifies their direction and content. The sequence diagram is then created using the \"sequencediagram\" environment, and two instances \"c\" and \"s\" are defined for the client and server, respectively. Four \"bloodymess\" commands are used to show the flow of communication between the client and server. The first message shows the client requesting access to the server, the second message shows the server granting access, the third message shows the client acknowledging the access, and the final message shows the server sending data to the client and acknowledging the receipt. The diagram is labeled with start and end notes. The output is a PDF image of the sequence diagram.","keywords#Keywords":"latex, diagram, float, tikz, positioning, fit, calc, shapes, arrows, pgf-umlsd, sequencediagram, newinst, bloodymess, inst, Requesting Access to Server, Access Granted, Acknowledgement, 2nd handshake begins, Send Data and Acknowledge.","source-code#Source Code":"\\documentclass[ border={60pt 0pt 55pt 0pt}\n% left bottom right top] real order is left bottom right top\n]{standalone}\n\\usepackage{float}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning, fit, calc, shapes, arrows}\n\\usepackage[underline=false]{pgf-umlsd}\n% message between threads\n% Example:\n% \\bloodymess[delay]{sender}{message content}{receiver}{DIR}{start note}{end note}\n\\newcommand{\\bloodymess}[7][0]{\n\\stepcounter{seqlevel}\n\\path\n(#2)+(0,-\\theseqlevel*\\unitfactor-0.7*\\unitfactor) node (mess from) {};\n\\addtocounter{seqlevel}{#1}\n\\path\n(#4)+(0,-\\theseqlevel*\\unitfactor-0.7*\\unitfactor) node (mess to) {};\n\\draw[->,>=angle 60] (mess from) -- (mess to) node[midway, above]\n{#3};\n\n\\if R#5\n\\node (#3 from) at (mess from) {\\llap{#6~}};\n\\node (#3 to) at (mess to) {\\rlap{~#7}};\n\\else\\if L#5\n\\node (#3 from) at (mess from) {\\rlap{~#6}};\n\\node (#3 to) at (mess to) {\\llap{#7~}};\n\\else\n\\node (#3 from) at (mess from) {#6};\n\\node (#3 to) at (mess to) {#7};\n\\fi\n\\fi\n}\n\\begin{document}\n\n%\\begin{figure}[H]\n%    \\centering\n\\begin{sequencediagram}\n\\newinst{c}{Client}\n\\newinst[6]{s}{Server}\n\n\\bloodymess[1]{c}{Requesting Access to Server}{s}{R}{Start}{Server receives}\n\\bloodymess[1]{s}{Access Granted}{c}{L}{Server responds}{}\n\\bloodymess[1]{c}{Acknowledgement}{s}{R}{2nd handshake begins}{Server receives}\n\\bloodymess[1]{s}{Send Data and Acknowledge}{c}{L}{}{End}\n\\end{sequencediagram}\n%\\caption{Client-Server messaging example}\n%\\end{figure}\n\\end{document}"}},"/EngineeringSoftwareDesign/timeline":{"title":"Description","data":{"":"This is a LaTeX code that creates a timeline diagram using TikZ library. It starts with defining the document class as \"standalone\" with a font size of 6pt, and loading the TikZ and fullpage packages.Then, a TikZ picture environment is started, which draws a horizontal line and vertical lines at specific points on the x-axis. The nodes, which are rectangular shapes containing text, are drawn at the bottom of the diagram for each event on the timeline. The nodes are aligned at the bottom of the diagram, with a text width of up to 100pt, and an above or below label that specifies the date of the event. The text of the first and last nodes is bolded, highlighting the beginning and end of the timeline.Finally, the picture is closed, and the code finishes with the end of the document.","keywords#Keywords":"TikZ, standalone, library, fullpage, nodes, horizontal line, vertical lines, text, alignment, dates.","source-code#Source Code":"\\documentclass[6pt]{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{snakes}\n\\usepackage{fullpage}\n\n\\begin{document}\n\n\n%\n%\\begin{figure}\n%\\caption{Time Line}\n%\\centering\n%\\resizebox{\\linewidth}{!}{% Resize table to fit within\n\n\\begin{tikzpicture}[]\n%draw horizontal line\n\\draw (0,0) -- (41/1.7,0);\n%draw vertical lines\n\\foreach \\x in {0, 8, 15, 22, 29, 36, 41}{\n\\draw (\\x/1.7,3pt) -- (\\x/1.7,-3pt);\n}\n%draw nodes\n\\draw (0,0) node[text width = 85pt,align=center,below=3pt] {\\textbf{Submit Project Proposal}} node[above=3pt] {Nov 17 2017};\n\\draw (8/1.7,0) node[below=3pt] {Find Game Engine} node[above=3pt] {Nov 20 2017};\n\\draw (15/1.7,0) node[text width = 100pt,align=center,below=3pt] {Create Server-Client Architecture} node[above=3pt] {Nov 25 2017};\n\\draw (22/1.7,0) node[text width = 100pt,align=center,below=3pt] {Implement Game Logic} node[above=3pt] {Nov 29 2017};\n\\draw (29/1.7,0) node[text width = 100pt,align=center,below=3pt] {Add Music and Effects} node[above=3pt] {Dec 1 2017};\n\\draw (36/1.7,0) node[text width = 100pt,align=center,below=3pt] {\\textbf{In Class Demo}} node[above=3pt] {Dec 2 2017};\n\\draw (41/1.7,0) node[below=3pt] {\\textbf{Finish Report}} node[above=3pt] {Dec 12 2017};\n\\end{tikzpicture}\n%}\n%\\label{fig:time_line}\n%\\end{figure}\n\\end{document}"}},"/PCC/Cube4":{"title":"Description","data":{"":"This is a LaTeX code that produces a 3D diagram using the TikZ package.First, it loads the TikZ and tikz-3dplot packages and the patterns library. Then, it sets the main coordinate system using the tdplotsetmaincoords command.Next, it defines the values of three variables: \\BigSide, \\SmallSide, and \\CalcSide. These variables are used to create the vertices of a triangular pyramid.After that, it sets the coordinates of three points (sxl, syl, and szl) using the \\coordinate command.Then, it draws the x, y, and z axes, which are dashed lines that intersect at the origin. Each axis is labeled with an arrow and a letter.Finally, it draws the triangular pyramid by connecting the vertices with thick lines using the \\draw command. The resulting 3D diagram shows the triangular pyramid from different angles.","keywords#Keywords":"tikz, tikz-3dplot, patterns, coordinate, draw, dashed, arrow, thick, node, anchor.","source-code#Source Code":"\\documentclass{article}\n\\usepackage{tikz}\n\\usepackage{tikz-3dplot}\n\\usetikzlibrary{patterns}\n\n\\begin{document}\n\n\\tdplotsetmaincoords{70}{120}\n\\begin{tikzpicture}[tdplot_main_coords]\n\\def\\BigSide{5}\n\\def\\SmallSide{1.5}\n\\pgfmathsetmacro{\\CalcSide}{\\BigSide-\\SmallSide}\n\n% The vertex at V\n\\tdplotsetcoord{P}{sqrt(3)*\\BigSide}{55}{45}\n\n\\coordinate (sxl) at (\\BigSide,\\CalcSide,\\BigSide);\n\\coordinate (syl) at (\\CalcSide,\\CalcSide,\\BigSide);\n\\coordinate (szl) at (\\CalcSide,\\BigSide,\\BigSide);\n\n\\draw[dashed]\n(0,0,0) -- (Px)\n(0,0,0) -- (Py)\n(0,0,0) -- (Pz);\n\\draw[->]\n(Px) -- ++ (1,0,0) node[anchor=north east]{$x$};\n\\draw[->]\n(Py) -- ++(0,1,0) node[anchor=north west]{$y$};\n\\draw[->]\n(Pz) -- ++(0,0,1) node[anchor=south]{$z$};\n\n\\draw[thick]\n(Pxz) -- (P) -- (Pxy) -- (Px) -- (Pxz) -- (Pz) -- (Pyz) -- (P);\n\\draw[thick]\n(Pyz) -- (Py) -- (Pxy);\n\n\n\\end{tikzpicture}\n\n\\end{document}"}},"/PCC/crazyDia":{"title":"Description","data":{"":"This code defines a TikZ picture environment that can be used to draw a hypercube graph. A hypercube graph is a graph where each vertex is connected to its neighbors by an edge, forming a cube-like shape. In this case, the hypercube graph has 8 vertices, which are labeled using a binary notation (0 or 1) with an underscore separator (for example, 0_0, 0_1, 1_0, etc.).The hypercube graph is drawn using the TikZ library, and the nodes are represented as circles filled with blue color. The edges are drawn using blue lines. The nodes are arranged in a way that each node is connected to four neighbors.The code also defines a way to label each node in the graph with its binary notation. The labels are drawn below each node, and the text color of the label can be customized. Additionally, the code defines a way to draw the hypercube graph with adjustable wall height, roof overhang, and roof angle.To use the code, you can adjust the hypercube parameters in the pics/hypercube style, such as the wall height, roof overhang, and roof angle. To add node labels, you can use the pics/hclabels style and provide the node index, the label text, and the text color as arguments. Finally, the TikZ picture environment can be used to draw the hypercube graph and the node labels.","keywords#Keywords":"tikz, documentclass, standalone, begin, end, tikzpicture, draw, node, rectangle, coordinate, path, fill, above, right, of, below, left, edge, style","source-code#Source Code":"\\documentclass[varwidth=true,varwidth=\\maxdimen]{standalone}\n\\usepackage{lmodern}\n% (2) specify encoding\n\\usepackage[T1]{fontenc}\n\n% (3) load symbol definitions\n\\usepackage{textcomp}\n\\usepackage{tikz}\n\\usepackage{ifthen}\n\\usetikzlibrary{arrows,positioning}\n\n% Load tikz library in file \"tikzlibraryBES.code.tex\"\n\\tikzset{\n% House\nhcnode/.style={circle,draw,fill=blue!30, minimum size=30},\nhclink/.style={text=blue!30,fill=blue!30},\nhclabel/.style={text width= 2cm, align=center},\n% hypercube label pics\npics/hclabels/.style args={#1/#2/#3}{\ncode={\n\n% for convience using 0 to 7\n% \\node[hclabel] (h10) at (0,0)\n\\foreach \\c [count=\\x from 0] in {{0\\textunderscore0},{0\\textunderscore1},{0\\textunderscore2},{0\\textunderscore3},{1\\textunderscore1},{1\\textunderscore0}, {1\\textunderscore3},{1\\textunderscore2}}\n\\ifthenelse{\\x = #1}\n{}\n{\n% loop through list of colored nodes\n\\foreach\\n/\\co in {#3}\n\\ifthenelse{\\x = \\n}\n{\\node[text=\\co!60] at (0,-0.5*\\x) {#2 $ \\rightarrow $ \\c};}\n{\\node at (0,-0.5*\\x) {#2 $ \\rightarrow $ \\c};}\n;\n}\n;\n}},\npics/hclabels/.default=0/0\\textunderscore0/35,\n% hypercube\npics/hypercube/.style args={#1/#2/#3}{\ncode={\n% Define house parameters\n\\newcommand\\wallheight{#1}  % 0.65\n\\newcommand\\roofoverhang{#2}  % 0.15\n\\newcommand\\roofangle{#3}  % 35\n\n% Calculate some dependent sizes\n\\pgfmathsetmacro\\lengthroof{0.5/cos(\\roofangle)+\\roofoverhang}\n\n% draw profile of house\n% \\draw[line width=1pt] (-0.5,\\wallheight) -- (-0.5,0) --  (0.5,0) -- (0.5,\\wallheight) -- ++(-\\roofangle:\\roofoverhang) -- ++(180-\\roofangle:\\lengthroof) -- ++(180+\\roofangle:\\lengthroof) -- cycle;\n\\node[hcnode] at (0, 0) (00) {0\\textunderscore0};\n\\node[hcnode] at (3, 0) (01) {0\\textunderscore1};\n\\node[hcnode] at (0, -3) (02) {0\\textunderscore2};\n\\node[hcnode] at (3, -3) (03) {0\\textunderscore3};\n\n\\node[hcnode] at (10, 0) (11) {1\\textunderscore1};\n\\node[hcnode] at (13, 0) (10) {1\\textunderscore0};\n\\node[hcnode] at (10, -3) (13) {1\\textunderscore3};\n\\node[hcnode] at (13, -3) (12) {1\\textunderscore2};\n\n% Arrows last\n% Draw blue links\n\\path[draw,blue!30] (00) -- (01) -- (03) -- (02) -- (00);\n\\path[draw,blue!30] (11) -- (10) -- (12) -- (13) -- (11);\n% inner links\n\\draw [-,blue!30] (01) to [out=30,in=150] (11);\n\\draw [-,blue!30] (03) to [out=-30,in=-150] (13);\n% outer links\n\\draw [-,blue!30] (00) to [out=30,in=150] (10);\n\\draw [-,blue!30] (02) to [out=-30,in=-150] (12);\n% Draw green links\n\n% Draw Red links\n}},\npics/hypercube/.default=0.65/0.15/35\n}\n\n\\begin{document}\n\\begin{tikzpicture}\n\\path (+1.5,-0.85) pic[scale=1.0] {hypercube};\n% Labels for Node 0\n\\path (0,1.5) pic[scale=1.0] {hclabels=0/0\\textunderscore0/{0/black}};\n% Labels for Node 2\n\\path (0,-3.5) pic[scale=1.0] {hclabels=2/0\\textunderscore2/{2/black}};\n% Labels for Node 1\n\\path (6,2.5) pic[scale=1.0] {hclabels=1/0\\textunderscore1/{1/black}};\n% Labels for Node 3\n\\path (6,-3.5) pic[scale=1.0] {hclabels=3/0\\textunderscore3/{3/black}};\n\n% Labels for Node 0\n\\path (16.5,1.5) pic[scale=1.0] {hclabels=5/1\\textunderscore0/{5/black}};\n% Labels for Node 2\n\\path (16.5,-3.5) pic[scale=1.0] {hclabels=7/1\\textunderscore2/{7/black}};\n% Labels for Node 1\n\\path (9.5,2.5) pic[scale=1.0] {hclabels=4/1\\textunderscore1/{4/black}};\n% Labels for Node 3\n\\path (9.5,-3.5) pic[scale=1.0] {hclabels=6/1\\textunderscore3/{6/black}};\n\\end{tikzpicture}\n%\n% \\newline\n% \\begin{tikzpicture}\n% \\path (0,0) pic[scale=1.0] {hclabels=0/0\\textunderscore0/{1/red,4/green}};\n%  \\path (+1.5,-0.85) pic[scale=1.0] {hypercube};\n% \\end{tikzpicture}\n% \\begin{tikzpicture}\n\n% \\path (+1.5,-0.85) pic[scale=1.0] {hypercube};\n\n% \\end{tikzpicture}\n\\end{document}"}},"/PCC/SwitchDiagram":{"title":"Description","data":{"":"The code is a TikZ picture that creates a diagram of a network switch with multiple blades, edge switches, and direction switches. The switches are arranged in a hierarchy where the direction switches control the edge switches, which in turn control the blades.The diagram consists of three sets of switches arranged horizontally using chains. The first set of switches are the two direction switches, labeled \"Direction Switch\" and \"Direction Switch 2\". The second set of switches are the edge switches, which are connected to the direction switches and labeled \"Edge Switch 1\" through \"Edge Switch 56\". The third set of switches are the blade switches, which are connected to the edge switches and labeled \"Blade 00\" through \"Blade 17\".The blades are represented as vertical blocks labeled with their ID numbers. The edge switches are represented as horizontal blocks connected to the blades via arrows. The direction switches are not connected to the blades, but rather to the edge switches via chains. The diagram also includes a bounding box that encloses a set of blades and is labeled with the chassis number.The styles for the switches are defined using \\tikzset command. The edge switches are filled with blue, the blade switches are filled with red, and the direction switches are filled with yellow. The arrows are defined using the arrow style, and the boxes are positioned using the positioning library. The diagram also uses the calc library to position the bounding boxes.","keywords#Keywords":"documentclass, usepackage, begin, tikzpicture, draw, node, edge, fill, circle, coordinate, right, left, below, above, rectangle, path, midway, label, end, center, tikz, style.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usetikzlibrary{arrows,chains,positioning,scopes,quotes,bending,calc}\n\n\\tikzset{\nedge/.style={draw,text width=8em,minimum height=1em,align=center,fill=blue!30},\nblade/.style={draw,text width=1em,minimum height=5em,align=center,fill=red!30},\nswitch/.style={draw,text width=4em,minimum height=3em,align=center,fill=yellow!30},\narrow/.style={->}\n}\n\n\\begin{document}\n\\begin{tikzpicture}[>=stealth']\n% Direction Switches\n{[start chain]\n\\node[switch,on chain] (M0) {Direction Switch};\n\\node[switch,on chain,right=3cm of M0] (M1) {Direction Switch 2};\n}\n% Edge switches\n{[start chain]\n\\node[edge,on chain,below left=2cm and 0.25cm of M0] (N0) {Edge Switch 1};\n\\node[edge,on chain,right=1cm of N0] (N1) {Edge Switch 2};\n%\\node[block,on chain,join=by {arrow},right=1cm of N1] (N2) {N2};\n\\node[on chain,right=1cm of N1] (N2) {$\\cdots$};\n\\node[edge,on chain,right=1cm of N2] (N3) {Edge Switch 56};\n}\n% Blade Switches\n{[start chain]\n\\node[blade,on chain, below left=0.7cm and 0.1cm of N0] (B0) {B \\\\ l \\\\ a \\\\ d \\\\ e \\\\ 0 \\\\ 0};\n\\node[blade,on chain,right=0.25cm of B0] (B1) {B \\\\ l \\\\ a \\\\ d \\\\ e \\\\ 0 \\\\ 1 };\n%\\node[block,on chain,join=by {arrow},right=1cm of N1] (N2) {N2};\n\\node[on chain,right=0.25cm of B1] (B2) {$\\cdots$};\n\\node[blade,on chain,right=0.25cm of B2] (B3) {B \\\\ l \\\\ a \\\\ d \\\\ e \\\\ 1 \\\\ 7};\n}\n% node containing number of blades\n\\node[below =0.25cm of N0] (L1) {\\underline{18}};\n% arrows from blade to edge\n\\draw [->] (B0.north) -- (N0);\n\\draw [->] (B1.north) -- (N0);\n\\draw [->] (B3.north) -- (N0);\n\\draw[red,thick,dotted] ($(B0.north west)+(-0.3,0.1)$)  rectangle ($(B3.south east)+(0.3,-0.1)$);\n\\node [below = 1cm of B2](Lsd0) {\\small{chasis 0}};\n{[start chain]\n\\node[blade,on chain, below left=0.7cm and 0.1cm of N1] (C0) {B \\\\ l \\\\ a \\\\ d \\\\ e \\\\  0 \\\\ 0 };\n\\node[blade,on chain,right=0.25cm of C0] (C1) {B \\\\ l \\\\ a \\\\ d \\\\ e \\\\ 0 \\\\ 1 };\n%\\node[block,on chain,join=by {arrow},right=1cm of N1] (N2) {N2};\n\\node[on chain,right=0.25cm of C1] (C2) {$\\cdots$};\n\\node[blade,on chain,right=0.25cm of C2] (C3) {B \\\\ l \\\\ a \\\\ d \\\\ e \\\\ 1 \\\\ 7};\n}\n% node containing number of blades\n\\node[below =0.25cm of N1] (L2) {\\underline{18}};\n% arrows from blade to edge\n\\draw [->] (C0.north) -- (N1);\n\\draw [->] (C1.north) -- (N1);\n\\draw [->] (C3.north) -- (N1);\n% bounding box\n\\draw[red,thick,dotted] ($(C0.north west)+(-0.3,0.1)$)  rectangle ($(C3.south east)+(0.3,-0.1)$);\n\\node [below = 1cm of C2](Lsd1) {\\small{chasis 1}};\n{[start chain]\n\\node[blade,on chain, below left=0.7cm and 0.1cm of N3] (D0) {B \\\\ l \\\\ a \\\\ d \\\\ e \\\\ 0 \\\\ 0};\n\\node[blade,on chain,right=0.25cm of D0] (D1) {B \\\\ l \\\\ a \\\\ d \\\\ e \\\\ 0 \\\\ 1 };\n%\\node[block,on chain,join=by {arrow},right=1cm of N1] (N2) {N2};\n\\node[on chain,right=0.25cm of D1] (D2) {$\\cdots$};\n\\node[blade,on chain,right=0.25cm of D2] (D3) {B \\\\ l \\\\ a \\\\ d \\\\ e \\\\ 1 \\\\ 7};\n}\n% node containing number of blades\n\\node[below =0.25cm of N3] (L3) {\\underline{18}};\n% arrows from blade to edge\n\\draw [->] (D0.north) -- (N3);\n\\draw [->] (D1.north) -- (N3);\n\\draw [->] (D3.north) -- (N3);\n% bounding box\n\\draw[red,thick,dotted] ($(D0.north west)+(-0.3,0.1)$)  rectangle ($(D3.south east)+(0.3,-0.1)$);\n\\node [below = 1cm of D2](Lsd3) {\\small{chasis 56}};\n\n% Edge switchs to direction switches arrows\n\\path (N1.north west) edge[blue,->,bend left=10] node [left] {} (M0);\n\\path (N1.north west) edge[blue,->,bend left=30] node [left] {} (M0);\n\\path (N1.north west) edge[blue,->] node [left] {} (M0);\n\n\\path (N1.north east) edge[blue,->,bend left=10] node [left] {} (M1);\n\\path (N1.north east) edge[blue,->,bend left=30] node [left] {} (M1);\n\\path (N1.north east) edge[blue,->] node [left] {} (M1);\n\n% N1, switch 2\n\\path (N0.north west) edge[blue,->,bend left=10] node [left] {} (M0);\n\\path (N0.north west) edge[blue,->,bend left=30] node [left] {} (M0);\n\\path (N0.north west) edge[blue,->] node [left] {} (M0);\n\n\\path (N0.north east) edge[blue,->,bend left=10] node [left] {} (M1);\n\\path (N0.north east) edge[blue,->,bend left=30] node [left] {} (M1);\n\\path (N0.north east) edge[blue,->] node [left] {} (M1);\n% N3, edge switch 56\n\\path (N3.north west) edge[blue,->,bend left=20] node [left] {} (M0.east);\n\\path (N3.north west) edge[blue,->,bend left=40] node [left] {} (M0.east);\n\\path (N3.north west) edge[blue,->] node [left] {} (M0.east);\n\\path (N3) edge[blue,->,bend left=20] node [left] {} (M1);\n\\path (N3) edge[blue,->,bend left=40] node [left] {} (M1);\n\\path (N3) edge[blue,->] node [left] {} (M1);\n\n\\node[above right =0.10cm of N1.north west] (NL1) {\\underline{9}};\n\\node[above =0.25cm of N0.north west] (NL0) {\\underline{9}};\n\\node[above =0.25cm of N0.north west] (NL0) {\\underline{9}};\n\\end{tikzpicture}\n\\end{document}"}},"/PCC/epos27":{"title":"Description","data":{"":"The code is a TikZ picture environment that plots a 3D scatter plot using the pgfplots package. The plot represents the final state for a collection of bodies in 3D space, where each point in the plot represents a body. The coordinates of the points are given in the input data as (x,y,z) tuples, and the size of each point is determined by the size column in the input data.The pgfplots settings are defined in the preamble, including the axis limits, grid settings, and legend style. The compat=newest option ensures that the latest version of pgfplots is used. The tikzlibrary and pgfplotslibrary packages are loaded for additional plot customization options.The axis environment is used to define the plot axis properties, such as the axis labels, tick marks, and the viewing angle. The scatter plot type is used to plot the data as individual points, and the mark option is set to o to plot the points as circles. The color of the points is set to a shade of blue using the mycolor1 definition. The visualization depends on and scatter/@pre marker code options are used to scale the size of the markers based on the size column of the input data.Overall, the code generates a 3D scatter plot representing the final state of a set of bodies in space, with each point representing a body and the size of each point representing some characteristic of the body.","keywords#Keywords":"triangle, circle, node, edge, path, fill, draw, coordinate, above, below, left, right, midway, bend, to, rectangle, rounded corners, minimum size, inner sep, outer sep, anchor, text, font, size, color.","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{pgfplots}\n\\pgfplotsset{compat=newest}\n%% the following commands are needed for some matlab2tikz features\n\\usetikzlibrary{plotmarks}\n\\usetikzlibrary{arrows.meta}\n\\usepgfplotslibrary{patchplots}\n\\usepackage{grffile}\n\\usepackage{amsmath}\n\n%% you may also want the following commands\n%\\pgfplotsset{plot coordinates/math parser=false}\n%\\newlength\\figureheight\n%\\newlength\\figurewidth\n\\definecolor{mycolor1}{rgb}{0.00000,0.44700,0.74100}\n\\begin{document}\n\\begin{tikzpicture}\n\n\\begin{axis}[%\nwidth=2.856in,\nheight=3.04in,\nat={(0.532in,0.41in)},\nscale only axis,\nxmin=-100000000000,\nxmax=100000000000,\ntick align=outside,\nxlabel style={font=\\color{white!15!black}},\nxlabel={x},\nymin=-100099789790,\nymax=100221383780,\nylabel style={font=\\color{white!15!black}},\nylabel={y},\nzmin=-100000000000,\nzmax=100000000000,\nzlabel style={font=\\color{white!15!black}},\nzlabel={z},\nview={-37.5}{30},\naxis background/.style={fill=white},\ntitle style={font=\\bfseries},\ntitle={Final State for Bodies},\naxis x line*=bottom,\naxis y line*=left,\naxis z line*=left,\nxmajorgrids,\nymajorgrids,\nzmajorgrids,\nlegend style={at={(1.03,1)}, anchor=north west, legend cell align=left, align=left, draw=white!15!black}\n]\n\\addplot3[scatter, only marks, mark=o, color=mycolor1, mark options={}, scatter/use mapped color=mycolor1, visualization depends on={\\thisrow{size} \\as \\perpointmarksize}, scatter/@pre marker code/.append style={/tikz/mark size=\\perpointmarksize}] table[row sep=crcr]{%\nx\ty\tz\tsize\\\\\n-99997680035\t-99855857673\t-99997638019\t2.53722289127305\\\\\n-99995820981\t-100078368310\t-58635.022346\t2.53722289127305\\\\\n-99997695110\t-100009034110\t99997623812\t2.51246890528022\\\\\n-99995843643\t226503275.05\t-99995779505\t2.52487623459052\\\\\n-99988412223\t-179555862.51\t-32819.532687\t2.52487623459052\\\\\n-99995844851\t-181718398.34\t99995769983\t2.5\\\\\n-99997702127\t99812198113\t-99997628815\t2.51246890528022\\\\\n-99995834363\t100002281340\t28394.932892\t2.53722289127305\\\\\n-99997688220\t100066622950\t99997631716\t2.52487623459052\\\\\n-38982.610169\t-100099789790\t-99995805526\t2.52487623459052\\\\\n-48117.853869\t-100038411320\t-32185.880326\t2.52487623459052\\\\\n24109.366574\t-99841676469\t99995788472\t2.51246890528022\\\\\n11726.151807\t12985306.256\t-99988385554\t2.51246890528022\\\\\n-28519.319386\t195477542.09\t-15684.045798\t5.59016994374947\\\\\n27742.353864\t-21179197.996\t99988377381\t2.51246890528022\\\\\n8934.5609253\t100197328670\t-99995811305\t2.51246890528022\\\\\n-45136.404472\t99925853996\t17134.979224\t2.51246890528022\\\\\n-37145.860615\t100011674450\t99995806820\t2.52487623459052\\\\\n99997669088\t-99781825884\t-99997684828\t2.52487623459052\\\\\n99995807964\t-99925688910\t4436.776345\t2.51246890528022\\\\\n99997695013\t-100027683570\t99997681472\t2.52487623459052\\\\\n99995838034\t-135798071.12\t-99995820437\t2.53722289127305\\\\\n99988403193\t228679228.99\t-16782.459343\t2.51246890528022\\\\\n99995842575\t-30315078.36\t99995814229\t2.52487623459052\\\\\n99997700542\t100089944940\t-99997679122\t2.52487623459052\\\\\n99995828402\t100221383780\t-17685.690958\t2.52487623459052\\\\\n99997679305\t100068347900\t99997674675\t2.51246890528022\\\\\n};\n\\end{axis}\n\\end{tikzpicture}\n\\end{document}"}},"/PCC/epos7":{"title":"Description","data":{"":"The code is a LaTeX document that produces a 3D scatter plot using the pgfplots package and TikZ graphics language. The plot visualizes the final state for bodies and has x, y, and z axes labeled with x, y, and z respectively. The data for the plot is provided in a table format within the code, with each row representing a single data point. The data includes x, y, and z coordinates for each point, as well as a size value that is used to adjust the size of the markers in the scatter plot. The scatter plot is colored with a predefined color, mycolor1, and the size of each marker is adjusted based on the size value provided in the data table. Overall, the code uses a combination of LaTeX, pgfplots, and TikZ to produce a 3D scatter plot with customized marker sizes and colors.","keywords#Keywords":"pgfplots, tikzpicture, scatter, only marks, mark options, visualization, legend, table, row, sep, crcr, xlabel, ylabel, zlabel, view, axis, background, fill, white, xmajorgrids, ymajorgrids, zmajorgrids, mark size, color, mycolor1, width, height, scale, axis line, legend style.","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{pgfplots}\n\\pgfplotsset{compat=newest}\n%% the following commands are needed for some matlab2tikz features\n\\usetikzlibrary{plotmarks}\n\\usetikzlibrary{arrows.meta}\n\\usepgfplotslibrary{patchplots}\n\\usepackage{grffile}\n\\usepackage{amsmath}\n\n%% you may also want the following commands\n%\\pgfplotsset{plot coordinates/math parser=false}\n%\\newlength\\figureheight\n%\\newlength\\figurewidth\n\\definecolor{mycolor1}{rgb}{0.00000,0.44700,0.74100}\n\\begin{document}\n\n% This file was created by matlab2tikz.\n%\n%The latest updates can be retrieved from\n%  http://www.mathworks.com/matlabcentral/fileexchange/22022-matlab2tikz-matlab2tikz\n%where you can also make suggestions and rate matlab2tikz.\n%\n% This file was created by matlab2tikz.\n%\n%The latest updates can be retrieved from\n%  http://www.mathworks.com/matlabcentral/fileexchange/22022-matlab2tikz-matlab2tikz\n%where you can also make suggestions and rate matlab2tikz.\n%\n\\definecolor{mycolor1}{rgb}{0.00000,0.44700,0.74100}%\n%\n\\begin{tikzpicture}\n\n\\begin{axis}[%\nwidth=2.894in,\nheight=3.04in,\nat={(0.487in,0.41in)},\nscale only axis,\nxmin=0,\nxmax=1500000000000,\ntick align=outside,\nxlabel style={font=\\color{white!15!black}},\nxlabel={x},\nymin=0,\nymax=2374061464.1,\nylabel style={font=\\color{white!15!black}},\nylabel={y},\nzmin=0,\nzmax=60000000,\nzlabel style={font=\\color{white!15!black}},\nzlabel={z},\nview={-37.5}{30},\naxis background/.style={fill=white},\ntitle style={font=\\bfseries},\ntitle={Final State for Bodies},\naxis x line*=bottom,\naxis y line*=left,\naxis z line*=left,\nxmajorgrids,\nymajorgrids,\nzmajorgrids,\nlegend style={at={(1.03,1)}, anchor=north west, legend cell align=left, align=left, draw=white!15!black}\n]\n\\addplot3[scatter, only marks, mark=o, color=mycolor1, mark options={}, scatter/use mapped color=mycolor1, visualization depends on={\\thisrow{size} \\as \\perpointmarksize}, scatter/@pre marker code/.append style={/tikz/mark size=\\perpointmarksize}] table[row sep=crcr]{%\nx\ty\tz\tsize\\\\\n355.01516663\t0.45633240291\t3.1373940057e-05\t5.59016994374947\\\\\n57860329160\t2374061464.1\t0.00013618376453\t2.51246890528022\\\\\n108185770600\t1773462602.7\t0.0014797416918\t2.51246890528022\\\\\n149592556230\t1502928808.9\t2189.5755515\t2.51246890528022\\\\\n149592556110\t1143477886.9\t51023397.742\t2.5\\\\\n227916793400\t1327644037.8\t0.00021862720095\t2.51246890528022\\\\\n778499725250\t656310053.74\t4.2228335855e-07\t2.51246890528022\\\\\n1352549908400\t484968085.96\t6.0340446e-08\t2.51246890528022\\\\\n};\n\n\\end{axis}\n\\end{tikzpicture}%\n\\end{document}"}},"/PCC/interconnect-diagram":{"title":"Description","data":{"":"This code defines a diagram using TikZ package in LaTeX. The diagram represents a computer architecture where there are three CPUs (central processing units) connected to three caches, which in turn are connected to three directories and three memories. The CPUs, caches, directories, and memories are represented by rectangular nodes with different colors. The interconnection network is represented by a blue rectangle. The CPUs are labeled as CPU 0, CPU 1, and CPU 2. The caches are labeled as cache blocks containing data. The directories are labeled as U000. One cache block (labeled X) is connected to one of the memories.The code defines different styles for the nodes such as intn, d, m, and ca. These styles are used to define the properties of the nodes, such as the shape, color, and size of the nodes. The nodes are positioned using the node distance and position options.The code uses the subcaption package to create subfigures within a single figure environment. The code also uses the calc library of TikZ to calculate the positions of nodes relative to other nodes. The code also adds labels to some of the nodes to provide additional information. Finally, an arrow is added to connect a label outside the diagram to one of the nodes inside the diagram.","keywords#Keywords":"tikzpicture, node, draw, rectangle, fill, text, below, of, align, center, minimum height, minimum width, anchor, east, west.","source-code#Source Code":"\\documentclass{article}\n\\usepackage[left=0.5in,right=0.5in,top=0in,bottom=0in]{geometry}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes,arrows,shadows, positioning, calc}\n% Define block styles used later\n\n% Interconnection network block\n\\tikzstyle{intn}=[draw, fill=blue!20, text width=15em,\ntext centered, minimum height=2em]\n\n% Directory block\n\\tikzstyle{d} = [text width=3em, text centered, minimum height=2em,rounded corners,fill=green!20]\n% memory block\n\\tikzstyle{m} = [text width=3em, align=left, minimum height=2em,rounded corners,fill=blue!20]\n\n% Caches\n\\tikzstyle{ca} = [text width=3em, text centered, minimum height=2em,rounded corners, fill=red!20]\n\n% CPU Blocks\n\n\\tikzstyle{cpu} = [text width=3em, text centered, minimum height=2em,fill=yellow!20]\n\\usepackage{subcaption}\n\n\\begin{document}\n\\begin{figure}\n\\centering\n\\begin{subfigure}[b]{0.45\\textwidth}\n\\begin{tikzpicture}[node distance=1.75cm and 1cm]\n% Block nodes\n\\node (in1) [draw, intn] {Interconnection Network};\n\\node (d2) [yshift=-0.9cm, draw, d] {};\n\\node (d1) [left of = d2, draw, d] {};\n\\node (d3) [right of = d2, draw, d] {};\n\n\\node (m2) [yshift=-1.8cm, draw, m] {};\n\\node (m1) [left of = m2, draw, m] {};\n\\node (m3) [right of = m2, draw, m] {X};\n\n\n\\node (ca2) [yshift=-2.7cm, draw, ca] {};\n\\node (ca1) [left of = ca2, draw, ca] {};\n\\node (ca3) [right of = ca2, draw, ca] {};\n\n\\node (cpu2) [yshift=-3.6cm, draw, cpu] {CPU 1};\n\\node (cpu1) [left of = cpu2,draw, cpu] {CPU 0};\n\\node (cpu3) [right of = cpu2, draw, cpu] {CPU 2};\n\n% Node within nodes\n% Label inside node\n\\node[draw,fill=white!30] at (d3.center) {U000};\n\\node[draw,fill=white!30] at (m3.center) {4};\n% Label nodes, comment out for preceeding diagrams\n\\node (dlabel) [left of = d1] {\\small{Directories}};\n\\node (mlabel) [left of = m1] {\\small{Memories}};\n\\node (calabel) [left of = ca1] {\\small{Caches}};\n\n% Paths to connect all nodes for first column\n\\draw ($(in1.south west) +(0.2,0)$) |- (d1.west);\n\\draw  (m1.west) -| ($(in1.south west) +(0.2,0) $);\n\\draw  (ca1.west) -| ($(in1.south west) +(0.2,0) $);\n\n% Paths for second column\n\\draw ($(in1.south west) +(1.95,0)$) |- (d2.west);\n\\draw  (m2.west) -| ($(in1.south west) +(1.95,0) $);\n\\draw  (ca2.west) -| ($(in1.south west) +(1.95,0) $);\n\n% Paths for third column\n\\draw ($(in1.south west) +(3.7,0)$) |- (d3.west);\n\\draw  (m3.west) -| ($(in1.south west) +(3.7,0) $);\n\\draw  (ca3.west) -| ($(in1.south west) +(3.7,0) $);\n\n% CPU Connections\n\\draw (ca1) -- (cpu1);\n\\draw (ca2) -- (cpu2);\n\\draw (ca3) -- (cpu3);\n\n% arrow outside\n\\node (ulabel) [right = 0.5cm of d3, text width=2cm] {\\small{Information about cache block \\\\ containing X}};\n\n\\draw [->] (ulabel) -- (d3.east);\n\n%\\draw  (cpu1.west) -| ($(in1.south west) +(0.1,0) $);\n\\end{tikzpicture}\n\\caption{}\n\\end{subfigure}\n\\hfill %add desired spacing between images, e. g. ~, \\quad, \\qquad, \\hfill etc.\n%(or a blank line to force the subfigure onto a new line)\n\\begin{subfigure}[b]{0.45\\textwidth}\n\\begin{tikzpicture}[node distance=1.75cm and 1cm]\n% Block nodes\n\\node (in1) [draw, intn] {Interconnection Network};\n\\node (d2) [yshift=-0.9cm, draw, d] {};\n\\node (d1) [left of = d2, draw, d] {};\n\\node (d3) [right of = d2, draw, d] {};\n\n\\node (m2) [yshift=-1.8cm, draw, m] {};\n\\node (m1) [left of = m2, draw, m] {};\n\\node (m3) [right of = m2, draw, m] {X};\n\n\n\\node (ca2) [yshift=-2.7cm, draw, ca] {};\n\\node (ca1) [left of = ca2, draw, ca] {};\n\\node (ca3) [right of = ca2, draw, ca] {};\n\n\\node (cpu2) [yshift=-3.6cm, draw, cpu] {CPU 1};\n\\node (cpu1) [left of = cpu2,draw, cpu] {CPU 0};\n\\node (cpu3) [right of = cpu2, draw, cpu] {CPU 2};\n\n% Node within nodes\n% Label inside node\n\\node[draw,fill=white!30] at (d3.center) {S001};\n\\node[draw,fill=white!30] at (m3.center) {4};\n\n\\node[xshift=-0.4cm] at (ca3.center) {X};\n\\node[draw,fill=white!30] at (ca3.center) {4};\n% Label nodes, comment out for preceeding diagrams\n% \\node (dlabel) [left of = d1] {\\small{Directories}};\n% \\node (mlabel) [left of = m1] {\\small{Memories}};\n% \\node (calabel) [left of = ca1] {\\small{Caches}};\n\n% Paths to connect all nodes for first column\n\\draw ($(in1.south west) +(0.2,0)$) |- (d1.west);\n\\draw  (m1.west) -| ($(in1.south west) +(0.2,0) $);\n\\draw  (ca1.west) -| ($(in1.south west) +(0.2,0) $);\n\n% Paths for second column\n\\draw ($(in1.south west) +(1.95,0)$) |- (d2.west);\n\\draw  (m2.west) -| ($(in1.south west) +(1.95,0) $);\n\\draw  (ca2.west) -| ($(in1.south west) +(1.95,0) $);\n\n% Paths for third column\n\\draw ($(in1.south west) +(3.7,0)$) |- (d3.west);\n\\draw  (m3.west) -| ($(in1.south west) +(3.7,0) $);\n\\draw  (ca3.west) -| ($(in1.south west) +(3.7,0) $);\n\n% CPU Connections\n\\draw (ca1) -- (cpu1);\n\\draw (ca2) -- (cpu2);\n\\draw (ca3) -- (cpu3);\n\n%\\draw  (cpu1.west) -| ($(in1.south west) +(0.1,0) $);\n\\end{tikzpicture}\n\\caption{}\n\\end{subfigure}\n% Row two\n\\begin{subfigure}[b]{0.3\\textwidth}\n\\begin{tikzpicture}[node distance=1.75cm and 1cm]\n% Block nodes\n\\node (in1) [draw, intn] {Interconnection Network};\n\\node (d2) [yshift=-0.9cm, draw, d] {};\n\\node (d1) [left of = d2, draw, d] {};\n\\node (d3) [right of = d2, draw, d] {};\n\n\\node (m2) [yshift=-1.8cm, draw, m] {};\n\\node (m1) [left of = m2, draw, m] {};\n\\node (m3) [right of = m2, draw, m] {X};\n\n\n\\node (ca2) [yshift=-2.7cm, draw, ca] {};\n\\node (ca1) [left of = ca2, draw, ca] {};\n\\node (ca3) [right of = ca2, draw, ca] {};\n\n\\node (cpu2) [yshift=-3.6cm, draw, cpu] {CPU 1};\n\\node (cpu1) [left of = cpu2,draw, cpu] {CPU 0};\n\\node (cpu3) [right of = cpu2, draw, cpu] {CPU 2};\n\n% Node within nodes\n% Label inside node\n\\node[draw,fill=white!30] at (d3.center) {E001};\n\\node[draw,fill=white!30] at (m3.center) {4};\n\n\\node[xshift=-0.4cm] at (ca3.center) {X};\n\\node[draw,fill=white!30] at (ca3.center) {5};\n% Label nodes, comment out for preceeding diagrams\n% \\node (dlabel) [left of = d1] {\\small{Directories}};\n% \\node (mlabel) [left of = m1] {\\small{Memories}};\n% \\node (calabel) [left of = ca1] {\\small{Caches}};\n\n% Paths to connect all nodes for first column\n\\draw ($(in1.south west) +(0.2,0)$) |- (d1.west);\n\\draw  (m1.west) -| ($(in1.south west) +(0.2,0) $);\n\\draw  (ca1.west) -| ($(in1.south west) +(0.2,0) $);\n\n% Paths for second column\n\\draw ($(in1.south west) +(1.95,0)$) |- (d2.west);\n\\draw  (m2.west) -| ($(in1.south west) +(1.95,0) $);\n\\draw  (ca2.west) -| ($(in1.south west) +(1.95,0) $);\n\n% Paths for third column\n\\draw ($(in1.south west) +(3.7,0)$) |- (d3.west);\n\\draw  (m3.west) -| ($(in1.south west) +(3.7,0) $);\n\\draw  (ca3.west) -| ($(in1.south west) +(3.7,0) $);\n\n% CPU Connections\n\\draw (ca1) -- (cpu1);\n\\draw (ca2) -- (cpu2);\n\\draw (ca3) -- (cpu3);\n\n%\\draw  (cpu1.west) -| ($(in1.south west) +(0.1,0) $);\n\\end{tikzpicture}\n\\caption{}\n\\end{subfigure}\n~ %add desired spacing between images, e. g. ~, \\quad, \\qquad, \\hfill etc.\n%(or a blank line to force the subfigure onto a new line), object d\n\\begin{subfigure}[b]{0.3\\textwidth}\n\\begin{tikzpicture}[node distance=1.75cm and 1cm]\n% Block nodes\n\\node (in1) [draw, intn] {Interconnection Network};\n\\node (d2) [yshift=-0.9cm, draw, d] {};\n\\node (d1) [left of = d2, draw, d] {};\n\\node (d3) [right of = d2, draw, d] {};\n\n\\node (m2) [yshift=-1.8cm, draw, m] {};\n\\node (m1) [left of = m2, draw, m] {};\n\\node (m3) [right of = m2, draw, m] {X};\n\n\n\\node (ca2) [yshift=-2.7cm, draw, ca] {};\n\\node (ca1) [left of = ca2, draw, ca] {};\n\\node (ca3) [right of = ca2, draw, ca] {};\n\n\\node (cpu2) [yshift=-3.6cm, draw, cpu] {CPU 1};\n\\node (cpu1) [left of = cpu2,draw, cpu] {CPU 0};\n\\node (cpu3) [right of = cpu2, draw, cpu] {CPU 2};\n\n% Node within nodes\n% Label inside node\n\\node[draw,fill=white!30] at (d3.center) {S011};\n\\node[draw,fill=white!30] at (m3.center) {5};\n\n\\node[xshift=-0.4cm] at (ca2.center) {X};\n\\node[draw,fill=white!30] at (ca2.center) {5};\n\n\\node[xshift=-0.4cm] at (ca3.center) {X};\n\\node[draw,fill=white!30] at (ca3.center) {5};\n% Label nodes, comment out for preceeding diagrams\n% \\node (dlabel) [left of = d1] {\\small{Directories}};\n% \\node (mlabel) [left of = m1] {\\small{Memories}};\n% \\node (calabel) [left of = ca1] {\\small{Caches}};\n\n% Paths to connect all nodes for first column\n\\draw ($(in1.south west) +(0.2,0)$) |- (d1.west);\n\\draw  (m1.west) -| ($(in1.south west) +(0.2,0) $);\n\\draw  (ca1.west) -| ($(in1.south west) +(0.2,0) $);\n\n% Paths for second column\n\\draw ($(in1.south west) +(1.95,0)$) |- (d2.west);\n\\draw  (m2.west) -| ($(in1.south west) +(1.95,0) $);\n\\draw  (ca2.west) -| ($(in1.south west) +(1.95,0) $);\n\n% Paths for third column\n\\draw ($(in1.south west) +(3.7,0)$) |- (d3.west);\n\\draw  (m3.west) -| ($(in1.south west) +(3.7,0) $);\n\\draw  (ca3.west) -| ($(in1.south west) +(3.7,0) $);\n\n% CPU Connections\n\\draw (ca1) -- (cpu1);\n\\draw (ca2) -- (cpu2);\n\\draw (ca3) -- (cpu3);\n\n%\\draw  (cpu1.west) -| ($(in1.south west) +(0.1,0) $);\n\\end{tikzpicture}\n\\caption{}\n\\end{subfigure}\n~\n\\begin{subfigure}[b]{0.3\\textwidth}\n\\begin{tikzpicture}[node distance=1.75cm and 1cm]\n% Block nodes\n\\node (in1) [draw, intn] {Interconnection Network};\n\\node (d2) [yshift=-0.9cm, draw, d] {};\n\\node (d1) [left of = d2, draw, d] {};\n\\node (d3) [right of = d2, draw, d] {};\n\n\\node (m2) [yshift=-1.8cm, draw, m] {};\n\\node (m1) [left of = m2, draw, m] {};\n\\node (m3) [right of = m2, draw, m] {X};\n\n\n\\node (ca2) [yshift=-2.7cm, draw, ca] {};\n\\node (ca1) [left of = ca2, draw, ca] {};\n\\node (ca3) [right of = ca2, draw, ca] {};\n\n\\node (cpu2) [yshift=-3.6cm, draw, cpu] {CPU 1};\n\\node (cpu1) [left of = cpu2,draw, cpu] {CPU 0};\n\\node (cpu3) [right of = cpu2, draw, cpu] {CPU 2};\n\n% Node within nodes\n% Label inside node\n\\node[draw,fill=white!30] at (d3.center) {S111};\n\\node[draw,fill=white!30] at (m3.center) {5};\n\n\\node[xshift=-0.4cm] at (ca1.center) {X};\n\\node[draw,fill=white!30] at (ca1.center) {5};\n\n\\node[xshift=-0.4cm] at (ca2.center) {X};\n\\node[draw,fill=white!30] at (ca2.center) {5};\n\n\\node[xshift=-0.4cm] at (ca3.center) {X};\n\\node[draw,fill=white!30] at (ca3.center) {5};\n% Label nodes, comment out for preceeding diagrams\n% \\node (dlabel) [left of = d1] {\\small{Directories}};\n% \\node (mlabel) [left of = m1] {\\small{Memories}};\n% \\node (calabel) [left of = ca1] {\\small{Caches}};\n\n% Paths to connect all nodes for first column\n\\draw ($(in1.south west) +(0.2,0)$) |- (d1.west);\n\\draw  (m1.west) -| ($(in1.south west) +(0.2,0) $);\n\\draw  (ca1.west) -| ($(in1.south west) +(0.2,0) $);\n\n% Paths for second column\n\\draw ($(in1.south west) +(1.95,0)$) |- (d2.west);\n\\draw  (m2.west) -| ($(in1.south west) +(1.95,0) $);\n\\draw  (ca2.west) -| ($(in1.south west) +(1.95,0) $);\n\n% Paths for third column\n\\draw ($(in1.south west) +(3.7,0)$) |- (d3.west);\n\\draw  (m3.west) -| ($(in1.south west) +(3.7,0) $);\n\\draw  (ca3.west) -| ($(in1.south west) +(3.7,0) $);\n\n% CPU Connections\n\\draw (ca1) -- (cpu1);\n\\draw (ca2) -- (cpu2);\n\\draw (ca3) -- (cpu3);\n\n%\\draw  (cpu1.west) -| ($(in1.south west) +(0.1,0) $);\n\\end{tikzpicture}\n\\caption{}\n\\end{subfigure}\n% Row 3\n\\begin{subfigure}[b]{0.3\\textwidth}\n\\begin{tikzpicture}[node distance=1.75cm and 1cm]\n% Block nodes\n\\node (in1) [draw, intn] {Interconnection Network};\n\\node (d2) [yshift=-0.9cm, draw, d] {};\n\\node (d1) [left of = d2, draw, d] {};\n\\node (d3) [right of = d2, draw, d] {};\n\n\\node (m2) [yshift=-1.8cm, draw, m] {};\n\\node (m1) [left of = m2, draw, m] {};\n\\node (m3) [right of = m2, draw, m] {X};\n\n\n\\node (ca2) [yshift=-2.7cm, draw, ca] {};\n\\node (ca1) [left of = ca2, draw, ca] {};\n\\node (ca3) [right of = ca2, draw, ca] {};\n\n\\node (cpu2) [yshift=-3.6cm, draw, cpu] {CPU 1};\n\\node (cpu1) [left of = cpu2,draw, cpu] {CPU 0};\n\\node (cpu3) [right of = cpu2, draw, cpu] {CPU 2};\n\n% Node within nodes\n% Label inside node\n\\node[draw,fill=white!30] at (d3.center) {E010};\n\\node[draw,fill=white!30] at (m3.center) {5};\n\n\\node[xshift=-0.4cm] at (ca2.center) {X};\n\\node[draw,fill=white!30] at (ca2.center) {9};\n\n% Label nodes, comment out for preceeding diagrams\n% \\node (dlabel) [left of = d1] {\\small{Directories}};\n% \\node (mlabel) [left of = m1] {\\small{Memories}};\n% \\node (calabel) [left of = ca1] {\\small{Caches}};\n\n% Paths to connect all nodes for first column\n\\draw ($(in1.south west) +(0.2,0)$) |- (d1.west);\n\\draw  (m1.west) -| ($(in1.south west) +(0.2,0) $);\n\\draw  (ca1.west) -| ($(in1.south west) +(0.2,0) $);\n\n% Paths for second column\n\\draw ($(in1.south west) +(1.95,0)$) |- (d2.west);\n\\draw  (m2.west) -| ($(in1.south west) +(1.95,0) $);\n\\draw  (ca2.west) -| ($(in1.south west) +(1.95,0) $);\n\n% Paths for third column\n\\draw ($(in1.south west) +(3.7,0)$) |- (d3.west);\n\\draw  (m3.west) -| ($(in1.south west) +(3.7,0) $);\n\\draw  (ca3.west) -| ($(in1.south west) +(3.7,0) $);\n\n% CPU Connections\n\\draw (ca1) -- (cpu1);\n\\draw (ca2) -- (cpu2);\n\\draw (ca3) -- (cpu3);\n\n%\\draw  (cpu1.west) -| ($(in1.south west) +(0.1,0) $);\n\\end{tikzpicture}\n\\caption{}\n\\end{subfigure}\n~\n\\begin{subfigure}[b]{0.5\\textwidth}\n\\begin{tikzpicture}[node distance=1.5cm and 1cm]\n\\node[text width=25 em] (u){\\textbf{Uncached(U)} --- not currently in any processor's cache.};\n\\node[text width=25 em, below of = u ] (s) {\\textbf{Shared(S)} --- cached by one or more processors and the copy in memory is correct.};\n\\node[text width=25 em, below of = s ] {\\textbf{Cached(C)} --- cached by exactly one processor that has written the block, so that the copy in money is obsolete.};\n\\end{tikzpicture}\n\\caption{}\n\\end{subfigure}\n%\\caption*{Directory-based Cache Operations. (a) Starting Cache from Figure 2.19. (b) State after CPU 2 reads X. (c) State after CPU 2 writes value 5 to X. (d) State after CPU 1 reads X. (e) State after CPU 0 reads X. (f) State after CPU 1 writes value 9 to X.}\n\\end{figure}\n\\end{document}"}},"/PCC/omega_flip":{"title":"Description","data":{"":"The given code is a LaTeX document that uses the TikZ package to draw a banyan network. The document class is set to \"standalone\", which means that the output will be a standalone image.The TikZ library \"sa-tikz\" is also included, which provides some additional styles for drawing circuits.The \"module size\", \"pin length factor\", \"module ysep\" and \"module xsep\" are TikZ styles that specify the size and spacing of the modules in the network.Within the \"tikzpicture\" environment, a banyan network is drawn using the \"banyan omega\" style. The \"P\" parameter is set to 16, which specifies the size of the network.The code then loops over each module and its inputs/outputs, and labels them with small numbers.Finally, a red line is drawn between specific input and output ports in the network to illustrate the path of a signal through the network.","keywords#Keywords":"tikz, sa-tikz, positioning, banyan omega, node, counter, mathbin, draw.","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{tikz}\n\\usepackage{sa-tikz}\n\\usetikzlibrary{positioning}\n\\begin{document}\n\\tikzset{module size=0.6cm,pin length factor=0.6,\nmodule ysep=1.0, module xsep=3.5}\n\n\\begin{tikzpicture}[P=16]\n\n\\node[banyan omega={module label opacity=0}] {};\n\\newcounter{portb}\n\\setcounter{portb}{0}\n\\foreach \\module in {1,...,8}{\n\\foreach \\port in {1,...,2}{\n\\stepcounter{portb}\n\\pgfmathbin{\\theportb-1}\n\\node[left] at (r0-\\module-front input-\\port)\n{\\scriptsize{\\pgfmathresult}};\n\\node[right] at (r4-\\module-front output-\\port)\n{\\scriptsize{\\pgfmathresult}};\n}\n}\n\\draw[red,ultra thick] (r0-2-front input-1) -- (r0-2-front output-1)--\n(r1-3-front input-1) -- (r1-3-front output-2)-- (r2-6-front input-1)--\n(r2-6-front output-1) -- (r3-3-front input-2) -- (r3-3-front output-1)--\n(r4-5-front input-1) -- (r4-5-front output-1);\n\\end{tikzpicture}\n\n\\end{document}"}},"/PCC/q4Torus":{"title":"Description","data":{"":"This is a TikZ code that generates a diagram composed of rows of blue blocks, where each row is vertically aligned, and the blocks within each row are horizontally aligned. The blocks are connected with straight lines that span vertically between the rows.The diagram starts with an empty row of nodes, followed by four rows of blocks, with each row consisting of five blocks. Each block is defined as a TikZ style with a blue fill and a minimum width and height of 1em, and a draw command to draw the block border. The arrows and line styles are also defined as TikZ styles.The nodes and blocks are defined using the TikZ chains library, which provides an easy way to position the blocks relative to each other. The blocks are connected using the join command, which connects the current block to the previous block in the chain.The diagram is created by drawing vertical lines that connect the blocks between each row, and horizontal lines that loop back from the first block in each row to the last block in the previous row. The coordinates of the blocks and lines are calculated using the TikZ calc library, which allows for easy arithmetic operations on coordinates.Finally, the diagram is rendered as a standalone TikZ picture using the TikZ standalone class, which provides an easy way to generate standalone diagrams without the need for a full LaTeX document. The resulting output is a PDF file of the diagram.","keywords#Keywords":"tikzpicture, node, draw, rectangle, fill, text, above, right, left, below, anchor, edge, ->, dotted.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usetikzlibrary{arrows,chains,positioning,scopes,quotes,bending,calc,intersections}\n\n\\tikzset{\nblock/.style={draw,minimum width=1em,minimum height=1em,align=center,fill=blue!30},\narrow/.style={->},\nline/.style={-}\n}\n\n\\begin{document}\n\\begin{tikzpicture}[>=stealth',node distance=0.5cm]\n% Creating rows of blocks\n{[start chain]\n\\node[on chain] (s0) {};\n\\node[on chain] (s1) {};\n\\node[on chain] (s2) {};\n\\node[on chain] (s3) {};\n\\node[on chain] (s4) {};\n}\n{[start chain]\n\\node[block,on chain, below = 0.15 cm of s0] (A0) {};\n\\node[block,on chain, join =by {line}] (A1) {};\n\\node[block,on chain, join =by {line}] (A2) {};\n\\node[block,on chain, join =by {line}] (A3) {};\n\\node[block,on chain, join =by {line}] (A4) {};\n}\n{[start chain]\n\\node[block,on chain, below = of A0] (B0) {};\n\\node[block,on chain, join =by {line}] (B1) {};\n\\node[block,on chain, join =by {line}] (B2) {};\n\\node[block,on chain, join =by {line}] (B3) {};\n\\node[block,on chain, join =by {line}] (B4) {};\n}\n{[start chain]\n\\node[block,on chain, below = of B0] (C0) {};\n\\node[block,on chain, join =by {line}] (C1) {};\n\\node[block,on chain, join =by {line}] (C2) {};\n\\node[block,on chain, join =by {line}] (C3) {};\n\\node[block,on chain, join =by {line}] (C4) {};\n}\n{[start chain]\n\\node[block,on chain, below = of C0] (D0) {};\n\\node[block,on chain, join =by {line}] (D1) {};\n\\node[block,on chain, join =by {line}] (D2) {};\n\\node[block,on chain, join =by {line}] (D3) {};\n\\node[block,on chain, join =by {line}] (D4) {};\n}\n% {[start chain]\n%     \\node[block,on chain, below = of D0] (E0) {};\n%     \\node[block,on chain, join =by {line}] (E1) {};\n%     \\node[block,on chain, join =by {line}] (E2) {};\n%     \\node[block,on chain, join =by {line}] (E3) {};\n%     \\node[block,on chain, join =by {line}] (E4) {};\n% }\n% Drawing vertical lines\n\\draw (A0) -- (B0) -- (C0) -- (D0); % -- (E0);\n\\draw (A1) -- (B1) -- (C1) -- (D1); % -- (E1);\n\\draw (A2) -- (B2) -- (C2) -- (D2); % -- (E2);\n\\draw (A3) -- (B3) -- (C3) -- (D3); % -- (E3);\n\\draw (A4) -- (B4) -- (C4) -- (D4); % -- (E4);\n% Drawing loop backs horizontal\n\\draw (A0.west) -- ($(A0.west) - (0.15, 0)$);\n\\draw ($(A0.west) - (0.15, 0)$) -- ($(A0.west) - (0.15, 0)+(0,0.5)$);\n\\draw ($(A0.west) - (0.15, 0)+(0,0.5)$) -- ($(A0.west) +(4,0.5)$);\n\\draw ($(A0.west) +(4,0.5)$) |- (A4.east);\n% \\draw (A0.north) |- (s2.north east) -| (A4.north);\n% B row\n\\draw (B0.west) -- ($(B0.west) - (0.15, 0)$);\n\\draw ($(B0.west) - (0.15, 0)$) -- ($(B0.west) - (0.15, 0)+(0,0.5)$);\n\\draw ($(B0.west) - (0.15, 0)+(0,0.5)$) -- ($(B0.west) +(4,0.5)$);\n\\draw ($(B0.west) +(4,0.5)$) |- (B4.east);\n% C row\n\\draw (C0.west) -- ($(C0.west) - (0.15, 0)$);\n\\draw ($(C0.west) - (0.15, 0)$) -- ($(C0.west) - (0.15, 0)+(0,0.5)$);\n\\draw ($(C0.west) - (0.15, 0)+(0,0.5)$) -- ($(C0.west) +(4,0.5)$);\n\\draw ($(C0.west) +(4,0.5)$) |- (C4.east);\n% D row\n\\draw (D0.west) -- ($(D0.west) - (0.15, 0)$);\n\\draw ($(D0.west) - (0.15, 0)$) -- ($(D0.west) - (0.15, 0)+(0,0.5)$);\n\\draw ($(D0.west) - (0.15, 0)+(0,0.5)$) -- ($(D0.west) +(4,0.5)$);\n\\draw ($(D0.west) +(4,0.5)$) |- (D4.east);\n% E row\n%\\draw (E0.west) -- ($(E0.west) - (0.15, 0)$);\n%\\draw ($(E0.west) - (0.15, 0)$) -- ($(E0.west) - (0.15, 0)+(0,0.5)$);\n%\\draw ($(E0.west) - (0.15, 0)+(0,0.5)$) -- ($(E0.west) +(4,0.5)$);\n%\\draw ($(E0.west) +(4,0.5)$) |- (E4.east);\n% Vertical Loopbacks\n\n% 0 column\n\\draw (A0.north) -- ($(A0.north) + (0.0, 0.15)$);\n\\draw ($(A0.north) + (0, 0.15)$) -- ($(A0.north) + (0, 0.15)+(-0.5,0)$);\n\\draw ($(A0.north) + (0, 0.15)+(-0.5,0)$) -- ($(D0.north) +(-0.5,-0.65)$);\n\\draw ($(D0.north) +(-0.5,-0.65)$) -| (D0.south);\n% 1 column\n\\draw (A1.north) -- ($(A1.north) + (0.0, 0.15)$);\n\\draw ($(A1.north) + (0, 0.15)$) -- ($(A1.north) + (0, 0.15)+(-0.5,0)$);\n\\draw ($(A1.north) + (0, 0.15)+(-0.5,0)$) -- ($(D1.north) +(-0.5,-0.65)$);\n\\draw ($(D1.north) +(-0.5,-0.65)$) -| (D1.south);\n% 2 column\n\\draw (A2.north) -- ($(A2.north) + (0.0, 0.15)$);\n\\draw ($(A2.north) + (0, 0.15)$) -- ($(A2.north) + (0, 0.15)+(-0.5,0)$);\n\\draw ($(A2.north) + (0, 0.15)+(-0.5,0)$) -- ($(D2.north) +(-0.5,-0.65)$);\n\\draw ($(D2.north) +(-0.5,-0.65)$) -| (D2.south);\n\n% 3 column\n\\draw (A3.north) -- ($(A3.north) + (0.0, 0.15)$);\n\\draw ($(A3.north) + (0, 0.15)$) -- ($(A3.north) + (0, 0.15)+(-0.5,0)$);\n\\draw ($(A3.north) + (0, 0.15)+(-0.5,0)$) -- ($(D3.north) +(-0.5,-0.65)$);\n\\draw ($(D3.north) +(-0.5,-0.65)$) -| (D3.south);\n\n% 4 column\n\\draw (A4.north) -- ($(A4.north) + (0.0, 0.15)$);\n\\draw ($(A4.north) + (0, 0.15)$) -- ($(A4.north) + (0, 0.15)+(-0.5,0)$);\n\\draw ($(A4.north) + (0, 0.15)+(-0.5,0)$) -- ($(D4.north) +(-0.5,-0.65)$);\n\\draw ($(D4.north) +(-0.5,-0.65)$) -| (D4.south);\n\\end{tikzpicture}\n\\end{document}"}},"/PCC/reduc11":{"title":"Description","data":{"":"This is a LaTeX code that creates a diagram using the TikZ package. The code begins with defining the document class as standalone and including the TikZ package. Then, a TikZ environment is initiated and the node distance is set to 1.5 cm.The diagram consists of a central node \"r\" with six surrounding nodes named \"r1a\", \"r2a\", \"r2b\", \"r3a\", \"r3b\", and \"r4a\". Each node is defined as a circle with black border, white filling, and minimum size of 10pt. The positions of the nodes are specified using the \"right of\", \"above right of\", and \"above of\" commands.In addition, the diagram includes a \"blank node\" \"t\" positioned below and to the right of the central node \"r\", with two connected nodes \"t1\" and \"t2a\" and \"t2b\" positioned to the right and above right of \"t1\". The connections between nodes are established using the \"draw\" command with the appropriate starting and ending points. The text labels above the lines are set using the \"node\" command.Overall, the diagram represents a tree-like structure with a central node and several sub-nodes connected to it, and a separate node connected to the central node through a separate path.","keywords#Keywords":"tikz, standalone, node distance, positioning, circle, draw, black, fill, white, inner sep, minimum size, right of, above right of, above of, below right of, node, extension, blank node, below, small, arrow, thick.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\tikzset{near start abs/.style={xshift=1cm}}\n\n\\usetikzlibrary{positioning}\n\\begin{document}\n\\begin{tikzpicture}[node distance=1.5cm]\n% place nodes\n\\node[circle,draw=black, fill=white, inner sep=0pt,minimum size=10pt] (r) {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,right of=r, minimum size=10pt] (r1a)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above right of=r, minimum size=10pt] (r2a)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,right of=r2a, minimum size=10pt] (r2b)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above of=r2a, minimum size=10pt] (r3a)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,right of=r3a, minimum size=10pt] (r3b)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above right of=r3a, minimum size=10pt] (r4a)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,right of=r4a, minimum size=10pt] (r4b)  {};\n% Extension from 7 nodes\n% Blank node\n\\node[inner sep=0pt,below right of=r, minimum size=10pt] (t)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,below right of=t, minimum size=10pt] (t1)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above right of=t1, minimum size=10pt] (t2a)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,right of=t1, minimum size=10pt] (t2b)  {};\n\\draw (r) -- node[above] {\\small{1}} ++(r1a);\n\\draw (r) -- node[above] {\\small{2}} ++(r2a);\n\\draw (r3a) -- node[above] {\\small{3}} ++(r);\n\\draw (r2a) -- node[above] {\\small{1}} ++(r2b);\n\\draw (r3a) -- node[above] {\\small{1}} ++(r3b);\n\\draw (r3a) -- node[above] {\\small{2}} ++(r4a);\n\\draw (r4a) -- node[above] {\\small{1}} ++(r4b);\n\n\\draw[->, thick] (r) -- node[above] {\\small{4}} ++(t1);\n\\draw (t1) -- node[above] {\\small{3}} ++(t2a);\n\\draw (t1) -- node[above] {\\small{2}} ++(t2b);\n\\end{tikzpicture}\n\\end{document}"}},"/PCC/reduc21":{"title":"Description","data":{"":"The code is a TikZ picture of a tree with three levels. The tree has four nodes on the first level, eight nodes on the second level, and eight nodes on the third level.The code first sets up the style for a node named \"near start abs,\" which shifts the node to the right by 1cm. It then loads the \"positioning\" TikZ library, which allows nodes to be positioned relative to other nodes.The first level of the tree is created by creating four circles using the \\node command. These circles are labeled r, r1a, r2a, and r3a. The first circle is placed at the center of the picture, while the other circles are placed relative to r using the \"right of\" and \"above right of\" options. The \"minimum size\" option is used to set the size of each circle.The second level of the tree is created in a similar way. Each node on this level is positioned relative to a node on the first level, and the \"minimum size\" option is used to set the size of each node.The third level of the tree is also created using the same method. The only difference is that one of the nodes on the third level is connected to a node on the first level using a line.Finally, the code connects the nodes with lines using the \\draw command. The label for each line is set using the \"node[above]\" option, and the line is drawn using the \"++\" syntax, which specifies a relative position.","keywords#Keywords":"tikzpicture, node, draw, rectangle, below, left, right, above, fill, text, scale, coordinate.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\tikzset{near start abs/.style={xshift=1cm}}\n\n\\usetikzlibrary{positioning}\n\\begin{document}\n\\begin{tikzpicture}[node distance=1.5cm]\n% place nodes\n\\node[circle,draw=black, fill=white, inner sep=0pt,minimum size=10pt] (r) {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,right of=r, minimum size=10pt] (r1a)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above right of=r, minimum size=10pt] (r2a)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,right of=r2a, minimum size=10pt] (r2b)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above of=r2a, minimum size=10pt] (r3a)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,right of=r3a, minimum size=10pt] (r3b)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above right of=r3a, minimum size=10pt] (r4a)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,right of=r4a, minimum size=10pt] (r4b)  {};\n% Extension from 7 nodes\n% Blank node\n\\node[inner sep=0pt,below right of=r, minimum size=10pt] (t)  {};\n\n\\node[circle,draw=black, fill=white, inner sep=0pt,below right of=t, minimum size=10pt] (t1)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,right of=t1, minimum size=10pt] (t1a)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above right of=t1, minimum size=10pt] (t2a)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,right of=t2a, minimum size=10pt] (t2b)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above of=t2a, minimum size=10pt] (t3a)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,right of=t3a, minimum size=10pt] (t3b)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above right of=t3a, minimum size=10pt] (t4a)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,right of=t4a, minimum size=10pt] (t4b)  {};\n\n% Third group\n\\node[inner sep=0pt,below right of=t1, minimum size=10pt] (v)  {};\n\n\\node[circle,draw=black, fill=white, inner sep=0pt,below right of=v, minimum size=10pt] (v1)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,right of=v1, minimum size=10pt] (v1a)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above right of=v1, minimum size=10pt] (v2a)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above right of=v1,yshift=1cm, minimum size=10pt] (v3a)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above right of=v3a, minimum size=10pt] (v4a)  {};\n\\draw (r) -- node[above] {\\small{1}} ++(r1a);\n\\draw (r) -- node[above] {\\small{2}} ++(r2a);\n\\draw (r3a) -- node[above] {\\small{3}} ++(r);\n\\draw (r2a) -- node[above] {\\small{1}} ++(r2b);\n\\draw (r3a) -- node[above] {\\small{1}} ++(r3b);\n\\draw (r3a) -- node[above] {\\small{2}} ++(r4a);\n\\draw (r4a) -- node[above] {\\small{1}} ++(r4b);\n\n% Second nodes\n\\draw (t1) -- node[above] {\\small{1}} ++(t1a);\n\\draw (t1) -- node[above] {\\small{2}} ++(t2a);\n\\draw (t3a) -- node[above] {\\small{3}} ++(t1);\n\\draw (t2a) -- node[above] {\\small{1}} ++(t2b);\n\\draw (t3a) -- node[above] {\\small{1}} ++(t3b);\n\\draw (t3a) -- node[above] {\\small{2}} ++(t4a);\n\\draw (t4a) -- node[above] {\\small{1}} ++(t4b);\n\n% Third node\n\\draw (v1) -- node[above] {\\small{1}} ++(v1a);\n\\draw (v1) -- node[above] {\\small{2}} ++(v2a);\n\\draw (v3a) -- node[above] {\\small{3}} ++(v1);\n\\draw (v4a) -- node[above] {\\small{2}} ++(v3a);\n\\draw (r) -- node[above] {\\small{4}} ++(t1);\n\\draw[->, thick] (v1) -- node[above] {\\small{5}} ++(t1);\n% \\draw (t1) -- node[above] {\\small{3}} ++(t2a);\n% \\draw (t1) -- node[above] {\\small{2}} ++(t2b);\n\\end{tikzpicture}\n\\end{document}"}},"/PCC/reduc7":{"title":"Description","data":{"":"This code is a LaTeX document that uses the TikZ package to create a simple directed graph. The code begins by setting the document class to \"standalone\" and loading the TikZ package. It then defines a new style called \"near start abs\" that shifts the position of a node. The code also loads the TikZ library \"positioning\".Within the \"tikzpicture\" environment, the code places several nodes using the \"node\" command, each represented by a circle with black borders, white fill, and a minimum size of 10pt. The nodes are labeled with letters and numbers, for example \"r\" is the label for the first node, \"r1a\" is the label for the second node, and so on.The nodes are positioned relative to each other using the \"right of\", \"above right of\", and \"above of\" keywords. The \"node distance\" option is used to set the distance between nodes.The edges between the nodes are drawn using the \"draw\" command, with the \"circle\" option to make them curved. The edges are labeled with numbers using the \"node\" command, with the \"above\" option to place the label above the edge. The direction of the edge is specified using arrows. The edges are also labeled with the thickness using the \"thick\" option.Once compiled, this code will produce a standalone image of the directed graph with circular nodes and curved edges. The image will be saved as a PDF file.","keywords#Keywords":"latex, tikz, nodes, positioning, edges, circles, drawing, styles, arrows.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\tikzset{near start abs/.style={xshift=1cm}}\n\n\\usetikzlibrary{positioning}\n\\begin{document}\n\\begin{tikzpicture}[node distance=1.5cm]\n% place nodes\n\\node[circle,draw=black, fill=white, inner sep=0pt,minimum size=10pt] (r) {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,right of=r, minimum size=10pt] (r1a) {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above right of=r, minimum size=10pt] (r2a) {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,right of=r2a, minimum size=10pt] (r2b) {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above of=r2a, minimum size=10pt] (r3a) {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,right of=r3a, minimum size=10pt] (r3b) {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above right of=r3a, minimum size=10pt] (r4a) {};\n\\draw (r) -- node[above] {\\small{1}} ++(r1a);\n\\draw (r) -- node[above] {\\small{2}} ++(r2a);\n\\draw[->,thick] (r3a) -- node[above] {\\small{3}} ++(r);\n\\draw (r2a) -- node[above] {\\small{1}} ++(r2b);\n\\draw[<-,thick] (r3a) -- node[above] {\\small{1}} ++(r3b);\n\\draw[<-,thick] (r3a) -- node[above] {\\small{2}} ++(r4a);\n\\end{tikzpicture}\n\\end{document}"}},"/PCC/spos27":{"title":"Description","data":{"":"This code is a LaTeX document that generates a 3D scatter plot using the pgfplots package and tikzpicture environment. The plot displays a set of 27 points with varying sizes and colors, which are defined in a table format with four columns: x, y, z coordinates, and size. The axis environment sets the dimensions and properties of the plot, including the axis limits, grid lines, and legend. The mark option is used to specify the shape of the scatter plot marks (circles), while the color option sets the color of the marks using a pre-defined color mycolor1. The visualization depends on option specifies a variable perpointmarksize that is used to vary the size of the marks for each point, while the scatter/@pre marker code option appends a mark size style to the scatter plot marks. The resulting plot is saved as a PDF file.","keywords#Keywords":"pgfplots, tikzpicture, axis, scatter, only marks, mark, color, visualization, table, row, size, mark size, scatter/use mapped color.","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{pgfplots}\n\\pgfplotsset{compat=newest}\n%% the following commands are needed for some matlab2tikz features\n\\usetikzlibrary{plotmarks}\n\\usetikzlibrary{arrows.meta}\n\\usepgfplotslibrary{patchplots}\n\\usepackage{grffile}\n\\usepackage{amsmath}\n\n%% you may also want the following commands\n%\\pgfplotsset{plot coordinates/math parser=false}\n%\\newlength\\figureheight\n%\\newlength\\figurewidth\n\\definecolor{mycolor1}{rgb}{0.00000,0.44700,0.74100}\n\\begin{document}\n\\begin{tikzpicture}\n\n\\begin{axis}[%\nwidth=3.055in,\nheight=3.17in,\nat={(0.524in,0.428in)},\nscale only axis,\nxmin=-100000000000,\nxmax=100000000000,\ntick align=outside,\nymin=-100000000000,\nymax=100000000000,\nzmin=-100000000000,\nzmax=100000000000,\nview={-37.5}{30},\naxis background/.style={fill=white},\naxis x line*=bottom,\naxis y line*=left,\naxis z line*=left,\nxmajorgrids,\nymajorgrids,\nzmajorgrids,\nlegend style={at={(1.03,1)}, anchor=north west, legend cell align=left, align=left, draw=white!15!black}\n]\n\\addplot3[scatter, only marks, mark=o, color=mycolor1, mark options={}, scatter/use mapped color=mycolor1, visualization depends on={\\thisrow{size} \\as \\perpointmarksize}, scatter/@pre marker code/.append style={/tikz/mark size=\\perpointmarksize}] table[row sep=crcr]{%\nx\ty\tz\tsize\\\\\n-100000000000\t-100000000000\t-100000000000\t2.53722289127305\\\\\n-100000000000\t-100000000000\t0\t2.53722289127305\\\\\n-100000000000\t-100000000000\t100000000000\t2.51246890528022\\\\\n-100000000000\t0\t-100000000000\t2.52487623459052\\\\\n-100000000000\t0\t0\t2.52487623459052\\\\\n-100000000000\t0\t100000000000\t2.5\\\\\n-100000000000\t100000000000\t-100000000000\t2.51246890528022\\\\\n-100000000000\t100000000000\t0\t2.53722289127305\\\\\n-100000000000\t100000000000\t100000000000\t2.52487623459052\\\\\n0\t-100000000000\t-100000000000\t2.52487623459052\\\\\n0\t-100000000000\t0\t2.52487623459052\\\\\n0\t-100000000000\t100000000000\t2.51246890528022\\\\\n0\t0\t-100000000000\t2.51246890528022\\\\\n0\t0\t0\t5.59016994374947\\\\\n0\t0\t100000000000\t2.51246890528022\\\\\n0\t100000000000\t-100000000000\t2.51246890528022\\\\\n0\t100000000000\t0\t2.51246890528022\\\\\n0\t100000000000\t100000000000\t2.52487623459052\\\\\n100000000000\t-100000000000\t-100000000000\t2.52487623459052\\\\\n100000000000\t-100000000000\t0\t2.51246890528022\\\\\n100000000000\t-100000000000\t100000000000\t2.52487623459052\\\\\n100000000000\t0\t-100000000000\t2.53722289127305\\\\\n100000000000\t0\t0\t2.51246890528022\\\\\n100000000000\t0\t100000000000\t2.52487623459052\\\\\n100000000000\t100000000000\t-100000000000\t2.52487623459052\\\\\n100000000000\t100000000000\t0\t2.52487623459052\\\\\n100000000000\t100000000000\t100000000000\t2.51246890528022\\\\\n};\n\n\\end{axis}\n\\end{tikzpicture}\n\\end{document}"}},"/PCC/spos7":{"title":"Description","data":{"":"The code is a LaTeX document that includes a TikZ picture of a 3D scatter plot created using the pgfplots package. The plot displays the initial state for bodies in space and shows the coordinates of various points in 3D space. The plot uses different colors and marker sizes for each point, and the legend describes the point size in the plot. The code also includes various packages and options to customize the appearance of the plot.","keywords#Keywords":"pgfplots, tikzpicture, axis, scatter, table, visualization, legend, xlabel, ylabel, zlabel, view, only marks, mark options.","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{pgfplots}\n\\pgfplotsset{compat=newest}\n%% the following commands are needed for some matlab2tikz features\n\\usetikzlibrary{plotmarks}\n\\usetikzlibrary{arrows.meta}\n\\usepgfplotslibrary{patchplots}\n\\usepackage{grffile}\n\\usepackage{amsmath}\n\n%% you may also want the following commands\n%\\pgfplotsset{plot coordinates/math parser=false}\n%\\newlength\\figureheight\n%\\newlength\\figurewidth\n\\definecolor{mycolor1}{rgb}{0.00000,0.44700,0.74100}\n\\begin{document}\n\n% This file was created by matlab2tikz.\n%\n%The latest updates can be retrieved from\n%  http://www.mathworks.com/matlabcentral/fileexchange/22022-matlab2tikz-matlab2tikz\n%where you can also make suggestions and rate matlab2tikz.\n%\n\\definecolor{mycolor1}{rgb}{0.00000,0.44700,0.74100}%\n%\n\\begin{tikzpicture}\n\n\\begin{axis}[%\nwidth=2.853in,\nheight=3.04in,\nat={(0.528in,0.41in)},\nscale only axis,\nxmin=0,\nxmax=1500000000000,\ntick align=outside,\nxlabel style={font=\\color{white!15!black}},\nxlabel={x},\nymin=-400000000,\nymax=0,\nylabel style={font=\\color{white!15!black}},\nylabel={y},\nzmin=-1,\nzmax=1,\nzlabel style={font=\\color{white!15!black}},\nzlabel={z},\nview={-37.5}{30},\naxis background/.style={fill=white},\ntitle style={font=\\bfseries},\ntitle={Initial State for Bodies},\naxis x line*=bottom,\naxis y line*=left,\naxis z line*=left,\nxmajorgrids,\nymajorgrids,\nzmajorgrids,\nlegend style={at={(1.03,1)}, anchor=north west, legend cell align=left, align=left, draw=white!15!black}\n]\n\\addplot3[scatter, only marks, mark=o, color=mycolor1, mark options={}, scatter/use mapped color=mycolor1, visualization depends on={\\thisrow{size} \\as \\perpointmarksize}, scatter/@pre marker code/.append style={/tikz/mark size=\\perpointmarksize}] table[row sep=crcr]{%\nx\ty\tz\tsize\\\\\n0\t0\t0\t5.59016994374947\\\\\n57910000000\t0\t0\t2.51246890528022\\\\\n108200000000\t0\t0\t2.51246890528022\\\\\n149600000000\t0\t0\t2.51246890528022\\\\\n149600000000\t-363300000\t0\t2.5\\\\\n227920000000\t0\t0\t2.51246890528022\\\\\n778500000000\t0\t0\t2.51246890528022\\\\\n1352550000000\t0\t0\t2.51246890528022\\\\\n};\n\n\\end{axis}\n\\end{tikzpicture}%\n\\end{document}"}},"/PCC/subdividedRect":{"title":"Description","data":{"":"The code defines a LaTeX document of class \"standalone\" with the \"varwidth\" option. It loads the TikZ package and several TikZ libraries for positioning, chains, and shapes.It then sets the length of a node to a specified width using \\newlength and \\setlength. In the TikZ environment, it sets the style of every node to a rectangle split with a draw option and a 90-degree rotation. The rectangle split is divided into 10 parts. Finally, it creates a node with a rectangle split shape and a specified minimum width and height.","keywords#Keywords":"TikZ, positioning, chains, shapes, rectangle split.","source-code#Source Code":"\\documentclass[varwidth]{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{chains}\n\\usetikzlibrary{shapes.multipart}\n\n\n\\begin{document}\n\n\\newlength\\nodewidth\n\\setlength\\nodewidth{120mm}\n\n\\begin{tikzpicture}\n\\tikzset{every node/.style={rectangle split, draw, rotate=90}, rectangle split parts=10}\n\\node[rectangle split, minimum width= 1.2cm,\nminimum height = 1cm]  {};\n\\end{tikzpicture}\n\n\\end{document}"}},"/PCC/taskChannel":{"title":"Description","data":{"":"This is a LaTeX code for drawing a directed graph using the TikZ package. The graph consists of 7 nodes, each represented by a circle with a minimum size of 10pt. The nodes are connected by arrows, indicating the direction of the edges. The graph has two subgraphs, one on the left and the other on the right. The nodes on the left subgraph are connected to node 'r' using two arrows labeled 2 and 3. The nodes on the right subgraph are connected to node 'r' using one arrow labeled 1. The right subgraph has three nodes, with nodes r1a and r2tb connected to node 'r' using arrows labeled 1 and 2 respectively. Node r2tc is connected to node r1a using an arrow labeled 3. Node r3tb is connected to node r2tb using an arrow labeled 3. The left subgraph has four nodes with nodes r2a and r2t connected to node 'r' using arrows labeled 3 and 2 respectively. Node r3 is connected to node r2t using an arrow labeled 3. The code uses various TikZ options to specify the properties of the nodes and arrows such as fill color, line width, node distance, and arrow label position. The document class is set to standalone, which is used to create a PDF file containing only the TikZ picture.","keywords#Keywords":"latex, tikz, positioning, node, circle, draw, fill, inner sep, minimum size, right of, above right of, above of, arrows.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\tikzset{near start abs/.style={xshift=1cm}}\n\n\\usetikzlibrary{positioning}\n\\begin{document}\n\\begin{tikzpicture}[node distance=1.5cm]\n% place nodes\n\\node[circle,draw=black, fill=black, inner sep=0pt,minimum size=10pt] (r) {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,right of=r, minimum size=10pt] (r1a)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above right of=r, xshift=-0.25cm, minimum size=10pt] (r2a)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above of=r, minimum size=10pt] (r2t)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above right of=r2t, minimum size=10pt] (r3)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above of=r1a, minimum size=10pt] (r2tb)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above right of=r1a, minimum size=10pt] (r2tc)  {};\n\\node[circle,draw=black, fill=white, inner sep=0pt,above right of=r2tb, minimum size=10pt] (r3tb)  {};\n% Arrows, right subgraph\n\\draw[->,thick] (r) -- node[above] {\\small{1}} ++(r1a);\n\\draw[->,thick] (r1a) -- node[right] {\\small{3}} ++(r2tc);\n\\draw[->,thick] (r1a) -- node[right] {\\small{2}} ++(r2tb);\n\\draw[->,thick] (r2tb) -- node[right] {\\small{3}} ++(r3tb);\n% Left subgraph\n\\draw[->,thick] (r) -- node[right] {\\small{3}} ++(r2a);\n\\draw[->,thick] (r) -- node[right] {\\small{2}} ++(r2t);\n\\draw[->,thick] (r2t) -- node[right] {\\small{3}} ++(r3);\n\\end{tikzpicture}\n\\end{document}"}},"/PCC/tasks310":{"title":"Description","data":{"":"The code is a LaTeX document that uses the TikZ package to draw a diagram. The diagram consists of a chain of five identical ellipses, each containing a rectangle split into five parts. The rectangles are drawn with a minimum width of 1.2cm and a minimum height of 1cm. The ellipses are positioned in a chain using the TikZ library chains and are spaced apart by 1cm. The arrows between the ellipses are drawn using the TikZ library arrows and are thick and bent to the left at a 30 degree angle. The arrows connect the ellipses in a loop, going from the first ellipse to the second, then to the third, and so on, until it returns to the first ellipse again. The diagram is enclosed in a standalone document class so that it can be compiled separately.","keywords#Keywords":"latex, tikz, arrows, positioning, calc, chains, shapes.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{arrows,positioning,calc}\n\\usetikzlibrary{chains}\n\\usetikzlibrary{shapes.multipart}\n\\usetikzlibrary{shapes}\n\\begin{document}\n\n\\newsavebox{\\task}\n\\savebox{\\task}{%\n\\begin{tikzpicture}[font=\\small,\n>=stealth,\n]\n\\tikzset{every node/.style={rectangle split, draw, rotate=90}, rectangle split parts=5}\n\\node[rectangle split, minimum width= 1.2cm,\nminimum height = 1cm]  {};\n\\end{tikzpicture}%\n}\n\n\\begin{tikzpicture}\n{[start chain]\n\\node[ellipse, start chain, minimum width=90pt, draw] (t1){\\usebox{\\task}};\n\\node[ellipse, on chain, right=1cm of t1, draw] (t2) {\\usebox{\\task}};\n%\\node[block,on chain,join=by {arrow},right=1cm of N1] (N2) {N2};\n\\node[ellipse,on chain,right=1cm of t2, draw] (t3) {\\usebox{\\task}};\n\\node[ellipse,on chain, right=1cm of t3] (t4) {$\\cdots$};\n\\node[ellipse,on chain,right=1cm of t4, draw] (t5) {\\usebox{\\task}};\n}\n% Arrows\n\\path (t1) edge[very thick,->,bend left=30] node [left] {} (t2);\n\\path (t2) edge[very thick,->,bend left=30] node [left] {} (t3);\n\\path (t3) edge[very thick, ->,bend left=30] node [left] {} (t4);\n\\path (t4) edge[very thick, ->,bend left=30] node [left] {} (t5);\n\n% Arrows\n\\path (t5) edge[very thick, ->,bend left=30] node [left] {} (t4);\n\\path (t4) edge[very thick, ->,bend left=30] node [left] {} (t3);\n\\path (t3) edge[very thick, ->,bend left=30] node [left] {} (t2);\n\\path (t2) edge[very thick, ->,bend left=30] node [left] {} (t1);\n\\end{tikzpicture}\n\n\\end{document}"}},"/PCC/tasks312simpler":{"title":"Description","data":{"":"This code generates a simple diagram using the TikZ package in LaTeX.The first part of the code defines a new box called \"task\", which is a small rectangle split into five parts.The main part of the code creates a TikZ picture consisting of a chain of nodes connected by arrows. The nodes are circular and labeled t[0], t[1], t[2], and t[3]. The arrows connect each node to its immediate neighbors and loop back to the first node.The arrows are drawn using the \"bend left\" option to create a curved path.Overall, this code generates a simple circular linked list diagram.","keywords#Keywords":"tikz, arrows, positioning, calc, chains, shapes.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{arrows,positioning,calc}\n\\usetikzlibrary{chains}\n\\usetikzlibrary{shapes.multipart}\n\\usetikzlibrary{shapes}\n\\begin{document}\n\n\\newsavebox{\\task}\n\\savebox{\\task}{%\n\\begin{tikzpicture}[font=\\small,\n>=stealth,\n]\n\\tikzset{every node/.style={rectangle split, draw, rotate=90}, rectangle split parts=5}\n\\node[rectangle split, minimum width= 1.2cm,\nminimum height = 1cm]  {};\n\\end{tikzpicture}%\n}\n\n\\begin{tikzpicture}\n{[start chain]\n\\node[circle, start chain, draw] (t1){t[0]};\n\\node[circle, on chain, right=1cm of t1, draw] (t2) {t[1]};\n%\\node[block,on chain,join=by {arrow},right=1cm of N1] (N2) {N2};\n\\node[circle,on chain,right=1cm of t2, draw] (t3) {t[2]};\n\\node[circle,on chain, right=1cm of t3] (t4) {$\\cdots$};\n\\node[circle,on chain,right=1cm of t4, draw] (t5) {t[3]};\n}\n% Arrows\n\\path (t1) edge[very thick,->,bend left=30] node [left] {} (t2);\n\\path (t2) edge[very thick,->,bend left=30] node [left] {} (t3);\n\\path (t3) edge[very thick, ->,bend left=30] node [left] {} (t4);\n\\path (t4) edge[very thick, ->,bend left=30] node [left] {} (t5);\n\n% Arrows\n\\path (t5) edge[very thick, ->,bend left=30] node [left] {} (t4);\n\\path (t4) edge[very thick, ->,bend left=30] node [left] {} (t3);\n\\path (t3) edge[very thick, ->,bend left=30] node [left] {} (t2);\n\\path (t2) edge[very thick, ->,bend left=30] node [left] {} (t1);\n\\end{tikzpicture}\n\n\\end{document}"}},"/ReportDiagrams/ENGR003-004/gasCost":{"title":"Description","data":{"":"The code is a LaTeX document that produces a bar chart using the pgfplots package and the tikz graphics language. The chart shows the gas limits (in units) required for the deployment of several smart contracts: ERC20, ERC721, StoreFront, Registry, and Deployer. The x-axis shows the smart contract types, and the y-axis shows the gas limits. The gas limits are represented by bars, and there are three sets of bars representing the original deployment, a deployment with efficiency improvements, and a deployment using a Deployer. The chart also includes dashed lines representing the gas limits for the Mainnet, Kovan, Ropsten, and Rinkeby networks.The code defines several colors used in the chart, such as mainnet, kovan, rinkeby, and ropsten. The gas limits are hardcoded into the code as coordinates for each of the bars. The legend is set at the bottom of the chart, with three entries corresponding to the three sets of bars.The code also includes comments that provide additional information, such as the gas cost estimations for deploying each smart contract on the Ethereum network with a specific gas price, and the gas limits for each network represented by the dashed lines in the chart.","keywords#Keywords":"tikz, node, draw, circle, edge, left, right, above, below, label.","source-code#Source Code":"% Preamble: \\\n\n\\documentclass{standalone}\n\\usepackage{pgfplots}\n\\usepackage{tikz}\n\\pgfplotsset{width=7cm,compat=1.16}\n\\usepackage{color}\n\\definecolor{mypink1}{rgb}{0.858, 0.188, 0.478}\n\n\n\\definecolor{blacktext}{HTML}{000000}\n\n\\definecolor{mainnet}{HTML}{29B6AF}\n\\definecolor{kovan}{HTML}{7057ff}\n\n\\definecolor{rinkeby}{HTML}{F6C343}\n\n\\definecolor{ropsten}{HTML}{FF4A8D}\n\\begin{document}\n\\begin{tikzpicture}\n\\begin{axis}[\nx tick label style={\n/pgf/number format/1000 sep=},\n%xlabel=Smart Contracts,\nylabel=Gas Limits (Units),\n%enlargelimits=0.15,\n%legend style={cells={align=left}}\nlegend style={at={(0.4,-0.30)},\nanchor=north,legend columns=3,cells={align=left}},\nybar,\nbar width=7pt,\nytick={0,1.25e6,2.5e6,3.75e6,5e6, 6.25e6,7.5e6, 8.75e6,10e6},\nymin = 0,\nymax = 9.75e6,\nxticklabels={ERC20,ERC721,StoreFront,Registry,Deployer},xtick={1930,1940,1950,1960,1970},\nx tick label style={rotate=35,anchor=east}]\n]\n\\addplot coordinates {\n(1930,28e5) (1940,26e5)\n(1950,49e5) (1960,59e5) (1970,0)\n};\n\\addplot coordinates {\n(1930,26e5) (1940,24e5)\n(1950,41e5) (1960,46e5) (1970,0)\n};\n\n\\addplot coordinates {\n(1930,28e5) (1940,26e5)\n(1950,25e5) (1960,36e5) (1970,28e5)\n};\n\n\\addplot [dashed, mainnet,line legend,\nsharp plot,update limits=false,\n] coordinates { (1910,80e5) (1950,80e5) }\nnode [above] at (1950,80e5) {\\textcolor{mainnet}{Mainnet} \\textcolor{blacktext}{and} \\textcolor{kovan}{Kovan}};\n\n\\addplot [dashed,kovan,line legend,\nsharp plot,update limits=false,\n] coordinates { (1950,80e5) (1980,80e5) };\n\n\\addplot [dashed, ropsten,line legend,\nsharp plot,update limits=false,\n] coordinates { (1920,47e5) (1990,47e5) }\nnode [above,align=left] at (1940,47e5) {\\textcolor{ropsten}{Ropsten} \\\\ \\textcolor{ropsten}{(July 27)}};\n\n\n\\addplot [dashed, ropsten,line legend,\nsharp plot,update limits=false,\n] coordinates { (1910,94.8e5) (1990,94.8e5) }\nnode [below] at (1950,100.5e5) {\\textcolor{ropsten}{Ropsten} \\textcolor{ropsten} (July 29)};\n\n\\addplot [ dashed, rinkeby,line legend,\nsharp plot,update limits=false,\n] coordinates { (1910,76e5) (1990,76e5) }\nnode [below] at (1960,76e5) {\\textcolor{rinkeby}{Rinkeby}};\n\n\\legend{Original, Finding \\\\ Efficiencies, Using \\\\ Deployer}\n\\end{axis}\n\\end{tikzpicture}\n\n\\end{document}\n\n% Mainnet 8 mil 8000029\n% Kovan   8 mil\n% Rinkeby 7.6 mil\n% Ropsten 4.7 mil July 27\n\n% Renting out processing power to increase limits\n\n% Ropsten 9.48 mil July 29\n% Do unoptimizated\nStoreFront Deployment costs\nGas Price is 20000000000 wei\ngas estimation = 4924865 units\ngas cost estimation = 98497300000000000 wei\ngas cost estimation = 0.0984973 ether\n\nHarvestSFRegistry Deployment cost.\nGas Price is 20000000000 wei\ngas estimation = 5885566 units\ngas cost estimation = 117711320000000000 wei\ngas cost estimation = 0.11771132 ether\n\nRewardToken Deployment cost.\nGas Price is 20000000000 wei\ngas estimation = 2583571 units\ngas cost estimation = 51671420000000000 wei\ngas cost estimation = 0.05167142 ether\n\nHarvestToken Deployment cost.\nGas Price is 20000000000 wei\ngas estimation = 2780371 units\ngas cost estimation = 55607420000000000 wei\ngas cost estimation = 0.05560742 ether\n\n\n% Opt by removing functionality\nStoreFront Deployment costs\nGas Price is 20000000000 wei\ngas estimation = 4154023 units\ngas cost estimation = 98497300000000000 wei\ngas cost estimation = 0.0984973 ether\n\nHarvestSFRegistry Deployment cost.\nGas Price is 20000000000 wei\ngas estimation = 4602312 units\ngas cost estimation = 117711320000000000 wei\ngas cost estimation = 0.11771132 ether\n\nRewardToken Deployment cost.\nGas Price is 20000000000 wei\ngas estimation = 2580571 units\ngas cost estimation = 51671420000000000 wei\ngas cost estimation = 0.05167142 ether\n\nHarvestToken Deployment cost.\nGas Price is 20000000000 wei\ngas estimation = 2750371 units\ngas cost estimation = 55607420000000000 wei\ngas cost estimation = 0.05560742 ether\n\n\n% Optimizated by deployer\n\nStoreFront Deployment costs\nGas Price is 20000000000 wei\ngas estimation = 2154023 units\ngas cost estimation = 98497300000000000 wei\ngas cost estimation = 0.0984973 ether\n\nHarvestSFRegistry Deployment cost.\nGas Price is 20000000000 wei\ngas estimation = 2902312 units\ngas cost estimation = 117711320000000000 wei\ngas cost estimation = 0.11771132 ether\n\nRewardToken Deployment cost.\nGas Price is 20000000000 wei\ngas estimation = 2583571 units\ngas cost estimation = 51671420000000000 wei\ngas cost estimation = 0.05167142 ether\n\nHarvestToken Deployment cost.\nGas Price is 20000000000 wei\ngas estimation = 2750371 units\ngas cost estimation = 55607420000000000 wei\ngas cost estimation = 0.05560742 ether\n\nDeployer 721 Cost\n\n2825921 gas uints\n\n% Using deployer"}},"/ReportDiagrams/ENGR003-004/harvestArchitecture":{"title":"Description","data":{"":"The code is a LaTeX document that uses the TikZ package to create a diagram. The diagram consists of a matrix of nodes, where each node is styled as a box with a particular color, text, and drop shadow effect. The matrix is surrounded by a wide node that serves as a background for the entire diagram. The boxes are arranged in rows and columns, with some cells left empty. The text inside the boxes represents different components of a software architecture, such as ERC20 and ERC721 Deployers, Exchanger, Harvest Registry, Web3, Truffle, and React. The diagram uses a color scheme with shades of blue, green, pink, and red. Finally, the code defines some custom styles and macros to simplify the creation of nodes with particular styles and labels.","keywords#Keywords":"tikzpicture, node, draw, rectangle, fill, color, above, right, left, below, anchor, text, scale, path.","source-code#Source Code":"\\documentclass[border=3mm]{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{backgrounds,shadows,positioning,fit,matrix,shapes.geometric, shapes.arrows} % add shadows #1\n\n% a way to cut shadows in a cell #2\n%https://tex.stackexchange.com/questions/129318/remove-drop-shadow-from-one-node\n\\makeatletter\n\\tikzset{no shadows/.code=\\let\\tikz@preactions\\pgfutil@empty}\n\\makeatother\n\n\\tikzset{background/.style={rectangle, fill=red!10, inner sep=0.2cm},\nbackgroundN/.style={rectangle, fill=white, inner sep=0.3cm},\nbackgroundNN/.style={rectangle, fill=red!10, inner sep=0.2cm}}\n\n\\tikzset{back/.style={rectangle, fill=blue!10, inner sep=0.2cm},\nbackgroundN/.style={rectangle, fill=white, inner sep=0.3cm},\nbackgroundNN/.style={rectangle, fill=red!10, inner sep=0.2cm}}\n\n\\definecolor{mybluei}{RGB}{124,156,205}\n\\definecolor{myblueii}{RGB}{73,121,193}\n\\definecolor{mygreen}{RGB}{202,217,126}\n\\definecolor{mypink}{RGB}{233,198,235}\n\\definecolor{antiquefuchsia}{rgb}{0.57, 0.36, 0.51}\n\\definecolor{byzantium}{rgb}{0.44, 0.16, 0.39}\n\\definecolor{darkcandyapplered}{rgb}{0.64, 0.0, 0.0}\n\\definecolor{darkbyzantium}{rgb}{0.36, 0.22, 0.33}\n\\definecolor{jasper}{rgb}{0.84, 0.23, 0.24}\n\\definecolor{pastelred}{rgb}{1.0, 0.41, 0.38}\n\\definecolor{pinkpearl}{rgb}{0.91, 0.67, 0.81}\n\\definecolor{blue(pigment)}{rgb}{0.2, 0.2, 0.6}\n\n\\newcommand\\widernode[5][widebox]{\n\\node[\n#1,\nfit={(#2) (#3)},\nlabel=center:{\\sffamily\\bfseries\\color{black}#4}] (#5) {};\n}\n\n\\begin{document}\n\n\\begin{tikzpicture}[node distance=2pt,outer sep=0pt, % just do nothing after modification\nboxstyle/.style={\ndraw=white,\nfill=#1,\nrounded corners, drop shadow, %to get a shadow in below a node\nfont={\\sffamily\\bfseries\\color{white}},\nalign=center,\nminimum height=30pt\n},\nbox/.style={\nboxstyle=#1,\ntext width=2.5cm},\nbox/.default=mybluei,\ntitle/.style={font={\\sffamily\\bfseries\\color{black}}},\nwidebox/.style={draw=white,inner sep=0pt, rounded corners,fill=#1,drop shadow},\nwidebox/.default=mybluei,\nmylabel/.style={font={\\sffamily\\bfseries\\color{black}}},\ndatabase/.style={\ncylinder,\ncylinder uses custom fill,\ncylinder body fill=yellow!50,\ncylinder end fill=yellow!50,\nshape border rotate=90,\naspect=0.25,\ndraw\n}\n]\n\n\n\\matrix (stack) [%  boxstyle=mybluei!40,%will overpaint blocks with background\ncolumn sep=10pt, row sep=10pt, inner sep=4mm,%\nmatrix of nodes,\nnodes={box, outer sep=0pt, anchor=center, inner sep=3pt},%\nnodes in empty cells=false,% #3\nrow 1/.style={nodes={fill=none,draw=none,minimum height=3mm}},\n]\n{\n|[no shadows]| & & & [1cm] & & |[no shadows]| \\\\ % #5\n%RCP main & Authoring & Browsing & Publishing & Search&|[no shadows]| \\\\\n|[no shadows]| & & |[no shadows]| & |[no shadows]|&  &|[no shadows]| \\\\\n|[box=byzantium]| ERC20 Deployer & |[box=byzantium]| Harvest Registry & |[box=byzantium]| ERC721 Deployer &|[no shadows]| & |[no shadows]|& |[box=blue(pigment)]| Web3 \\\\\n|[box=byzantium]| Exchanger & |[no shadows]| &|[no shadows]| & |[no shadows]| &|[no shadows]| & |[box=blue(pigment)]| Truffle \\\\\n|[box=byzantium]| ERC20 & |[no shadows]| & |[no shadows]| & |[no shadows]| & |[no shadows]| & |[box=blue(pigment)]| React \\\\};\n\n\n\\widernode[]{stack-1-1}{stack-1-6}{Harvest Architecture}{EPF} %#5\n\n\\widernode[widebox=mygreen]{stack-2-1}{stack-2-3}{Smart Contracts in Solidity}{SM}\n\n\\widernode[widebox=pastelred]{stack-2-4}{stack-2-6}{Front End Libraries and Tools in Javascript}{FE}\n\n\\widernode{stack-3-4}{stack-3-5}{Metamask}{MM}\n% \\widernode{stack-3-6}{stack-3-6}{Web3}{AA}\n\\widernode{stack-4-4}{stack-4-5}{Webpack}{BB}\n%  \\widernode{stack-4-6}{stack-4-6}{Truffle}{CC}\n\n\\widernode{stack-5-4}{stack-5-5}{Drizzle}{DC}\n%  \\widernode{stack-5-6}{stack-5-6}{React}{MC23}\n\n%\\widernode[widebox=pinkpearl]{stack-4-1}{stack-4-1}{Exchanger}{UMA23}\n\\widernode[widebox=pinkpearl]{stack-4-2}{stack-4-3}{StoreFront}{UMA}\n%\\widernode{stack-4-4}{stack-4-5}{Export/Import}{ExImp}\n\\widernode[widebox=pinkpearl]{stack-5-2}{stack-5-3}{ERC721}{EMF}\n%\\widernode[widebox=mygreen]{stack-6-1}{stack-6-5}{RCP Runtime}{RCPrun}\n\n\n%    \\widernode[widebox, text width=1.5cm, align=center]{stack-2-6}{stack-3-6}{Normal text works}{NTWorks}\n%\n\n%\\node [fit={(stack.south west)(stack.south east)},boxstyle=myblueii,draw=black,inner sep=0pt,below=3pt of stack.south,anchor=north,label={[mylabel]center:Java Runtime}] (JavaR) {};\n\n%\n%\n\n%\n\n\\begin{pgfonlayer}{background}\n\\coordinate (aux) at ([xshift=1mm]stack-5-6.east);\n\\node [back,\nfit=(stack-1-1) (stack-5-1) (aux), draw, drop shadow,\n] {};\n%\\node [backgroundN,\n%    fit=(stack-3-5) ] {};\n%\\node [backgroundNN,draw, drop shadow,\n%    fit=(stack-3-5) ] {};\n\\end{pgfonlayer}\n\n%    % smth to create an arbitrary block with a border and shadow\n%Background for smart contracts\n\\begin{pgfonlayer}{background}\n\\coordinate (aux) at ([xshift=1mm]stack-5-3.east);\n\\node [background,\nfit=(stack-2-1) (stack-5-1) (aux), draw, drop shadow,\n] {};\n%\\node [backgroundN,\n%    fit=(stack-3-5) ] {};\n%\\node [backgroundNN,draw, drop shadow,\n%    fit=(stack-3-5) ] {};\n\\end{pgfonlayer}\n\n\\begin{pgfonlayer}{background}\n\\coordinate (aux) at ([xshift=1mm]stack-5-6.east);\n\\node [background,\nfit=(stack-2-4) (stack-5-4) (aux), draw, drop shadow,\n] {};\n%\\node [backgroundN,\n%    fit=(stack-3-5) ] {};\n%\\node [backgroundNN,draw, drop shadow,\n%    fit=(stack-3-5) ] {};\n\\end{pgfonlayer}\n\\end{tikzpicture}\n\n\\end{document}"}},"/ReportDiagrams/ENGR003-004/harvestArchitectureGood":{"title":"Description","data":{"":"The code is a TikZ picture that creates a diagram consisting of a matrix of nodes. The diagram represents a stack of technologies related to blockchain development. The matrix has 4 rows and 6 columns, with each cell containing a box representing a technology or a blank cell. The boxes are colored rectangles with rounded corners and a drop shadow effect, and they have a title in the center in bold sans-serif font. The boxes are connected with arrows to indicate dependencies between the technologies. The diagram uses various TikZ styles and libraries, including shadows, positioning, fit, matrix, and shapes. The code also defines several custom colors and styles, such as widebox, database, and mylabel. Overall, the diagram provides a visual overview of the blockchain development stack and how the different technologies are related.","keywords#Keywords":"tikzpicture, draw, node, rectangle, align, below, of, edge, ->, style, bend left.","source-code#Source Code":"\\documentclass[border=3mm]{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{backgrounds,shadows,positioning,fit,matrix,shapes.geometric, shapes.arrows} % add shadows #1\n\n% a way to cut shadows in a cell #2\n%https://tex.stackexchange.com/questions/129318/remove-drop-shadow-from-one-node\n\\makeatletter\n\\tikzset{no shadows/.code=\\let\\tikz@preactions\\pgfutil@empty}\n\\makeatother\n\n\\tikzset{background/.style={rectangle, fill=red!10, inner sep=0.2cm},\nbackgroundN/.style={rectangle, fill=white, inner sep=0.3cm},\nbackgroundNN/.style={rectangle, fill=red!10, inner sep=0.2cm}}\n\n\\tikzset{back/.style={rectangle, fill=blue!10, inner sep=0.2cm},\nbackgroundN/.style={rectangle, fill=white, inner sep=0.3cm},\nbackgroundNN/.style={rectangle, fill=red!10, inner sep=0.2cm}}\n\n\\definecolor{mybluei}{RGB}{124,156,205}\n\\definecolor{myblueii}{RGB}{73,121,193}\n\\definecolor{mygreen}{RGB}{202,217,126}\n\\definecolor{mypink}{RGB}{233,198,235}\n\\definecolor{rinkeby}{HTML}{F6C343}\n\\definecolor{kovan}{HTML}{7057ff}\n\\definecolor{ropsten}{HTML}{FF4A8D}\n\\definecolor{mainnet}{HTML}{29B6AF}\n\\definecolor{antiquefuchsia}{rgb}{0.57, 0.36, 0.51}\n\\definecolor{byzantium}{rgb}{0.44, 0.16, 0.39}\n\\definecolor{darkcandyapplered}{rgb}{0.64, 0.0, 0.0}\n\\definecolor{darkbyzantium}{rgb}{0.36, 0.22, 0.33}\n\\definecolor{jasper}{rgb}{0.84, 0.23, 0.24}\n\\definecolor{pastelred}{rgb}{1.0, 0.41, 0.38}\n\\definecolor{pinkpearl}{rgb}{0.91, 0.67, 0.81}\n\\definecolor{blue(pigment)}{rgb}{0.2, 0.2, 0.6}\n\n\\newcommand\\widernode[5][widebox]{\n\\node[\n#1,\nfit={(#2) (#3)},\nlabel=center:{\\sffamily\\bfseries\\color{black}#4}] (#5) {};\n}\n\n\\begin{document}\n\n\\begin{tikzpicture}[node distance=2pt,outer sep=0pt, % just do nothing after modification\nboxstyle/.style={\ndraw=white,\nfill=#1,\nrounded corners, drop shadow, %to get a shadow in below a node\nfont={\\sffamily\\bfseries\\color{white}},\nalign=center,\nminimum height=30pt\n},\nbox/.style={\nboxstyle=#1,\ntext width=2.5cm},\nbox/.default=mybluei,\ntitle/.style={font={\\sffamily\\bfseries\\color{black}}},\nwidebox/.style={draw=white,inner sep=0pt, rounded corners,fill=#1,drop shadow},\nwidebox/.default=mybluei,\nmylabel/.style={font={\\sffamily\\bfseries\\color{black}}},\ndatabase/.style={\ncylinder,\ncylinder uses custom fill,\ncylinder body fill=yellow!50,\ncylinder end fill=yellow!50,\nshape border rotate=90,\naspect=0.25,\ndraw\n}\n]\n\n\n\\matrix (stack) [%  boxstyle=mybluei!40,%will overpaint blocks with background\ncolumn sep=10pt, row sep=10pt, inner sep=4mm,%\nmatrix of nodes,\nnodes={box, outer sep=0pt, anchor=center, inner sep=3pt},%\nnodes in empty cells=false,% #3\nrow 1/.style={nodes={fill=none,draw=none,minimum height=3mm}},\n]\n{\n|[no shadows]| & & & [1cm] & & |[no shadows]| \\\\ % #5\n%RCP main & Authoring & Browsing & Publishing & Search&|[no shadows]| \\\\\n|[no shadows]| & & |[no shadows]| & |[no shadows]|&  &|[no shadows]| \\\\\n|[no shadows]|  &  |[no shadows]|  &  |[no shadows]|  &|[no shadows]| & |[no shadows]|& |[box=blue(pigment)]| Web3 \\\\\n|[no shadows]|& |[no shadows]| &|[no shadows]| & |[no shadows]| &|[no shadows]| & |[box=blue(pigment)]| Truffle \\\\\n||[no shadows]| & |[no shadows]| & |[no shadows]| & |[no shadows]| & |[no shadows]| & |[box=blue(pigment)]| React \\\\};\n\n\n\\widernode[]{stack-1-1}{stack-1-6}{Harvest Architecture}{EPF} %#5\n\n\\widernode[widebox=mygreen]{stack-2-1}{stack-2-3}{Blockchain Stack}{SM}\n\n\\widernode[widebox=pastelred]{stack-2-4}{stack-2-6}{Front End Stack}{FE}\n\\widernode[widebox=mainnet]{stack-3-1}{stack-3-3}{Etherum}{Ethereum}\n\n\\widernode{stack-3-4}{stack-3-5}{Metamask}{MM}\n% \\widernode{stack-3-6}{stack-3-6}{Web3}{AA}\n\\widernode[widebox=rinkeby]{stack-4-1}{stack-4-3}{Solidity}{Solidity}\n\\widernode{stack-4-4}{stack-4-5}{Webpack}{BB}\n%  \\widernode{stack-4-6}{stack-4-6}{Truffle}{CC}\n\n\\widernode[widebox=kovan]{stack-5-1}{stack-5-3}{IPFS}{IPFS}\n\\widernode{stack-5-4}{stack-5-5}{Drizzle}{DC}\n%  \\widernode{stack-5-6}{stack-5-6}{React}{MC23}\n\n%\\widernode[widebox=pinkpearl]{stack-4-1}{stack-4-1}{Exchanger}{UMA23}\n%\\widernode[widebox=pinkpearl]{stack-4-2}{stack-4-3}{StoreFront}{UMA}\n%\\widernode{stack-4-4}{stack-4-5}{Export/Import}{ExImp}\n%\\widernode[widebox=pinkpearl]{stack-5-2}{stack-5-3}{ERC721}{EMF}\n%\\widernode[widebox=mygreen]{stack-6-1}{stack-6-5}{RCP Runtime}{RCPrun}\n\n\n%    \\widernode[widebox, text width=1.5cm, align=center]{stack-2-6}{stack-3-6}{Normal text works}{NTWorks}\n%\n\n%\\node [fit={(stack.south west)(stack.south east)},boxstyle=myblueii,draw=black,inner sep=0pt,below=3pt of stack.south,anchor=north,label={[mylabel]center:Java Runtime}] (JavaR) {};\n\n%\n%\n\n%\n\n\\begin{pgfonlayer}{background}\n\\coordinate (aux) at ([xshift=1mm]stack-5-6.east);\n\\node [back,\nfit=(stack-1-1) (stack-5-1) (aux), draw, drop shadow,\n] {};\n%\\node [backgroundN,\n%    fit=(stack-3-5) ] {};\n%\\node [backgroundNN,draw, drop shadow,\n%    fit=(stack-3-5) ] {};\n\\end{pgfonlayer}\n\n%    % smth to create an arbitrary block with a border and shadow\n%Background for smart contracts\n\\begin{pgfonlayer}{background}\n\\coordinate (aux) at ([xshift=1mm]stack-5-3.east);\n\\node [background,\nfit=(stack-2-1) (stack-5-1) (aux), draw, drop shadow,\n] {};\n%\\node [backgroundN,\n%    fit=(stack-3-5) ] {};\n%\\node [backgroundNN,draw, drop shadow,\n%    fit=(stack-3-5) ] {};\n\\end{pgfonlayer}\n\n\\begin{pgfonlayer}{background}\n\\coordinate (aux) at ([xshift=1mm]stack-5-6.east);\n\\node [background,\nfit=(stack-2-4) (stack-5-4) (aux), draw, drop shadow,\n] {};\n%\\node [backgroundN,\n%    fit=(stack-3-5) ] {};\n%\\node [backgroundNN,draw, drop shadow,\n%    fit=(stack-3-5) ] {};\n\\end{pgfonlayer}\n\\end{tikzpicture}\n\n\\end{document}"}},"/ReportDiagrams/ENGR003-004/requiredFields":{"title":"Description","data":{"":"The code is a LaTeX document that creates a diagram using TikZ, a package for creating graphics in LaTeX. The diagram consists of three matrices, each with a different color scheme and containing text boxes that are labeled with icons and text. The first matrix is labeled \"Personal Info\" and contains three text boxes labeled \"Name, Address,\" \"Date Of Birth,\" and \"Zip Code.\" The second matrix is labeled \"Financial Info\" and contains three text boxes labeled \"Credit Score,\" \"Income,\" and \"SIN Number.\" The third matrix is labeled \"Property Info\" and contains three text boxes labeled \"Mortgage Amount,\" \"Purchase Amount,\" and \"Other Properties.\" The matrices are positioned side-by-side using the \"right\" and \"anchor\" commands, and the fonts used in the text boxes are sans-serif. The code also defines various color schemes and styles for the matrices and text boxes.","keywords#Keywords":"Latex, TikZ, matrix, positioning, nodes, styles, color, fill, line width, rounded corners, minimum height, align, text, font, text width, label, fontawesome, anchor.","source-code#Source Code":"\\documentclass[border=5pt]{standalone}\n\\usepackage{fontawesome}\n\\usepackage{tikz}\n\\usetikzlibrary{matrix, positioning}\n\n\\definecolor{bluei}{RGB}{83,116,191}\n\\definecolor{blueii}{RGB}{207,212,232}\n\\definecolor{greeni}{RGB}{135,200,81}\n\\definecolor{greenii}{RGB}{216,235,207}\n\\definecolor{redi}{RGB}{196,125,82}\n\\definecolor{redii}{RGB}{234,214,207}\n\n\\tikzset{\nmyiblock/.style 2 args={\ndraw=white,\nfill=#1,\nline width=1pt,\nrounded corners,\nminimum height=1cm,\nalign=center,\ntext=white,\nfont=\\sffamily,\ntext width=#2\n},\nmyoblock/.style={\nmatrix of nodes,\nfill=#1,\nrounded corners,\nalign=center,\ninner xsep=10pt,\ndraw=none,\nrow sep=0.5cm\n},\nmylabel/.style={\nblack,\nminimum height=0pt\n}\n}\n\n\\begin{document}\n\n\\begin{tikzpicture}\n\\matrix (A) [myoblock={blueii}, nodes={myiblock={bluei}{3cm}}, row sep=3pt]\n{|[label={[mylabel]\\faUserSecret \\ Personal Info}]|{ Name, Address }\\\\\nDate Of Birth \\\\\nZip Code\\\\\n};\n\n\\matrix (B) [myoblock={greenii}, nodes={myiblock={greeni}{3cm}},\nrow sep=3pt, right=5mm of A.north east, anchor=north west]\n{|[label={[mylabel] \\faBank \\ Financial Info}]| Credit Score \\\\\nIncome \\\\\nSIN Number\\\\\n};\n\n\\matrix (C) [myoblock={redii}, nodes={myiblock={redi}{3cm}},\nrow sep=3pt, right=5mm of B.north east, anchor=north west]\n{|[label={[mylabel] \\faHome \\ Property Info}]| Mortgage Amount \\\\\nPurchase Amount \\\\\nOther Properties \\\\\n};\n\\end{tikzpicture}\n\n\\end{document}"}},"/ReportDiagrams/ENGR446/advancedTimeline":{"title":"Description","data":{"":"The provided code is a LaTeX package that defines a TikZ style called chronos for drawing a horizontal timeline with labeled years, and events/periods marked on it.The package provides a number of keys to customize the timeline, such as start date and end date to specify the start and end dates of the timeline, width and height to set the dimensions of the timeline, period to set the style of the periods on the timeline, and period event to set the style of events within the periods.Events and periods are added to the timeline using the chronos date and chronos period date keys respectively, with the date specified as YYYY-MM-DD. Each event/period can also be labeled using the period event key.The timeline itself is drawn using the chronos style, which calculates the position of each year label based on the start and end dates of the timeline, and draws a horizontal line to represent the timeline.The backgrounds and arrows.meta TikZ libraries are also loaded for drawing the events/periods and arrows respectively.","keywords#Keywords":"tikzpicture, node, draw, rectangle, fill, right, below, path, coordinate.","source-code#Source Code":"\\documentclass[tikz,multi,border=10pt]{standalone}\n\\usepackage{datenumber,xparse}\n\\usetikzlibrary{arrows.meta,backgrounds}\n\\newcounter{chronosstartdate}\n\\newcounter{chronosenddate}\n\\newcounter{chronosstartyear}\n\\newcounter{chronosendyear}\n\\newcounter{chronosyeardate}\n\\newcounter{chronosthingdate}\n\\newcounter{chronosotherthingdate}\n\\pgfkeys{/pgf/number format,\nint detect,\nset thousands separator={},\n}\n\\tikzset{\nchronos/.code={% https://tex.stackexchange.com/a/159856/ - Claudio Fiandrino\n\\tikzset{%\nalign=center,\nanchor=mid,\n/chronos/.cd,\n#1\n}%\n\\setstartyear{\\chronosstartyear}%\n\\setmydatenumber{chronosstartdate}{\\chronosstartyear}{\\chronosstartmonth}{\\chronosstartday}%\n\\setmydatenumber{chronosenddate}{\\chronosendyear}{\\chronosendmonth}{\\chronosendday}%\n\\pgfmathsetmacro\\chronosunit{(\\chronoswidth-20pt)/(\\thechronosenddate-\\thechronosstartdate)}%\n\\draw [line width=\\chronosheight] (-10pt,0) coordinate (chronos pre) -- +(\\chronoswidth,0) coordinate (chronos post);\n\\coordinate (chronos start) at (0,0);\n\\coordinate (chronos end) at ([xshift=-10pt]chronos post);\n\\setcounter{chronosstartyear}{\\chronosstartyear}%\n\\setcounter{chronosendyear}{\\chronosendyear}%\n\\def\\tempa{01}%\n\\ifx\\chronosstartmonth\\tempa\n\\ifx\\chronosstartday\\tempa\n\\else\\stepcounter{chronosstartyear}%\n\\fi\n\\else\\stepcounter{chronosstartyear}%\n\\fi\n\\def\\tempa{12}%\n\\def\\tempb{31}%\n\\ifx\\chronosendmonth\\tempa\n\\ifx\\chronosendday\\tempb\n\\stepcounter{chronosendyear}%\n\\fi\n\\fi\n\\foreach \\i in {\\thechronosstartyear,...,\\thechronosendyear} {%\n\\setmydatenumber{chronosyeardate}{\\i}{01}{01}%\n\\node [above, anchor=south, yshift=.5*\\chronosheight] at ({(\\thechronosyeardate-\\thechronosstartdate)*\\chronosunit pt},0) {\\i}; }\n},\nchronos set date/.code args={#1-#2-#3:#4}{%\n\\tikzset{%\n/chronos/.cd,\n#4 year={#1},\n#4 month={#2},\n#4 day={#3},\n}%\n\\setmydatenumber{chronos#4date}{\\csname chronos#4year\\endcsname}{\\csname chronos#4month\\endcsname}{\\csname chronos#4day\\endcsname}%\n},\nchronos date/.style args={#1-#2-#3}{%\nchronos set date/.expanded={#1-#2-#3:thing}%\n},\nchronos period date/.style args={#1-#2-#3}{%\nchronos set date/.expanded={#1-#2-#3:otherthing}%\n},\n/chronos/.search also={/tikz},\n/chronos/.cd,\nstart year/.store in=\\chronosstartyear,\nstart month/.store in=\\chronosstartmonth,\nstart day/.store in=\\chronosstartday,\nend year/.store in=\\chronosendyear,\nend month/.store in=\\chronosendmonth,\nend day/.store in=\\chronosendday,\nthing year/.store in=\\chronosthingyear,\nthing month/.store in=\\chronosthingmonth,\nthing day/.store in=\\chronosthingday,\notherthing year/.store in=\\chronosotherthingyear,\notherthing month/.store in=\\chronosotherthingmonth,\notherthing day/.store in=\\chronosotherthingday,\nstart date/.style args={#1-#2-#3}{%\nstart year={#1},\nstart month={#2},\nstart day={#3},\n},\nend date/.style args={#1-#2-#3}{%\nend year={#1},\nend month={#2},\nend day={#3},\n},\nwidth/.store in=\\chronoswidth,\nheight/.store in=\\chronosheight,\nperiod/.style={draw=gray},\nperiod event line/.style={draw=gray, -{Triangle[width=1.5pt, reversed, length=.75pt, fill=gray]}},\nperiod event/.style={anchor=north, fill=gray!25, draw=gray, rounded corners, align=center, font=\\footnotesize},\nevent line/.style={draw=gray, -{Triangle[width=1.5pt, reversed, length=.75pt, fill=gray]}},\nevent/.style={anchor=north, fill=gray!25, draw=gray, rounded corners, align=center, font=\\footnotesize},\nstart date=1001-10-01,\nend date=1003-06-14,\nwidth=100mm,\nheight=1pt,\nchronos date=1850-01-01,\nchronos period date=1851-01-01,\n}\n\\NewDocumentCommand \\chronosevent { O {} m O {} +m D () { -10pt-.5*\\chronosheight } }\n{%\n\\scoped[on background layer]{\\path [postaction={/chronos/event line, #1}, chronos date/.expanded={#2}] ({(\\thechronosthingdate-\\thechronosstartdate)*\\chronosunit pt},0) -- +(0,#5) node [/chronos/event, #3] {\\chronosthingday/\\chronosthingmonth/\\chronosthingyear\\\\#4};}\n}\n\\NewDocumentCommand \\chronosperiod { O {} m O {} m O {} +m D () { -10pt-.5*\\chronosheight } }\n{%\n\\tikzset{%\nchronos date/.expanded={#2}, chronos period date/.expanded={#4}\n}\n\\path [postaction={line width=\\chronosheight, /chronos/period, #1}] ({(\\thechronosthingdate-\\thechronosstartdate)*\\chronosunit pt},0) -- ({(\\thechronosotherthingdate-\\thechronosstartdate)*\\chronosunit pt},0);\n\\scoped[on background layer]{\\path [postaction={/chronos/period event line, #3}] ({(.5*\\thechronosotherthingdate+.5*\\thechronosthingdate-\\thechronosstartdate)*\\chronosunit pt},0) -- +(0,#7) node [/chronos/period event, #5] {\\chronosthingday/\\chronosthingmonth/\\chronosthingyear--\\chronosotherthingday/\\chronosotherthingmonth/\\chronosotherthingyear\\\\#6};}\n}\n\\begin{document}\n\\begin{tikzpicture}\n[\n% yscale = 5,\nchronos={%\nwidth=360mm,\nheight=10pt,\nstart date=2008-01-01,\nend date=2018-05-05,\nperiod/.style={draw=green},\nevent line/.append style={draw=blue},\nperiod event line/.append style={draw=green},\nevent/.append style={fill=blue!25, draw=blue, text=blue},\nperiod event/.append style={fill=green!25, draw=green!75!black, text=green!75!black},\n}\n]\n%\\chronosperiod [draw=red] {2011-10-10} [draw=red] {2012-01-16} [fill=red!25, draw=red, text=red] {Leave}\n%\\chronosperiod {2013-03-23} {2014-05-27} {training}\n\\chronosevent[draw=green] {2008-01-03} [draw=black,fill=green!10, draw=green, text=black]{Bitcoin White Paper}\n\n\\chronosevent[draw=green] {2009-01-03} [draw=black,fill=green!10, draw=green, text=black]{Bitcoin “Genesis” Block}\n\n\\chronosperiod [draw=red] {2010-08-16} [draw=red] {2013-02-20} [fill=red!25, draw=red, text=red] {Bitcoin popular explodes \\\\ 1,309 BTC to \\$1 USD in 2010 \\\\ to 1 BTC = \\$31 USD in 2013}\n\n\\chronosperiod {2013-01-01} [draw=red] {2013-12-31} {Ethereum White paper published \\\\ Ethereum yellow paper published}\n\n\\chronosevent {2015-06-15} {Ethereum \\\\ “Genesis” \\\\ Block}\n\n% See https://blog.seedly.sg/cryptocurrency-timeline-beginning-end-everything/\n\\chronosevent {2015-12-31} {Hyperledger \\\\ project \\\\ started.}\n\n\\chronosevent {2017-04-04} {Hyperledger Burrow \\\\ 0.16.0 released}\n\n\\chronosevent {2018-04-19} {Amazon Launches \\\\ AWS BlockChain Templates}\n% Researchers published a paper showing that by November 2013 bitcoin commerce was no longer driven by “sin” activities but instead by legitimate enterprises. Uber switched to bitcoin in Argentina after the government blocked credit card companies from dealing with Uber.\n\n%https://hackernoon.com/blockchain-jobs-and-salaries-2018-report-45d3e7741c19\n\n\\end{tikzpicture}\n\\end{document}"}},"/ReportDiagrams/ENGR446/betterClientServer":{"title":"Description","data":{"":"documentclass, standalone, tikz, usetikzlibrary, positioning, matrix, shapes.arrows, tikzset, modulematrix, style, rounded corners, draw, matrix of nodes, row sep, column sep, nodes, align, font, inner ysep, simple module, top color, bottom color, text width, minimum height, module down arrow, module right arrow, single arrow, single arrow head extend, inner color, outer color, shape border uses incircle, anchor.","keywords#Keywords":"tikz, positioning, matrix, shapes, modulematrix, module, simple module, module down arrow, module right arrow, module arrow.","source-code#Source Code":"\\documentclass[border=3mm]{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning,matrix,shapes.arrows}\n\n\\tikzset{\nmodulematrix/.style={draw=blue!50!red,rounded corners,matrix of nodes,row sep=1cm,column sep=1cm,nodes={draw=green!70,align=center,font=\\sffamily},inner ysep=0.5cm},\nmodule/.style={rounded corners, align=center, font=\\sffamily, thick},\nsimple module/.style={module, top color=blue!10, bottom color=blue!35, draw=blue!75, text width=40mm, minimum height=15mm},\nmodule down arrow/.style={module arrow, shape border rotate=-90},\nmodule right arrow/.style={module arrow},\nmodule arrow/.style={single arrow, single arrow head extend=2.5mm, draw=gray!75, inner color=gray!20, outer color=gray!35, thick, shape border uses incircle, anchor=tail,minimum height=0.7cm},\n}\n\\begin{document}\n\\begin{tikzpicture}\n\\node [simple module] (mA) {Module A};\n\\matrix[modulematrix,below=of mA,label={[anchor=south]below:Module B}] (mB) {Description 1 & Description 2 \\\\};\n\\matrix[modulematrix,right=of mB,nodes={text width=5cm,align=center},label={[anchor=north]above:Module C}] (mC) {Description 3 \\\\ Description 4 \\\\};\n\\matrix[modulematrix,below=of mC,label={[anchor=south]below:Module D}] (mD) {Description 5 & Description 6 \\\\};\n\\node [simple module,below=of mD] (mE) {Module E};\n\n\\foreach \\n in {mA,mC-1-1,mC,mD}\n\\node[module down arrow,below=1mm of \\n] {};\n\n\\foreach \\n in {mB-1-1,mB,mD-1-1}\n\\node[module right arrow,right=1mm of \\n] {};\n\\end{tikzpicture}\n\\end{document}"}},"/ReportDiagrams/ENGR446/blockchain":{"title":"Description","data":{"":"This is a LaTeX code for drawing a diagram using TikZ, a powerful package for creating graphics in LaTeX. The diagram consists of a DNA-like coil made using the decorations.pathmorphing and shapes TikZ libraries. The coil is composed of four segments that form a rectangular shape, with each segment having a different amplitude.There is a chain of nodes going from left to right, each node having a rectangular shape with a drop shadow effect. The style for each node is defined using the every on chain style, and includes properties such as the color, font, and minimum width and height.There is also a square node defined using the square style, which is not currently used in the diagram.The post join style is defined but commented out, and would add a red arrow connecting certain nodes in the chain.The diagram is commented out in places, indicating that some parts of the code are not currently being used.Finally, there is a commented out line of code that would add the word \"BLOCKCHAIN\" to the diagram at a specific location.","keywords#Keywords":"tikz, shadows, chains, scopes, decorations, shapes, node, distance, style, draw, top color, bottom color, font, minimum width, minimum height, drop shadow, label, decorate, thick, aspect, segment length, post join, line width, rounded corners, red, square, dna, amplitude, transparency group, opacity.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usetikzlibrary{shadows,chains,scopes}\n\\usetikzlibrary{decorations.pathmorphing, shapes}\n\\begin{document}\n\\begin{tikzpicture}\n[\nstart chain=going right,\nnode distance=5mm,\nevery on chain/.style={\nthick,\ndraw=black,\ntop color=white,\nbottom color=yellow!40,\nfont=\\sffamily\\small,\nminimum width=6mm,\nminimum height=6mm,\n%drop shadow,\n%label={below:block \\tikzchaincount},\n},\ndecoration={coil},\ndna/.style={decorate, thick, decoration={aspect=0, segment length=5cm}},\n%    post join/.style={\n%      -stealth,\n%      line width=1.5mm,\n%      red,\n%      rounded corners=1mm,\n%    },\nsquare/.style={thick,\ndraw=black,\ntop color=white,\nbottom color=black!10,\nfont=\\sffamily\\small,\nminimum width=12mm,\nminimum height=10mm,\ndrop shadow},\nevery label/.style={\nfont=\\sffamily\\scriptsize\n},\n]\n\\draw[dna, decoration={amplitude=.15cm}] (0,-0) -- (1.1,-0);\n\\draw[dna, decoration={amplitude=.35cm}] (1.15,0) -- (1.15,-1.1);\n\\draw[dna, decoration={amplitude=.35cm}] (1.15,-1.1) -- (0,-1.1);\n\\draw[dna, decoration={amplitude=.35cm}] (0,-1.1) -- (0,0);\n%  \\draw[dna, decoration={amplitude=.15cm}] (.1,-0) -- (1.5,-0);\n%\n%  \\draw[dna, decoration={amplitude=.15cm}] (2.25,-0) -- (3.65,-0);\n%   %\\draw[dna, decoration={amplitude=.35cm}] (.9,-0) -- (1.5,-0);\n%  \\draw[dna, decoration={amplitude=.15cm}] (1.85,-0) -- (3.25,-0);\n%\n%  \\draw[dna, decoration={amplitude=.15cm}] (.5,-2.5) -- (1.9,-2.5);\n%  %\\draw[dna, decoration={amplitude=.35cm}] (.9,-0) -- (1.5,-0);\n%  \\draw[dna, decoration={amplitude=.15cm}] (.1,-2.5) -- (1.5,-2.5);\n%\n%  \\draw[dna, decoration={amplitude=.15cm}] (2.25,-2.5) -- (3.65,-2.5);\n%   %\\draw[dna, decoration={amplitude=.35cm}] (.9,-0) -- (1.5,-0);\n%   \\draw[dna, decoration={amplitude=.15cm}] (1.85,-2.5) -- (3.25,-2.5);\n\n%% Path for dots\n\\node [on chain] {};\n\\node [on chain] {};\n\\node [on chain=going below] {};\n{[continue chain=going left]\n\\node [on chain] {};\n}\n%\\node[square,left of= chain-6] {G};\n{[transparency group, opacity=.25]\n%    \\draw [post join] (chain-1.south) |- (chain-3.center) |- (chain-6.center) -- (chain-6.north);\n}\n%\\path (chain-3.south) -- (chain-4.north) node [black, font=\\Huge, midway, sloped,xshift=0cm] {$\\dots$};\n\n%\\node[] at (1.75,-1.25) { \\textsc{BLOCKCHAIN}};\n\\end{tikzpicture}\n\\end{document}"}},"/ReportDiagrams/ENGR446/blockchainInSimpleApp":{"title":"Description","data":{"":"The code is a LaTeX document that generates a diagram using the TikZ package. The diagram illustrates a high-level view of how a transaction is processed on the Ethereum blockchain.The diagram is composed of several elements, including a user icon, an \"App\" module, a database icon, an \"Ethereum Node\" module, and a blockchain graphic. The user is shown as submitting a transaction to the App module, which communicates with the database to store and retrieve transactional data. The database communicates with the Ethereum Node to send updates and receive state updates. Finally, the Ethereum Node broadcasts the transaction to the blockchain.The code uses various TikZ styles, such as simple module and modulematrix, to define the appearance of the different elements. It also defines different arrow styles to indicate the direction and type of communication between the elements. Additionally, the code uses the graphicx package to include external graphics in the diagram, such as the user icon and the blockchain graphic. Finally, the code includes various labels and annotations to clarify the purpose of each element and the flow of the transaction.","keywords#Keywords":"tikz, documentclass, begin, end, tikzpicture, draw, node, rectangle, above, right, left, below, of, arrow, fill.","source-code#Source Code":"%\\documentclass[class=scrreprt,preview]{standalone}\n\\documentclass[class=scrreprt,pagesize=off]{standalone}\n\\usepackage{graphicx}\n\\usepackage[T1]{fontenc}\n\\usepackage{tikz}\n\\usetikzlibrary{calc,positioning,shapes.geometric}\n\\usetikzlibrary{positioning,matrix,shapes.arrows}\n\\usetikzlibrary{arrows}\n\\tikzset{\nmodulematrix/.style={draw=blue!50,rounded corners,matrix of nodes,row sep=1cm,column sep=2cm,nodes={draw=blue,align=center,font=\\sffamily},inner ysep=0.5cm},\nmodule/.style={rounded corners, align=center, font=\\sffamily, thick},\nsimple module/.style={module, top color=blue!10, bottom color=blue!35, draw=blue!75, text width=7.5mm, minimum height=5mm},\nmodule down arrow/.style={module arrow, shape border rotate=-90},\nmodule right arrow/.style={module arrow},\nmodule arrow/.style={single arrow, single arrow head extend=2.5mm, draw=gray!75, inner color=blue!45, outer color=gray!35, thick, shape border uses incircle, anchor=tail,minimum height=0.7cm},\n}\n\\tikzset{\ndatabase/.style={\ncylinder,\ncylinder uses custom fill,\ncylinder body fill=blue!45,\ncylinder end fill=blue!45,\nshape border rotate=90,\naspect=0.25,\ndraw\n}\n}\n\\begin{document}\n\\begin{tikzpicture}\n\\node[inner sep=0pt] (user) at (0,0)\n{\\includegraphics[width=.05\\textwidth]{person.pdf}};\n\\node [simple module,right = 0.5 cm of user] (app)  at (1.5,0) {App};\n\\node[database,right = 2cm of app] (db) {DB};\n\\matrix[modulematrix,right=3.2cm of db,label={[anchor=north]above:Ethereum Node}] (ethNode) {Sign Transactions \\\\ Unlocked Account \\\\};\n\\foreach \\n in {ethNode-1-1}\n\\node[module down arrow,below=1mm of \\n] {};\n\\node[inner sep=0pt, right = 3.5cm of ethNode] (bchain)\n{\\includegraphics[width=.45\\textwidth]{linkedBlocks.pdf}};\n\n% Arrows\n\\draw [->,very thick,bend right] (user)  -- node [text width=2.5cm,midway,above=3em,draw=blue,align=center,font=\\sffamily] {Transaction using Ethereum browser } (app);\n% app to node\n\\draw [->, very thick] (app) to [bend left](db);\n\\draw [->, very thick] (db) to [bend left](app);\n% db to node\n\\draw [->, very thick] (db) to [bend left=15](ethNode);\n\\draw [<-, very thick] (db) to [bend right=15](ethNode);\n% node to blockchain\n\\draw [->, very thick] (ethNode) to [bend left=8](bchain);\n\\draw [<->, very thick] (ethNode) to [bend right=8](bchain);\n% Paths, label about arrows\n\\path (app) -- node [very thick,text width=2.5cm,midway,above=3em,draw=blue,align=center,font=\\sffamily] {submit transactions to database}  (db);\n\\path (app) -- node [very thick,text width=2.5cm,midway,above=-6em,draw=blue,align=center,font=\\sffamily] {query database for information on transactions}  (db);\n% Paths, eth node\n\\path (db) -- node [very thick,text width=2.5cm,midway,above=3em,draw=blue,align=center,font=\\sffamily] {send updates to private ethereum node}  (ethNode);\n\\path (db) -- node [very thick,text width=2.5cm,midway,above=-6em,draw=blue,align=center,font=\\sffamily] {update \\\\ transactional data in DB}  (ethNode);\n% eth node to blockchain\n\\path (ethNode) -- node [very thick,text width=2.5cm,midway,above=3em,draw=blue,align=center,font=\\sffamily] {Broadcast Transactions to blockchain}  (bchain);\n\\path (ethNode) -- node [very thick,text width=2.5cm,midway,above=-6em,draw=blue,align=center,font=\\sffamily] {synchronize state with ethereum Node}  (bchain);\n% Perform transaction    % Footnotes\n%\t\\node[inner sep=0pt,outer sep=0pt, font=\\footnotesize,label={[yshift=-2ex]north west:{\\large Note:}},text width=1.5\\textwidth,anchor=north west] at ([yshift=-13,xshift=1cm]current bounding box.south west) (a)\n%\t\t{\\large\n%\t\tA blockchain is a digitized, decentralized, public ledger of all cryptocurrency transactions.\n%\t\tTo access websites on the Ethereum blockchain and use dapps a specialized browser is needed, or a plugin like metamask. \\\\\n%\t\t\\textbf{Signing Transactions}: with a private local ethereum node, use its JSON RPC interface from the application to \\\\ perform all your blockchain operations. In order to sign something, a mathematical function is used to \"sign\" a piece of document/data. A digital signature of a document/data is a number generated using a private key. The private key has a corresponding public key. \\\\};\n\\end{tikzpicture}\n\\end{document}"}},"/ReportDiagrams/ENGR446/dna":{"title":"Description","data":{"":"The code is a LaTeX document that creates a simple diagram of a DNA strand using the TikZ package. The document class is \"standalone\" with an optional parameter \"border=10pt\" which sets the amount of white space around the diagram.The TikZ package is loaded with the \"shapes\" and \"decorations.pathmorphing\" libraries. Inside the tikzpicture environment, there is a definition for the \"dna\" style which includes the \"decorate\" option for adding a decoration to the path, \"thick\" for setting the line thickness, and an additional decoration option that sets the aspect and the segment length of the decoration.The main part of the diagram is drawn using two separate lines, each with a different amplitude for the decoration, to create a double helix shape. The \"node\" command is used to add a label \"DNA\" to the left side of the diagram.","keywords#Keywords":"latex, tikz, decorations, dna, segment, length, amplitude, thickness, aspect.","source-code#Source Code":"\\documentclass[border=10pt]{standalone}\n\n\\usepackage{tikz}\n\\usetikzlibrary{decorations.pathmorphing, shapes}\n\\begin{document}\n\n\\begin{tikzpicture}[decoration={coil},\ndna/.style={decorate, thick, decoration={aspect=0, segment length=0.5cm}}]\n\n%DNA\n\\draw[dna, decoration={amplitude=.15cm}] (.1,0) -- (11,0);\n\\draw[dna, decoration={amplitude=-.15cm}] (0,0) -- (11,0);\n\\node at (0,0.5) {DNA};\n\n\\end{tikzpicture}\n\\end{document}"}},"/ReportDiagrams/ENGR446/linkedBlocks":{"title":"Description","data":{"":"The code is a LaTeX document that creates a simple blockchain diagram using TikZ. The diagram consists of a horizontal line at the top, which represents the blockchain itself. Four sets of double-stranded DNA are drawn on the line using the coil decoration, with two strands for each DNA. Then, a set of six blocks is drawn below the line, connected by horizontal chains. The blocks are labeled A to F, and the last three blocks (D to F) are connected by a dotted line with three dots. Finally, the text \"BLOCKCHAIN\" is written in uppercase letters at the center of the diagram.","keywords#Keywords":"tikz, lmodern, shadows, chains, scopes, decorations, shapes, dna, amplitude, segment, width, height, drop shadow, label, path, midway, sloped, blockchain.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usepackage{lmodern}\n\\usetikzlibrary{shadows,chains,scopes}\n\\usetikzlibrary{decorations.pathmorphing, shapes}\n\\begin{document}\n\\begin{tikzpicture}\n[\nstart chain=going right,\nnode distance=5mm,\nevery on chain/.style={\nthick,\ndraw=black,\ntop color=white,\nbottom color=blue!20,\nfont=\\sffamily\\small,\nminimum width=12mm,\nminimum height=10mm,\ndrop shadow,\n%label={below:block \\tikzchaincount},\n},\ndecoration={coil},\ndna/.style={decorate, thick, decoration={aspect=0, segment length=0.75cm}},\n%    post join/.style={\n%      -stealth,\n%      line width=1.5mm,\n%      red,\n%      rounded corners=1mm,\n%    },\nsquare/.style={thick,\ndraw=black,\ntop color=white,\nbottom color=black!10,\nfont=\\sffamily\\small,\nminimum width=12mm,\nminimum height=10mm,\ndrop shadow},\nevery label/.style={\nfont=\\sffamily\\scriptsize\n},\n]\n\\draw[dna, decoration={amplitude=.15cm}] (.5,-0) -- (1.9,-0);\n%\\draw[dna, decoration={amplitude=.35cm}] (.9,-0) -- (1.5,-0);\n\\draw[dna, decoration={amplitude=.15cm}] (.1,-0) -- (1.5,-0);\n\n\\draw[dna, decoration={amplitude=.15cm}] (2.25,-0) -- (3.65,-0);\n%\\draw[dna, decoration={amplitude=.35cm}] (.9,-0) -- (1.5,-0);\n\\draw[dna, decoration={amplitude=.15cm}] (1.85,-0) -- (3.25,-0);\n\n\\draw[dna, decoration={amplitude=.15cm}] (.5,-2.5) -- (1.9,-2.5);\n%\\draw[dna, decoration={amplitude=.35cm}] (.9,-0) -- (1.5,-0);\n\\draw[dna, decoration={amplitude=.15cm}] (.1,-2.5) -- (1.5,-2.5);\n\n\\draw[dna, decoration={amplitude=.15cm}] (2.25,-2.5) -- (3.65,-2.5);\n%\\draw[dna, decoration={amplitude=.35cm}] (.9,-0) -- (1.5,-0);\n\\draw[dna, decoration={amplitude=.15cm}] (1.85,-2.5) -- (3.25,-2.5);\n\n%% Path for dots\n\\node [on chain,label={above:block 1}] {A};\n\\node [on chain,label={above:block 2}] {B};\n\\node [on chain,label={above:block 3}] {C};\n\\node [on chain=going below,yshift=-1cm,label={below:block n--2}] {D};\n{[continue chain=going left]\n\\node [on chain,label={below:block n--1}] {E};\n\\node [on chain,label={below:block n}] {F};\n}\n%\\node[square,left of= chain-6] {G};\n{[transparency group, opacity=.25]\n%    \\draw [post join] (chain-1.south) |- (chain-3.center) |- (chain-6.center) -- (chain-6.north);\n}\n\\path (chain-3.south) -- (chain-4.north) node [black, font=\\Huge, midway, sloped,xshift=0cm] {$\\dots$};\n\n\\node[] at (1.75,-1.25) { \\textsc{BLOCKCHAIN}};\n\\end{tikzpicture}\n\\end{document}"}},"/ReportDiagrams/ENGR446/person":{"title":"Description","data":{"":"The code defines a TikZ picture environment that creates a customizable person figure. The figure is defined by a set of nodes with different shapes and sizes, and different colors can be specified for each part of the figure using the \"pobl\" and \"pobl gron\" styles. The figure can be rotated by specifying the \"rotate\" parameter in the \"person\" style. The \"fit\" style is used to group the individual nodes into a single entity that can be referenced as a whole. The code also includes some commented-out code that would allow the figure to be placed in a specific location and annotated with text. Finally, the code creates a TikZ picture that uses the \"person\" style to create a blue person figure with a size of 25pt and no rotation.","keywords#Keywords":"tikz, positioning, fit, node, style, pic, actions, minimum width, minimum height, fill, rounded corners, circle, anchor, rotate, fit, every pin, edge, arrow.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usetikzlibrary{positioning,fit}\n\\begin{document}\n\n\\tikzset{\npobl/.style={\ninner sep=0pt, outer sep=0pt, fill=#1,\n},\npobl gron/.style n args={2}{\npobl=#1, rounded corners=#2,\n},\npics/person/.style n args={3}{\ncode={\n\\node (-corff) [pobl=#1, minimum width=.25*#2, minimum height=.375*#2, rotate=#3, pic actions] {};\n\\node (-pen) [minimum width=.3*#2, circle, pobl=#1, outer sep=.01*#2, anchor=south, rotate=#3, pic actions] at (-corff.north) {};\n\\node (-coes dde) [pobl gron={#1}{1pt}, anchor=north west, minimum width=.12125*#2, minimum height=.25*#2, rotate=#3, pic actions] at (-corff.south west) {};\n\\node [pobl=#1, anchor=north, minimum width=.12125*#2, minimum height=.15*#2, rotate=#3, pic actions] at (-coes dde.north) {};\n\\node (-coes chwith) [pobl gron={#1}{1pt}, anchor=north east, minimum width=.12125*#2, minimum height=.25*#2, rotate=#3, pic actions] at (-corff.south east) {};\n\\node [pobl=#1, anchor=north, minimum width=.12125*#2, minimum height=.15*#2, rotate=#3, pic actions] at (-coes chwith.north) {};\n\\node (-braich dde) [pobl gron={#1}{.75pt}, minimum width=.075*#2, minimum height=.325*#2, outer sep=.0064*#2, anchor=north west, rotate=#3, pic actions] at (-corff.north east)  {};\n\\node [pobl=#1, minimum width=.05*#2, minimum height=.2*#2, outer sep=.0064*#2, anchor=north west, rotate=#3, pic actions] at (-corff.north east) {};\n\\node (-braich chwith) [pobl gron={#1}{.75pt}, minimum width=.075*#2, minimum height=.325*#2, outer sep=.0064*#2, anchor=north east, rotate=#3, pic actions] at (-corff.north west) {};\n\\node [pobl=#1, minimum width=.0375*#2, minimum height=.2*#2, outer sep=.0064*#2, anchor=north east, rotate=#3, pic actions] at (-corff.north west) {};\n\\node (-fit person) [fit={(-pen.north) (-braich dde.east) (-coes chwith.south) (-braich chwith.west)}] {};\n% \\node (-pwy) [below=25pt of -fit person, every pin] {\\tikzpictext};\n% This draws the arrow\n%\\draw [every pin edge] (-fit person) -- (-pwy);\n},\n},\n}\n\n\\begin{tikzpicture}\n%  [\n%    every pin edge/.append style={latex-, shorten <=-2.5pt},\n%  ]\n\n\\draw pic (person) [pic text={}] {person={blue}{25pt}{0}};\n\\end{tikzpicture}\n\n\\end{document}"}},"/ReportDiagrams/ENGR446/simpleTimeline":{"title":"Description","data":{"":"This is a LaTeX code for a timeline diagram created using the TikZ package. The document class is set to standalone with a font size of 6pt. The TikZ library \"snakes\" is also used in this code. The timeline is drawn using horizontal and vertical lines with nodes at different points in time. Each node represents a specific task or event and is labeled with its name and the date it occurred. The timeline spans from Nov 17 2017 to Dec 12 2017. The diagram also includes two nodes that are highlighted in bold and underlined. The nodes are labeled \"Submit Project Proposal\" and \"Finish Report\" respectively, suggesting their importance in the timeline. The figure environment is commented out, indicating that it is not being used in the current code.","keywords#Keywords":"tikz, snakes, fullpage, documentclass, usepackage, begin, draw, foreach, nodes, textwidth, align, center, above, below, resizebox, end, caption, centering, figure, label, linewidth.","source-code#Source Code":"\\documentclass[6pt]{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{snakes}\n\\usepackage{fullpage}\n\n\\begin{document}\n\n\n%\n%\\begin{figure}\n%\\caption{Time Line}\n%\\centering\n%\\resizebox{\\linewidth}{!}{% Resize table to fit within\n\n\\begin{tikzpicture}[]\n%draw horizontal line\n\\draw (0,0) -- (41/1.7,0);\n%draw vertical lines\n\\foreach \\x in {0, 8, 15, 22, 29, 36, 41}{\n\\draw (\\x/1.7,3pt) -- (\\x/1.7,-3pt);\n}\n%draw nodes\n\\draw (0,0) node[text width = 85pt,align=center,below=3pt] {\\textbf{Submit Project Proposal}} node[above=3pt] {Nov 17 2017};\n\\draw (8/1.7,0) node[below=3pt] {Find Game Engine} node[above=3pt] {Nov 20 2017};\n\\draw (15/1.7,0) node[text width = 100pt,align=center,below=3pt] {Create Server-Client Architecture} node[above=3pt] {Nov 25 2017};\n\\draw (22/1.7,0) node[text width = 100pt,align=center,below=3pt] {Implement Game Logic} node[above=3pt] {Nov 29 2017};\n\\draw (29/1.7,0) node[text width = 100pt,align=center,below=3pt] {Add Music and Effects} node[above=3pt] {Dec 1 2017};\n\\draw (36/1.7,0) node[text width = 100pt,align=center,below=3pt] {\\textbf{In Class Demo}} node[above=3pt] {Dec 2 2017};\n\\draw (41/1.7,0) node[below=3pt] {\\textbf{Finish Report}} node[above=3pt] {Dec 12 2017};\n\\end{tikzpicture}\n%}\n%\\label{fig:time_line}\n%\\end{figure}\n\\end{document}"}},"/ReportDiagrams/ENGR446/smartContractsExp":{"title":"Description","data":{"":"The diagram shows the process of how a self-executing code, known as a smart contract, works. The smart contract is represented by the rectangular box on the left, labeled \"SOURCE CODE\". It is a computer program that automatically facilitates, verifies, and enforces the negotiation or performance of a contract. The code is stored on a computer network, often a blockchain.The second box from the left, labeled \"TRANSPARENT\", represents the idea that the terms of the contract are publicly available on the ledger, which is a decentralized, digital database. This allows anyone to see the terms of the contract and ensures transparency.The third box from the left, labeled \"BLOCKCHAIN\", represents the underlying technology that enables smart contracts to be stored on a distributed and decentralized network. When an event triggers the smart contract, such as the redemption of a ticket, the execution of the contract is automated, eliminating the need for intermediaries.The fourth box from the left, labeled \"PAYMENT\", represents the final step in the process. After the contract is executed, the accounts of the parties involved are updated and the amounts are transferred automatically based on the terms of the contract. The box contains an image of money being transferred, indicating the financial aspect of the contract.Overall, the diagram shows the various components and steps involved in the process of how a smart contract works, from its code to its execution and payment.","keywords#Keywords":"tikzpicture, node, draw, rectangle, coordinate, edge, label, above, below, left, right.","source-code#Source Code":"\\documentclass[svgnames]{standalone}\n\\usepackage{lmodern}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\usepackage{xcolor}\n\\definecolor{lightgray}{rgb}{0.83, 0.83, 0.83}\n\n\\definecolor{lightblue}{rgb}{0.68, 0.85, 0.9}\n\n\\definecolor{brandeisblue}{rgb}{0.0, 0.44, 1.0}\n\n\\definecolor{darkpastelgreen}{rgb}{0.01, 0.75, 0.24}\n\n\\definecolor{electricgreen}{rgb}{0.0, 1.0, 0.0}\n\n\\usetikzlibrary{fadings,shapes.arrows,shadows,calc}\n\n\\tikzset{bubble/.style={rectangle, draw=gray,rounded corners,fill=#1,align = flush center,minimum height=1cm,minimum width=1.25cm}}\n\n\\tikzfading [name=arrowfading, top color=transparent!0, bottom color=transparent!95]\n\\tikzset{arrowfill/.style={top color=OrangeRed!20, bottom color=Red, general shadow={fill=black, shadow yshift=-0.8ex, path fading=arrowfading}}}\n\\tikzset{arrowstyle/.style={draw=FireBrick,arrowfill, single arrow,minimum height=#1, single arrow,\nsingle arrow head extend=.2cm,}}\n\n\\begin{document}\n\\begin{tikzpicture}[\nbigcircle/.style={ % style for the circles\ntext width=1.6cm, % diameter\nalign=center, % center align\nline width=0.5mm, % thickness of border\ndraw, % draw the border\ncircle, % shape\nfont=\\sffamily\\footnotesize % font of the year\n}\nnode distance=10mm and 16000mm % vertical and horizontal separation of nodes, when positioned with e.g. above=of othernode\n]\n\n\\node [rectangle,draw=lightgray!80, line width=2mm, inner sep=0pt,rounded corners,minimum width=1.6cm, minimum height=2.45cm,label={below:SOURCE CODE}] (contractCode)  {\\includegraphics[width=2.1cm]{if_source_moc_7003.png}};\n\n\\node [rectangle, line width = 0.01 mm, draw=black, below = 0.5cm of contractCode, minimum height=1.45cm,text width=3.85cm] () {self-executing code that faciliates agreement \\\\ between parties};\n\n\n\\node [rectangle,draw=lightblue!80, line width=2mm, inner sep=0pt,rounded corners,minimum width=2.2cm, minimum height=2.45cm,right= 1.75cm of contractCode,label={below:\\textsc{TRANSPARENT}}] (handshake) {\\includegraphics[width=2.1cm]{handshake.png}};\n\n\\node [rectangle, line width = 0.01 mm, draw=black, below = 0.5cm of handshake, minimum height=1.45cm,text width=3.85cm] () {terms of contract are available on  the public ledger};\n\n\\node [rectangle,draw=brandeisblue!80, line width=2mm, inner sep=0pt,rounded corners,minimum width=2.2cm, minimum height=2.45cm,right= 1.75cm of handshake,label={below:\\textsc{BLOCKCHAIN}}] (blockchain) {\\includegraphics[width=1.9cm]{blockchain.pdf}};\n\n\\node [rectangle, line width = 0.01 mm, draw=black, below = 0.5cm of blockchain, minimum height=1.45cm,text width=3.95cm] () {event triggers the \\\\ execution of the contract (redeeming a ticket)};\n\n\\node [rectangle,draw=darkpastelgreen!80, line width=2mm, inner sep=0pt,rounded corners,minimum width=2.2cm, minimum height=2.45cm,right= 1.75cm of blockchain,label={below:\\textsc{PAYMENT}}] (payment) {\\includegraphics[width=1.9cm]{transferMoney.png}};\n\n\\node [rectangle, line width = 0.01 mm, draw=black, below = 0.5cm of payment, minimum height=1.45cm,text width=3.85cm] () {accounts are updated, parties recieve amounts based on contracts};\n\n% Arrows\n\\node [arrowstyle=1.25cm] at ($(contractCode.east)!0.5!(handshake.west)$) {};\n\\node [arrowstyle=1.25cm] at ($(handshake.east)!0.5!(blockchain.west)$) {};\n\\node [arrowstyle=1.25cm] at ($(blockchain.east)!0.5!(payment.west)$) {};\n%\\node [arrowstyle=2.5cm,xshift=-0.1cm,yshift=-2.5cm] at ($(sa.south)!0.5!(lc.south)$) {git commit};\n%\\node [arrowstyle=3.5cm,xshift=-0.1cm,yshift=-3.5cm] at ($(lc.south)!0.5!(rc.south)$) {git push};\n\\end{tikzpicture}\n\\end{document}"}},"/ReportDiagrams/ENGR446/weeklyPlanLOL":{"title":"Description","data":{"":"This code generates a Gantt chart using the TikZ package in LaTeX. The chart represents a project plan with several tasks, each belonging to one of three phases: initial, planning, or content. The tasks are defined in a file named \"tasks.dat\" using the DataTool package, and include a name, position, size, and phase. The chart also includes labeled weeks along the x-axis.The code first loads the tasks data from the \"tasks.dat\" file using DataTool's \\DTLloaddb command, and then defines several TikZ styles to represent the different phases and to format the week labels. The tasks are then drawn as circles with a fill color corresponding to their phase and positioned according to their position value from the data file. The task names are written above each task as labels. Finally, a filled rectangle is drawn along the y-axis to create a bar that extends across the entire chart, and labeled weeks are added along the x-axis using the week style.","keywords#Keywords":"latex, diagram, tikz, datatool, filecontents, node, style, filldraw, rectangle, opacity, foreach, anchor, minimum size, draw, line width, font, text, scale.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{datatool}\n\\usepackage{tikz}\n\\usetikzlibrary{shadows}\n\\usetikzlibrary{positioning}\n%\\usetikzlibrary{calc,intersections}\n\n\\usepackage{filecontents}\n\\begin{filecontents*}{tasks.dat}\nphase,taskid,name,position,size\ninitial,initialmeeting,Initial Meeting,-2,4\nplanning,needsassesment,Needs Assesment,0,7\nplanning,research,Research,3,15\nplanning,siteoutline,Site Outline,5,7\ncontent,contentoutline,Content Outline,10,7\n\\end{filecontents*}\n\n\\DTLloaddb[noheader=false]{tasks}{tasks.dat}\n\n\\begin{document}\n\\begin{tikzpicture}[week/.style={font=\\bfseries, text=white},\ninitial/.style={fill=black!60,circle,opacity=0.5},\nplanning/.style={fill=red,circle,opacity=0.5},\ncontent/.style={fill=yellow,circle,opacity=0.5} ]\n\n%%%%% Tasks\n\\DTLforeach*{tasks}{\\phase=phase, \\taskid=taskid, \\name=name, \\position=position,\\size=size}{\\node(\\taskid)[\\phase, minimum size=\\size em] at (\\position, 0) {};\n\\draw (node cs:name=\\taskid, anchor=north) to ++(0,3) node[above, scale=\\size/6] {\\name};\n}\n\n\n\\filldraw[fill=black, draw=white,line width=1ex,opacity=0.75] (-3.5,-0.5) rectangle (54,0.5);\n\n%%%%% Weeks.\n\\node[week] at (0,0) {WEEK1};\n\\node[week] at (7,0) {WEEK2};\n\\node[week] at (14,0) {WEEK3};\n\\node[week] at (21,0) {WEEK4};\n\\node[week] at (28,0) {WEEK5};\n\\node[week] at (35,0) {WEEK6};\n\\node[week] at (42,0) {WEEK7};\n\\node[week] at (49,0) {WEEK8};\n\\end{tikzpicture}\n\\end{document}"}},"/ReportDiagrams/MISCELLANOUS/artificialNeuron":{"title":"Description","data":{"":"The code above produces a simple neural network diagram using TikZ. The diagram includes a single node representing a neuron, with its input and output labeled. The node is a circle split into two parts, with the top part containing the label \"Network input to neuron z\" and the bottom part containing the label \"Neuron Output o\". The node is rotated 90 degrees and labeled \"Neural Body\" using a label command.The diagram also includes three input nodes labeled \"Input 1\", \"Input 2\", and \"Input 3\", positioned to the left and above the neuron. The input nodes are connected to the neuron using arrows labeled with the corresponding weights \"W1\", \"W2\", and \"W3\".The TikZ library is used to define shapes, snakes, and shadows for the diagram, and to calculate node positions and create rounded corners for some of the connecting lines.","keywords#Keywords":"tikz, shapes, snakes, calc, geometric, symbols, fit, positioning, shadows, circle, split, node, draw, rotate, align, label, rounded, corners, right, left, above, below, input, output, arrow","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes,snakes}\n\\usetikzlibrary{calc, shapes.geometric,shapes.symbols,fit,positioning,shadows}\n\\begin{document}\n\\begin{tikzpicture}\n\\node [circle split,draw,rotate=90, align=center,label={[anchor=north, inner sep=0pt, yshift=1.2em] east:{\\selectfont Neural Body}}] (part){\\rotatebox{-90}{ \\parbox{1.5cm}{Network input to neuron z} } \\nodepart{lower} \\rotatebox{-90}{\\parbox{1.5cm}{Neuron Output o}} };\n\\draw[->,rounded corners=5pt] (part.south) -- ($(part.south)+(1.5,0)$);\n\\node[right = 3 em of part.south, label=Neuron Output] () {};\n\n\\node[above left = 0em and 10em of part.east] (t1) {$I_1-$Input 1};\n\\node[left = 4em of part.north] (t2) {$I_2-$Input 2};\n\\node[below left = 4em and 4em of part.north] (t3) {$I_3-$Input 3};\n\n\\draw[->] (t1) -- (part) node[midway,sloped,above] {$W_1$};\n\\draw[->] (t2) -- (part) node[midway,sloped,above] {$W_2$};\n\\draw[->] (t3) -- (part) node[midway,sloped,above] {$W_3$};\n\\end{tikzpicture}\n\\end{document}"}},"/ReportDiagrams/MISCELLANOUS/vuepress-arch":{"title":"Description","data":{"":"The code is a TikZ picture that generates a diagram consisting of several colored boxes and lines/arrows connecting them. The boxes represent different components in a web development project, such as the user interface and client addons. The boxes are styled with rounded corners and various colors, including purple, green, orange, and red. The lines/arrows connecting the boxes are also styled with various colors and line styles, including gray, dotted, and triangular arrowheads. The diagram is designed to resemble a web browser window, with a dashed red outline and a label that says \"Browser.\" There is also a second dashed red outline with the label \"Node.Js\" below the first outline, which contains a box labeled \"Build Process.\" Overall, the diagram is intended to represent the components and relationships between different parts of a web development project.","keywords#Keywords":"tikz, documentclass, usetikzlibrary, begin, document, draw, node, style, foreach, in, circle, fill, black, node distance.","source-code#Source Code":"\\documentclass[tikz,11pt]{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.geometric,shapes.symbols,fit,positioning,shadows}\n\\usetikzlibrary{arrows, arrows.meta, backgrounds, calc, shapes.misc, positioning}\n\\begin{document}\n% Finish off green box and then browser outline tmmr\n\\tikzset{\npurpleBox/.style n args={3}{\ntext centered, fill=purpleVue, minimum width = #1, minimum height= #2, text=white,\ntext width = #3,\nrounded corners\n},\nredBox/.style n args={3}{\ntext centered, fill=redVue, minimum width = #1, minimum height= #2, text=white,\ntext width = #3,\nrounded corners\n},\norangeBox/.style n args={3}{\nfill=orangeVue, minimum width = #1, minimum height= #2, text=white,\ntext centered,\nrounded corners\n},\ngreenCircle/.style n args={3}{\nfill=greenVue, minimum width = #1, minimum height= #2, text=white,\ntext centered,\ncircle\n},\nlineCustom/.style={\nvery thick,\ncolor=gray,\ndotted,\nshorten <=2pt,\nshorten >=2pt\n},\narrowCustom/.style={\n>=triangle 60,\n->,\nvery thick,\ncolor=gray,\ndotted\n},\n}\n\\definecolor{purpleVue}{rgb}{0.6,0.5,0.9}\n\n\\definecolor{orangeVue}{rgb}{0.975,0.7,0.2}\n\n\\definecolor{greenVue}{rgb}{0.15,0.65,0.4}\n\\definecolor{redVue}{rgb}{0.95,0.45,0.55}\n% Hardcoded positioning\n\\begin{tikzpicture}[background rectangle/.style={fill=black}, show background rectangle]\n\n% Browser Box that wraps around UI and Client Addons box\n\\node[rounded corners, draw,\ndouble=redVue, %% here\ndouble distance =1pt, minimum height= 9.5em, minimum width=27em, dashed]\n(Browser) {};\n\n% Label for browser\n\\node[rounded corners,\ntext=redVue] at ([xshift=-3em, yshift=4em]\n% See https://tex.stackexchange.com/questions/27843/level-of-boldness-changeable\nBrowser.west) (BrowserLabel) {\\fontseries{bx}\\selectfont Browser};\n% Green box in upper left\n\\node[rounded corners, fill=greenVue, text=white, minimum height= 7.5em, minimum width=10em, text centered, right = 0.75em of Browser.west] (UI) {User Interface};\n\n% Purple box in upper right\n\\node[rounded corners, %fill=black,\ntext depth = 5em, minimum width=15em,\ndraw,\ndouble=purpleVue, %% here\ndouble distance =1pt,    %% here\n%font=\\Large,\nminimum height= 7.5em,\ntext=purpleVue, right = 0.5 em of UI]  (CA){Client Addons};\n% Hardcoded nodes\n\\node[purpleBox={6em}{1.5em}{6em}] at ([xshift=-3.5em] CA.center){Injection};\n\\node[purpleBox={6em}{1.5em}{6em}] at ([xshift=3.5em] CA.center) (Mix) {Mixins};\n\\node[purpleBox={6em}{1.5em}{6em}] at ([xshift=-3.5em, yshift=-2em] CA.center) (comp) {Components};\n\\node[purpleBox={6em}{1.5em}{6em}] at ([xshift=3.5em, yshift=-2em] CA.center) (routes) {Routes};\n\n% Mix is used as an example node to use offset\n% \\node[rounded corners, fill=greenVue, text=white, minimum height= 7.5em, minimum width=10em, text centered, right = 0.75em of Mix] (UI2) {User Interface};\n\n\n% Node Js Box\n\\node[rounded corners, draw,\ndouble=redVue, %% here\ndouble distance =1pt, minimum height= 45em, minimum width=27em, dashed, below = 5 em of Browser]\n(Nodejs) {};\n% Label for browser\n\\node[rounded corners,\ntext=redVue] at ([yshift=-14em]\nBrowserLabel.south){\\fontseries{bx}\\selectfont Node.Js};\n\n\\node[rounded corners, %fill=black,\ntext depth = 5em, minimum width=15em,\ndraw,\ndouble=redVue, %% here\ndouble distance =1pt,    %% here\n%font=\\Large,\nminimum height= 10.5em,\nminimum width= 25em,\ntext=redVue] at ([yshift=-6.5em]\nNodejs.north) (BProcess){};\n\n% Label Node, seperate node is used\n% to have control over node positioning\n\\node[text=redVue] at ([yshift=-1.5em]\nBProcess.north) {\\fontseries{bx}\\selectfont Build Process};\n\n\\node[purpleBox={5.75em}{7em}{5em}] at ([xshift=3.25em, yshift=-0.5em] BProcess.west) (devStatic){DEV/Static Server};\n\n\n%% WEBPACK CODE\n% Sample label label={[anchor=north, draw=red, inner sep=0pt, yshift=-0.2em]north:Webpack}\n\\node[orangeBox={5.75em}{7em}{5em}, label={[anchor=north, inner sep=0pt, yshift=-0.6em, text=white]north:Webpack}] at ([xshift=6.15em] devStatic.center) (webpack) {};\n\n\\node[purpleBox={4.5em}{3em}{4.5em}] at ([yshift=-0.5em] webpack.center) (webpackPlugin) {Webpack Plugin};\n\n% MARKDOWN IT BOX\n\\node[orangeBox={6.75em}{7em}{5em},label={[anchor=north, inner sep=0pt, yshift=-0.6em, text=white]north:markdown-it}] at ([xshift=6.75em] webpack.center) (markdownIt) {};\n\n\\node[purpleBox={5.25em}{3em}{5.25em}] at ([yshift=-0.5em] markdownIt.center) (webpackPlugin) {markdown-it plugin};\n\n\\node[purpleBox={3.75em}{7em}{3.75em}] at ([xshift=2.7em] markdownIt.east) (dynMod){Dynamic Modules};\n\n\n% USER PROJECT\n\\node[rounded corners, %fill=black,\ntext depth = 5em,\ndraw,\ndouble=redVue, %% here\ndouble distance =1pt,    %% here\n%font=\\Large,\nminimum height= 13em,\nminimum width= 15em,\ntext=redVue, label={[anchor=north, inner sep=0pt, yshift=-1.2em, text=redVue] north:{\\fontseries{bx}\\selectfont User Project}}] at ([xshift=-2cm, yshift=-10.5em]\nBProcess.south) (UP){};\n\n% Configuration Files and Plugin box\n\\node[purpleBox={8em}{3.75em}{8em}] at ([xshift=5em, yshift=2em] UP.west) (confFiles){Configuration Files};\n\n\\node[greenCircle={2em}{2em}{2em}] at ([xshift=3em] confFiles.east) (CFP1){Plugin};\n\n\\node[redBox={8em}{3.75em}{8em}] at ([yshift=-3em] confFiles.south) (markFiles){Markdown Files};\n\n\\node[greenCircle={2em}{2em}{2em}] at ([xshift=3em] markFiles.east) (CFP2){Plugin};\n\n% THEME BLOCK\n\\node[rounded corners, %fill=black,\ntext depth = 5em,\ndraw,\ndouble=redVue, %% here\ndouble distance =1pt,    %% here\n%font=\\Large,\nminimum height= 13em,\nminimum width= 15em,\ntext=redVue, label={[anchor=north, inner sep=0pt, yshift=-1.2em, text=redVue] north:{\\fontseries{bx}\\selectfont Theme}}] at ([yshift=-7.5em]\nUP.south) (theme){};\n\n% Configuration Files and Plugin box\n\\node[purpleBox={8.75em}{3.75em}{7em}] at ([xshift=5em, yshift=2em] theme.west) (tconfFiles){Configuration Files};\n\n\\node[greenCircle={2em}{2em}{2em}] at ([xshift=3em] tconfFiles.east) (tCFP1){Plugin};\n\n% Figure out non hacky way\n\\node[redBox={8.75em}{3.75em}{7em}] at ([yshift=-3em] tconfFiles.south) (tLayoutComp){Layout Components};\n\n\\node[greenCircle={2em}{2em}{2em}] at ([xshift=3em] tLayoutComp.east) (tCFP2){Plugin};\n\n% Plugin API\n\\node[purpleBox={5em}{25em}{5em}] at ([xshift=9.5em, yshift=-17.5em]\nBProcess.south) (pluginAPI){Plugin API};\n\n\n% Paths\n% \\path[color=white] (pluginAPI) -- (dynMod);\n% Make path style\n% latex'-\n% \\draw[->,>=latex,very thick, color=gray,dotted] (pluginAPI) -- (pluginAPI |- dynMod.south);\n\\draw[lineCustom] (pluginAPI) -- (pluginAPI |- dynMod.south);\n\n\\draw[lineCustom] (CFP1) -- (CFP1 -| pluginAPI.west);\n\n\\draw[lineCustom] (CFP2) -- (CFP2 -| pluginAPI.west);\n\n\\draw[lineCustom] (tCFP1) -- (tCFP1 -| pluginAPI.west);\n\n\\draw[lineCustom] (tCFP2) -- (tCFP2 -| pluginAPI.west);\n\n\\draw[arrowCustom] (devStatic) -- (devStatic |- UI.south) node [midway, left, yshift=2em] {Assets};\n\n% Super advanced arrow\n\n\\draw[lineCustom, rounded corners=5pt] (dynMod) |- ($(comp.south) + (0, -4.5em)$) node[above] {MetaData};\n\n\\draw[arrowCustom, rounded corners=5pt] ($(comp.south) + (0, -4.5em)$) -| ( $(UI.south) + (3em, 0)$);\n\n\\draw[lineCustom, rounded corners=5pt] (devStatic.south) |- ($0.5*(dynMod.south)+0.5*(pluginAPI.north)$);\n\n\\draw[lineCustom, rounded corners=5pt] ($0.5*(dynMod.south)+0.5*(pluginAPI.north)$) -| ($(routes.south) + (3.35em, -4.5em)$);\n\n\\draw[lineCustom, rounded corners=5pt] ($(routes.south) + (3.35em, -4.85em)$) |- ($(routes.south) + (0, -3.23em)$);\n\n\\draw[arrowCustom, rounded corners=5pt] ($(routes.south) + (0.25em, -3.23em)$) -| (CA.south);\n\n% Webpack to end line below\n\\draw[lineCustom, rounded corners=5pt] (webpack.south) |- ($0.5*(dynMod.south)+0.5*(pluginAPI.north)$);\n\n\\draw[lineCustom, rounded corners=5pt] (markdownIt.south) |- ($0.5*(dynMod.south)+0.5*(pluginAPI.north)$);\n\\end{tikzpicture}\n\\end{document}"}},"/ReportDiagrams/MISCELLANOUS/cloud-arch":{"title":"Description","data":{"":"The code is a LaTeX TikZ picture that illustrates the architecture of an online banking system. The picture consists of two rectangular boxes representing two different software applications, an online banking software, and a bank teller software. The picture also includes several other components, such as a user profile app, a user surface, an authentication subsystem, and two apps. The different components are represented by different shapes, colors, and styles, and they are connected with arrows and lines that indicate the flow of data and operations between them.The code defines different styles for the various components using the TikZ library, such as \"purpleBox,\" \"redBox,\" \"orangeBox,\" \"greenCircle,\" and \"lineCustom,\" each with different characteristics such as fill color, minimum width, minimum height, text color, and text width. The code then positions these components in the picture using relative positioning with respect to other components. The nodes representing the different components are connected with arrows and lines that represent the flow of data and operations between them. The picture also includes labels that provide information about the different components.","keywords#Keywords":"tikz, node, draw, rectangle, below, right, of, above, text, fill, black, align.","source-code#Source Code":"\\documentclass[tikz,11pt]{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.geometric,shapes.symbols,fit,positioning,shadows}\n\\usetikzlibrary{arrows, arrows.meta, backgrounds, calc, shapes.misc, positioning}\n\\begin{document}\n\\tikzset{\npurpleBox/.style n args={3}{\ntext centered, fill=purpleVue, minimum width = #1, minimum height= #2, text=white,\ntext width = #3,\nrounded corners\n},\nredBox/.style n args={3}{\ntext centered, fill=redVue, minimum width = #1, minimum height= #2, text=white,\ntext width = #3,\nrounded corners\n},\norangeBox/.style n args={3}{\nfill=orangeVue, minimum width = #1, minimum height= #2, text=white,\ntext centered,\nrounded corners\n},\ngreenCircle/.style n args={3}{\nfill=greenVue, minimum width = #1, minimum height= #2, text=white,\ntext centered,\ncircle\n},\nlineCustom/.style={\nvery thick,\ncolor=gray,\ndotted,\nshorten <=2pt,\nshorten >=2pt\n},\narrowCustom/.style={\n>=triangle 60,\n->,\nvery thick,\ncolor=gray,\ndotted\n},\ndatabase/.style={\ncylinder,\ncylinder uses custom fill,\ncylinder body fill=greenVue,\ncylinder end fill=greenVue,\nshape border rotate=90,\naspect=0.25,\ndraw\n}\n}\n\\definecolor{purpleVue}{rgb}{0.6,0.5,0.9}\n\n\\definecolor{orangeVue}{rgb}{0.975,0.7,0.2}\n\n\\definecolor{greenVue}{rgb}{0.15,0.65,0.4}\n\\definecolor{redVue}{rgb}{0.95,0.45,0.55}\n\\definecolor{blueBox}{rgb}{0.3,0.65,0.85}\n% Hardcoded positioning\n\\begin{tikzpicture}\n\\node[rectangle, draw, minimum width= 10cm, minimum height=10cm, label={[anchor=north, inner sep=0pt, yshift=-0.6em, text=black]north:Online banking software}]\n(online) {};\n\\node[right= 2cm of online, draw, rectangle, minimum width= 10cm, minimum height=10cm,label={[anchor=north, inner sep=0pt, yshift=-0.6em, text=black]north:Bank   teller software}]\n(soft) {};\n\n\\node[rectangle, draw,thin, fill=blueBox, text width=2cm, align=center,\ntext=white,minimum width=2.2cm,copy shadow={shadow xshift=1ex, shadow yshift=-1.5ex},minimum height=1.5cm]\nat ([xshift=0em, yshift=-4em] online.north) (upa){User Profile App};\n\n\n\\node[draw, left=5cm of upa]\n(label) {Customer};\n\\node[rectangle, draw,thin, fill=blueBox, text width=2cm, align=center,\ntext=white,minimum width=2.2cm,copy shadow={shadow xshift=1ex, shadow yshift=-1.5ex},minimum height=1.5cm]\nat ([xshift=5em, yshift=-7.5em] upa.center) (us){User Surface};\n\n\\node[database, draw,thin, text width=2cm, align=center,\ntext=white,minimum width=2.2cm,minimum height=1.5cm]\nat ([yshift=-7.5em] us.center) (db){Database};\n\n\\node[rounded corners, draw, fill=blueBox,\nminimum width=2.2cm,minimum height=5cm, text width=2cm, align=center,\ndouble=black, %% here\ndouble distance =1pt, dashed, below left = -4em and 5 em of us] (as){Auth subsystem};\n\n\\node[database, draw,thin, text width=2cm, align=center,\ntext=white,minimum width=2.2cm,minimum height=1.5cm]\nat ([yshift=-7.5em] us.center) (db){Database};\n\n\\node[rectangle, draw,thin, fill=blueBox, text width=2cm, align=center,\ntext=white,minimum width=2.2cm,copy shadow={shadow xshift=1ex, shadow yshift=-1.5ex},minimum height=1.5cm]\nat ([xshift=-3em, yshift=-4em] soft.north) (a1){App};\n\n\\node[rectangle, draw,thin, fill=blueBox, text width=2cm, align=center,\ntext=white,minimum width=2.2cm,copy shadow={shadow xshift=1ex, shadow yshift=-1.5ex},minimum height=1.5cm]\nat ([xshift=10em] a1.center) (a2){App};\n\n\\node[rectangle, draw,thin, fill=blueBox, text width=2cm, align=center,\ntext=white,minimum width=2.2cm,copy shadow={shadow xshift=1ex, shadow yshift=-1.5ex},minimum height=1.5cm]\nat ([yshift=-8em] a1.center) (ps1){Promotion Service};\n\n\\node[rectangle, draw,thin, fill=blueBox, text width=2cm, align=center,\ntext=white,minimum width=2.2cm,copy shadow={shadow xshift=1ex, shadow yshift=-1.5ex},minimum height=1.5cm]\nat ([yshift=-8em] a2.center) (ps2){Promotion Service};\n\n\\node[database, draw,thin, text width=2cm, align=center,\ntext=white,minimum width=2.2cm,minimum height=1.5cm]\nat ([yshift=-7.5em] ps2.center) (bp){Branch Promotions};\n\n\\node[database, draw,thin, text width=2cm, align=center,\ntext=white,minimum width=2.2cm,minimum height=1.5cm]\nat ([yshift=-7.5em] ps1.center) (cust){Customers};\n\n\\node[draw, above=1cm of soft]\n(bt) {Bank Teller};\n\n\\draw [->] (upa) edge (us) (upa) edge (as) (us) edge (db);\n\n\\draw [->] (a1) edge (a2) (ps1) edge (cust) (a1) edge (ps1) (a2) edge (ps2) (ps2) edge (bp);\n\\end{tikzpicture}\n\n\\end{document}"}},"/ReportDiagrams/bar-chart":{"title":"Description","data":{"":"This code is a LaTeX document that defines a table containing a list of functions and their CPU utilization. The document uses several LaTeX packages, including \"fontenc\", \"lmodern\", \"url\", \"xcolor\", \"tikz\", \"booktabs\", \"array\", and \"siunitx\".The table has three columns: the first column contains a small triangle symbol, the second column contains a numerical value indicating the CPU utilization, and the third column contains the name of the function. The numerical values in the second column are represented graphically as colored boxes of varying sizes, indicating the level of CPU utilization.The code defines several custom commands and macros to generate the table, including a macro to create the colored boxes, a command to generate a legend for the colored boxes, and a command to generate the small triangle symbol. The table includes horizontal rules at the top, middle, and bottom, as well as vertical rules between the columns. The font used in the document is sans-serif.","keywords#Keywords":"latex, tikz, graph, bar chart, colors, legend, table, tabular, multirow, siunitx, chart, function.","source-code#Source Code":"\\documentclass{article}\n\n\\usepackage[T1]{fontenc}\n\\usepackage{lmodern}\n\n\\usepackage{url}\n\\DeclareUrlCommand\\function{\\urlstyle{sf}}\n\n\\usepackage{xcolor}\n\\usepackage{tikz}\n\\usepackage{booktabs}\n\\usepackage{array}\n\\usepackage{multirow}\n\\usepackage{siunitx}\n\n\\definecolor{chart Idle}{gray}{.6}\n\\definecolor{chart Poor}{RGB}{242,28,28}\n\\definecolor{chart Ok}{RGB}{248,172,37}\n\\definecolor{chart Ideal}{RGB}{1,151,0}\n\\definecolor{chart Over}{RGB}{0,125,234}\n\n\\newdimen\\tempdim\n\\newcommand*{\\Triangle}{%\n\\settoheight{\\tempdim}{L}%\n\\tikz[x=\\tempdim, y=\\tempdim]\\draw(0,0) -- (.5,.5) -- (0,1) --cycle;%\n}\n\\newcommand*{\\ChartLegend}[1]{%\n\\ifdim\\lastkern=1sp %\n\\hspace{1em}%\n\\fi\n\\ChartBox{0.75em}{#1}%\n\\,#1%\n\\kern-1sp\\kern1sp\\ignorespaces\n}\n\\newcommand*{\\ChartBox}[2]{%\n\\begingroup\n\\settoheight{\\tempdim}{L}%\n\\edef\\tempheight{\\the\\tempdim}%\n\\settodepth{\\tempdim}{g}%\n\\edef\\tempdepth{\\the\\tempdim}%\n\\tikz[\nbaseline=0pt,\ninner sep=0pt,\n]\n\\node[\nfill={chart #2},\ndraw,\nrounded corners=1pt,\nanchor=base,\n]{%\n\\vphantom{g\\\"A}%\n\\pgfmathsetlength{\\tempdim}{#1}%\n\\kern\\tempdim\\relax\n};%\n\\endgroup\n}\n\n\\begin{document}\n\\sffamily\n\\renewcommand*{\\arraystretch}{1.2}\n\\newcommand*{\\chart}[2]{%\n#1 & \\ChartBox{55mm/3.420*#1}{#2}%\n}\n\\noindent\n\\begin{tabular}{>{\\Triangle\\,}lS[mode=text,detect-family,table-format=1.3]@{\\,s~}l}\n\\toprule\n\\multicolumn{1}{c}{%\n\\multirow{2}{*}{Source Function\\,/\\,Function\\,/\\,Call Stack}%\n}&\n\\multicolumn{2}{c}{CPU Time by Utilization}\\\\\n\\multicolumn{1}{c}{}& \\multicolumn{2}{l}{%\n\\ChartLegend{Idle}\n\\ChartLegend{Poor}\n\\ChartLegend{Ok}\n\\ChartLegend{Ideal}\n\\ChartLegend{Over}\n}\\\\\n\\midrule\n\\relax[Loop at line 151 in \\function{divergence_part_1}] &\n\\chart{3.420}{Poor} \\\\\n\\relax[Loop at line 1071 in \\function{radiation_fvm}] &\n\\chart{3.270}{Poor} \\\\\n\\function{scalar_face_value} &\n\\chart{3.090}{Poor} \\\\\n\\relax[Loop at line 102 in \\function{get_match}] &\n\\chart{1.700}{Poor} \\\\\n\\function{get_sensible_enthalpy_diff} &\n\\chart{1.250}{Poor} \\\\\n\\function{compare_vec3} &\n\\chart{1.140}{Poor} \\\\\n\\bottomrule\n\\end{tabular}\n\\end{document}"}},"/ReportDiagrams/flow-chart":{"title":"Description","data":{"":"The code is a LaTeX document that includes the TikZ package to create a flowchart using various styles for the nodes. The flowchart depicts a process for reading a video, extracting its frames, applying a watermark to all frames, saving the watermarked video, and stopping the process. The nodes in the flowchart are defined by different styles, including startstop, process, io, and decision. The flowchart also includes arrows to connect the nodes and labels to describe the process at each step. The code uses various TikZ libraries, such as arrows.meta, calc, chains, quotes, positioning, and shapes.geometric.","keywords#Keywords":"latex, tikz, diagram, arrows, calc, chains, quotes, positioning, shapes, nodes, styles.","source-code#Source Code":"\\documentclass{standalone}\n\n\\usepackage{tikz}\n\\usetikzlibrary{arrows.meta,\ncalc, chains,\nquotes,\npositioning,\nshapes.geometric}\n\n\\begin{document}\n\n\\begin{tikzpicture}[\nnode distance = 8mm and 16mm,\nstart chain = A going below,\nbase/.style = {draw, minimum width=32mm, minimum height=8mm,\nalign=center, on chain=A},\nstartstop/.style = {base, rectangle, rounded corners, fill=red!30},\nprocess/.style = {base, rectangle, fill=orange!30},\nio/.style = {base, trapezium,\ntrapezium left angle=70, trapezium right angle=110,\nfill=blue!30},\ndecision/.style = {base, diamond, fill=green!30},\nevery edge quotes/.style = {auto=right}]\n]\n\\node [startstop]       {Read Video};            % <-- A-1\n\\node [process]         {Extract Frames};\n\\node [io]              {Read Frame};\n\\node [decision]        {Completed?};\n\\node [process]         {Save Watermarked Video};\n\\node [process]         {Stop};             % <-- A-6\n%\n\\node [process,                             % <-- A-7\nright=of A-4]    {Get Next Frame};\n%%\n\\draw [arrows=-Stealth]\n(A-1) edge[\"read data\"]          (A-2)\n(A-2) edge[\"get watermark\"]    (A-3)\n(A-3) edge[text width=3cm,\"apply watermark to all frames \"]       (A-4)\n(A-4) edge[\"yes\"]            (A-5)\n(A-5) edge[\"exit\"]          (A-6)\n(A-4) edge[\"no\"']          (A-7)       % <-- by ' is swapped label position\n(A-7) |- ($(A-2.south east)!0.5!(A-3.north east)$)\n-| ([xshift=7mm] A-3.north)\n;\n\\end{tikzpicture}\n\\end{document}"}},"/ReportDiagrams/fontawesomediagram":{"title":"Description","data":{"":"The code is a TikZ picture which creates a diagram of a recycling process. The diagram consists of three icons (a mobile phone, a camera, and a laptop) arranged horizontally and labeled below them with their corresponding names. Below the icons is a series of bins, labeled with different types of waste. An arrow connects the laptop icon to each of the bins, indicating the category of waste that is sent to each bin. The bottom bin is labeled \"Landfill\". Below the bins is a label \"Categories\". Arrows also connect the bins to each other, and a bent arrow connects the cardboard bin to the mobile phone icon, indicating that the result is sent to the phone after the cardboard has been scanned.","keywords#Keywords":"latex, tikz, chains, positioning, fontawesome, nodes, edges, categories, mobile, camera, laptop, waste, recycle, landfill.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{calc, chains,positioning}\n\\usepackage{fontawesome}\n\n\\begin{document}\n\n\\begin{tikzpicture}[\nstart chain = going right,\nbin/.style={\n%draw,\n% text width=6mm,\ninner sep=5pt,\n%fill=blue!20,\non chain\n}\n]\n% Move label below icon\n\\node[] (mob) {\\LARGE{\\faMobilePhone}};\n\\node[right = 2cm of mob] (cam) {\\LARGE{\\faCamera}};\n\\node[right = 2cm of cam] (lap) {\\LARGE \\faLaptop};\n\\node[below = 0.1 cm of mob] (moblabel) {\\tiny{Phone}};\n\\node[below = 0.1 cm of cam] (camlabel) {\\tiny{Camera}};\n\\node[below = 0.1 cm of lap] (laplabel) {\\tiny{Server}};\n\n\\node[bin,below left=of lap] (c1) {\\tiny{Cardboard}};\n\\node[bin] (c2) {\\tiny{Food}};\n\\node[bin] (c3) {\\tiny{Glass}};\n\\node[bin] (c4) {\\tiny{$\\cdots$}};\n\\node[bin] (c5) {\\tiny{Landfill}};\n\n\\path[every node/.style={font=\\sffamily\\small}]\n(laplabel) edge node[right] {} (c1)\n(laplabel) edge node[left] {} (c2)\n(laplabel) edge node[] {} (c3)\n(laplabel) edge node[] {} (c5);\n\n\\node[below = 0.1 cm of c3] (label) {\\tiny{Categories}};\n\n% \\draw[thick] (c3) -> (moblabel);\n\n\\path[->]          (c1)  edge   [bend left=50, below]   node {\\tiny{send result to phone}} (moblabel);\n\\path[->]          (mob)  edge   [below]   node {\\tiny{take picture}} (cam);\n\\path[->]          (cam)  edge [below]   node {\\tiny{send picture}} (lap);\n\\draw[thick,dotted]     ($(c1.north west)+(0.025,-0.125)$) rectangle ($(c5.north east)+(0.25,-0.35)$);\n\\end{tikzpicture}\n\n\\end{document}"}},"/":{"title":"Introduction","data":{"":"This site hosts all the various diagrams I have made or referenced in latex. Most of them were created by me.In this site I have added a variety of components such as OverleafDeployButton, which allows you to deploy the tex file to overleaf. This is done by using the texFilePath prop.If you have any interest in collboration, contact me at davidli012345@gmail.com","donate#Donate":"If you would like to motivate me to spend more time improving open source projects please consider donating."}},"/miscallenous/assetClasses":{"title":"Description","data":{"":"This is a LaTeX code that generates a standalone flowchart diagram using the TikZ package. The diagram depicts a market sector classification, with six nodes representing different sectors of the market. The sectors are Healthcare, Services, Technology, Utilities, Transportation, and Financial, and they are represented by rectangular blocks with rounded corners. The blocks are connected by lines that indicate the relationship between the sectors, with arrows pointing from one block to another. The diagram also has labels for the different sectors of the market, which are positioned outside the blocks. The code uses various styles and properties to define the appearance of the nodes, lines, and labels, such as node distance, text width, fill color, line style, and font size.","keywords#Keywords":"latex, tikz, shapes, arrows, positioning, nodes, rectangle, draw, style, fill, line, east, west, out, in, north, south, above, below, label, text, width, align, center, Conglomerates, Basic Materials, Capital Goods, Cyclical Goods, Non-Cyclical Goods, Energy, Financial, HealthCare, Services, Technology, Transportation, Utilities.","source-code#Source Code":"% Inspired by Learn Algorithmic Trading by Sebastien Donadio Packt on page 10\n\\documentclass{standalone}\n\\usepackage{tikz}\n\\usepackage{xcolor}\n\\usetikzlibrary{shapes, arrows.meta, positioning}\n\n\\begin{document}\n\\pagestyle{empty}\n\n\\begin{tikzpicture}[\nnode distance=2em and 2em,\nblock/.style={rectangle, draw,\ntext width=6.5em, text centered, rounded corners, minimum height=4em},\nline/.style={draw, -latex},\n]\n\n\\node [block, fill=gray!15!red!15] (hc) {HealthCare};\n\\node [block, fill=gray!45, below right= of hc] (serv) {Services};\n\\node [block, fill=blue!45, below = of serv] (tech) {Technology};\n\\node [block,fill=blue!15, below left= of tech] (util) {Utilities};\n\\node [block,fill=brown!45, above left= of util] (trans) {Transportation};\n\\node [block, fill=red!45, above = of trans] (fin) {Financial};\n% Connections\n\\path [line] (hc.east) to[out=0, in=90] (serv.north);\n\\path [line] (serv.south) -- (tech);\n\\path [line] (tech.south) to[out=-90, in=0] (util.east);\n\\path [line] (util.west) to[out=180, in=-90] (trans.south);\n\\path [line] (trans.north) -- (fin);\n\\path [line] (fin.north) to[out=90, in=180] (hc.west);\n\n% Market Sectors label\n\\node [draw=none, below = 5em of hc, text width = 2cm, align = center] (label) {\\LARGE Market \\\\[1mm] Sector};\n\n\\node [above left = -3em and 3em of util] () {Energy};\n\\node [above right = -3em and 3em of util] () {Cyclical Goods};\n\\node [above right = -1em and 0.25em of tech, text width = 3.5em] () {Non-Cyclical Goods};\n\\node [above right = -1.25em and 0.25em of hc, text width = 7em] () {Basic Materials};\n\\node [above left = -1.25em and 0.25em of hc, text width = 7em] () {Capital Goods};\n\\node [above left = 0.25em and -3em of trans] () {Conglomerates};\n\\end{tikzpicture}\n\\end{document}"}},"/software/datawarehousediagram":{"title":"Description","data":{"":"The code is a LaTeX document that generates a diagram using the TikZ package. The diagram represents a data warehousing system, with several data sources represented as cylinders labeled as \"DB1\", \"DB2\", \"DB3\", etc., and a data warehouse represented as a rounded rectangle labeled as \"Data warehouse\". The data sources are connected to the data warehouse using arrows, and there are three circles labeled as \"c1\", \"c2\", and \"c3\" that are also connected to the data warehouse using arrows. The diagram also contains two smaller rectangles labeled as \"Data loaders\" and \"DBMS\" that are connected to each other using a very thick arrow. The diagram uses various TikZ options such as node distance, cylinder, text opacity, rounded corners, aspect, minimum height, minimum width, fill, and draw to create the various shapes and styles of the elements in the diagram.","keywords#Keywords":"latex, tikz, shapes, positioning, database, cylinder, arrow, node, label, theme, box, circle, draw, fill.","source-code#Source Code":"\\documentclass[11pt]{standalone}\n\\usepackage[T1]{fontenc}\n\\usepackage{tikz}\n\\usetikzlibrary{calc,positioning,shapes.geometric}\n\n\\begin{document}\n\\begin{tikzpicture}[\n>=stealth,\nnode distance=1.5cm,\ndatabase/.style={\ncylinder,\ntext opacity=0,\ncylinder uses custom fill,\ncylinder body fill=blue!10,\ncylinder end fill=white!50,\nshape border rotate=90,\naspect=0.25,\ndraw\n}\n]\n\\node[database, label={[anchor=north, inner sep=0pt, yshift=-0.6em, text=black]south:data source 1}] (db1) at (0,0) {DB1};\n\\node[database, label={[anchor=north, inner sep=0pt, yshift=-0.6em, text=black]south:data source 2}, below of=db1] (db2) {DB2};\n\\node[below of=db2] (dbDots) {$\\vdots$};\n\\node[database, label={[anchor=north, inner sep=0pt, yshift=-0.6em, text=black]south:data source n}, below of=dbDots] (db3) {DB3};\n\n% THEME BLOCK\n\\node[rounded corners, %fill=black,\ntext depth = 5em,\ndraw,\n% double distance =1pt,    %% here\n%font=\\Large,\nminimum height= 13em,\nminimum width= 20em,\nfill=blue!10,\nlabel={[anchor=north, inner sep=0pt, yshift=-1em] south:{Data warehouse}}] at ([xshift=25.5em, yshift=-2em]\ndb2.west) (dw){};\n\n% Configuration Files and Plugin box\n\\node[rounded corners, %fill=black,\ndraw,\ntext centered,\ntext width = 0.20\\textwidth,\nfill=white,\nminimum height= 9em,\nminimum width= 2em] at ([xshift=5em] dw.west) (dl){Data loaders};\n\\node[rounded corners, %fill=black,\ndraw,\ntext centered,\ntext width = 0.20\\textwidth,\nfill=white,\nminimum height= 9em,\nminimum width= 2em,\nlabel={[anchor=north, inner sep=0pt, yshift=-0.2em] south:{DBMS}}] at ([xshift=-5em] dw.east) (dbms){};\n\\node[database] at ([yshift=-2.5em] dbms.north) {din1};\n\\node[database] at ([yshift= 2em] dbms.south) {din2};\n\n\n\\node[circle, fill=blue!10, draw, minimum width=2em] at ([xshift=10em] dw.east) (c2) {};\n\\node[circle, fill=blue!10, draw, minimum width=2em] at ([yshift=4.5em, xshift=10em] dw.east) (c1) {};\n\\node[circle, fill=blue!10, draw, minimum width=2em] at ([yshift=-4.5em, xshift=10em] dw.east) (c3) {};\n\n% arrows\n\n\\draw (db1.east) -- (dw);\n\\draw (db2.east) -- (dw);\n\\draw (db3.east) -- (dw);\n\\draw[->] (dw) -> (c1);\n\\draw[->] (dw) -> (c2);\n\\draw[->] (dw) -> (c3);\n\n% Extra Thick arrow\n\\draw[->, very thick] (dl) -> (dbms);\n\\end{tikzpicture}\n\\end{document}"}},"/software/dblayers":{"title":"Description","data":{"":"This is a LaTeX code that creates a simple diagram using the TikZ package. The diagram consists of a rectangle with a label at the top indicating \"View Level\". Inside the rectangle, there are four smaller rectangles labeled as \"view 1\", \"view 2\", \"view 4\", and an ellipsis symbol in between \"view 2\" and \"view 4\". Below the main rectangle, there are two smaller rectangles labeled as \"Logical level\" and \"Physical level\" with an arrow connecting them. The rectangles and the arrow are styled with different colors and dimensions using various TikZ options such as \"draw\", \"fill\", \"text width\", \"minimum height\", \"minimum width\", and \"align\". The code starts with the document class \"standalone\" and imports necessary packages such as TikZ, color, and inputenc.","keywords#Keywords":"tikz, shapes, positioning, node, rectangle, fill, text width, minimum height, minimum width, align, label, anchor, inner sep, xshift, yshift, draw, cdots, east, west, south, logical level, physical level, color, utf8, inputenc.","source-code#Source Code":"\\documentclass[tikz]{standalone}\n\\usepackage{tikz}\n\\usepackage{color}\n\\usepackage[utf8]{inputenc}\n\\usetikzlibrary{shapes, positioning}\n\\definecolor{aliceblue}{rgb}{0.94, 0.97, 1.0}\n\\definecolor{aqua}{rgb}{0.0, 1.0, 1.0}\n\\begin{document}\n\\begin{tikzpicture}\n\\node[draw, rectangle,fill=aqua!50!blue!10\n, text width=4cm,minimum height=3cm,minimum width=20cm, align=center, label={[anchor=north, inner sep=0pt, yshift=-0.6em, text=black]north:\\LARGE{View Level}}] at\n(0,0) (rect) {};\n\n\\node[draw, rectangle,fill=aqua!50!blue!40\n, text width=1cm,minimum height=1cm,minimum width=2cm, align=center] at\n([xshift=10em, yshift=-1em]rect.west) (v1) {view 1};\n\\node[draw, rectangle,fill=aqua!50!blue!40\n, text width=1cm,minimum height=1cm,minimum width=2cm, align=center] at\n([xshift=8em]v1.east) (v2) {view 2};\n\\node[draw=none, align=center] at\n([xshift=6em]v2.east) (v3) {$\\cdots$};\n\\node[draw, rectangle,fill=aqua!50!blue!40\n, text width=1cm,minimum height=1cm,minimum width=2cm, align=center] at\n([xshift=8em]v3.east) (v4) {view 4};\n\n\\node[draw, rectangle,fill=aqua!50!blue!40\n, text width=1cm,minimum height=1cm,minimum width=2cm, align=center] at\n([yshift=-5em]rect.south) (ll) {Logical level};\n\\node[draw, rectangle,fill=aqua!50!blue!40\n, text width=2cm,minimum height=1cm,minimum width=2cm, align=center] at\n([yshift=-5em]ll.south) (pl) {Physical level};\n\n\\draw (rect) -- (ll);\n\\draw (ll) -- (pl);\n\\end{tikzpicture}\n\n\\end{document}"}},"/software/designProcess":{"title":"Description","data":{"":"The given code is a LaTeX document that generates a flowchart using the TikZ package.The document begins with the preamble, which sets the document class to standalone and loads the necessary TikZ libraries. The TikZ styles for each level of the flowchart are also defined here.Next, the TikZ environment is created, and the every node style is set to a blue circle with a drop shadow. The no shadows style is defined to remove the shadow from labels in the flowchart.The flowchart is then created using the node and child commands to define the nodes and their relationships. The label command is used to add labels to each node, and the xshift command is used to adjust the horizontal position of some of the nodes.Finally, a hard-coded line is drawn using the draw command, and a label is added using the node command.","keywords#Keywords":"tikz, trees, shadows, node, style, label, child, draw, dash dot.","source-code#Source Code":"\\documentclass[tikz,border=0]{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{trees}\n\\usetikzlibrary{shadows}\n\\begin{document}\n\\begin{tikzpicture}[level distance=1.5cm,\nlevel 1/.style={sibling distance=3.5cm},\nlevel 2/.style={sibling distance=1cm}]\n\\tikzstyle{every node}=[circle, draw, fill=blue!30]\n% Preamble:\n\\tikzset{no shadows/.style={general shadow/.style=}}\nevery label/.append style = {\nlabel distance=1em,\nfont=\\scriptsize,\nevery shadow/.style={opacity=0}, % <- add this\n}\n\\node (Root) [circular drop shadow, label={[label distance=0.5cm]0:Frame Opportunities}] {}\nchild {\nnode[circular drop shadow, label={[left, label distance=-1cm]0:Form Insights}] {}\nchild {\nnode[circular drop shadow, xshift=-4.5em, label={[left, label distance=-1cm]0:Make Observations}] {}\nchild { node[circular drop shadow, xshift=-4.5em, label={[left, label distance=-1cm]0:Define the problem}] {} }\n}\n}\nchild {\nnode[circular drop shadow, label={[right, label distance=1cm]0:Generate Ideas}] {}\nchild {\nnode[circular drop shadow, xshift=4.5em, label={[right, label distance=1cm]0:Refine Solutions}] {}\nchild { node[circular drop shadow, xshift=4.5em, label={[right, label distance=1cm]0:Try Prototypes}] {} }\n}\n};\n\n% Harcoded line\n\\draw [blue!30,dash dot] (-8,-1) -- (8,-1);\n\\node[draw=none, fill=none, text width= 2cm, align=center] at (-7.25, -1) {\\textbf{Opportunity Problem}};\n\\end{tikzpicture}\n\\end{document}"}},"/software/flutterWidgets":{"title":"Description","data":{"":"The code is a TikZ picture illustrating the widget lifecycles in Flutter, a popular framework for building mobile and web applications. The picture shows a rectangular box representing the widget content area, with a gray rectangle at the top labeled \"Widget Lifecycles\" representing the header.The picture also includes three rectangles labeled \"Stateless widget\", \"Stateful widget\", and \"State object\" representing different types of widgets in Flutter. Arrows with text labels indicate the order and flow of method calls and updates between the different widgets.The lifecycles of a stateless widget are illustrated with arrows pointing from the \"Stateless widget\" rectangle to a rectangle labeled \"Constructor\", then to a rectangle labeled \"build()\". A dashed arrow indicates that the build() method may be called multiple times when the widget is rebuilt due to a change in configuration.The lifecycles of a stateful widget are illustrated with arrows pointing from the \"Stateful widget\" rectangle to a rectangle labeled \"Constructor\", then to a rectangle labeled \"createState()\", which creates a State object. An arrow labeled \"Produces a State Object\" points from this rectangle to another rectangle labeled \"State object\". From there, arrows point to rectangles labeled \"initState()\", \"build()\", \"widgetDidUpdate()\", and \"setState()\", which represent the methods called during different stages of the widget's lifecycle.Finally, the picture shows rectangles labeled \"Mounted\" and \"Dirty State\", representing the state of the widget during different stages of its lifecycle. Arrows indicate the flow of the widget through these stages.","keywords#Keywords":"tikzpicture, node, draw, rectangle, coordinate, above, right, edge, ->, dashed.","source-code#Source Code":"% Flutter in Action Eric Windmill\n% Litereally the first page\n\\documentclass{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes,positioning}\n\\usetikzlibrary{arrows.meta}\n\\begin{document}\n\\tikzset{\ngraynode/.style={shape=rectangle, fill=gray!25},\nbluenode/.style={shape=rectangle, draw=blue, line width=2},\ngreennode/.style={shape=rectangle, draw=green, line width=2},\nrednode/.style={shape=rectangle, draw=red, line width=2},\nlineCustom/.style={\nthick,\ncolor=black,\n-latex\n},\n}\n\\begin{tikzpicture}\n% Widget Content Bar\n\\node[rectangle,draw,minimum width=5in, minimum height=5.5in, fill=none] (content) {};\n% Header bar\n\\node[graynode,draw, minimum width=5in, anchor=east] (header) at (content.north east) {\\small{ \\textbf{Widget Lifecycles}}};\n\n% Stateless widgets\n\\node[rectangle, fill=gray!25, draw, text=black, text centered, below right = 3em and 0.75em of content.north west] (stateless) {\\textbf{Stateless widget}};\n\\node[rectangle, fill=gray!15, draw, text=black, text centered, below = 2em of stateless.south] (statelessCon) {Constructor};\n\\node[rectangle, fill=gray!50, draw, text=black, text centered, below = 2em of statelessCon.south] (statelessBuild) { build() };\n\\node[draw=none, fill=none, below left = 1em and 2em of statelessBuild] (buildLoop) {};\n\\node[below right=-1.5em and 4em of buildLoop, text width=8em] {Rebuilds when configuration changes};\n% Stateless arrows\n\\draw[lineCustom] (stateless.south) -- (statelessCon);\n\\draw[lineCustom] (statelessCon) -- (statelessBuild);\n\\draw[lineCustom, -] (statelessBuild.south) |- (buildLoop.west);\n\\draw[lineCustom] (buildLoop.west) |- (statelessBuild.west);\n\n% Stateful widgets before state\n\\node[rectangle, fill=gray!25, draw, text=black, text centered, below left = 3em and 8em of content.north east] (stateful) {\\textbf{Stateful widget}};\n\\node[rectangle, fill=gray!15, draw, text=black, text centered, below = 2em of stateful.south] (statefulCon) {Constructor};\n\\node[rectangle, fill=gray!50, draw, text=black, text centered, below = 2em of statefulCon.south] (createState) { createState() };\n\\node[draw=none, fill=none, below left = 1em and 2em of createState] (createStateLoop) {};\n% Stateless arrows\n\\draw[lineCustom] (stateful.south) -- (statefulCon);\n\\draw[lineCustom] (statefulCon) -- (createState);\n\\draw[lineCustom, -] (createState.south) |- (createStateLoop.west);\n\\draw[lineCustom] (createStateLoop.west) |- (createState.west);\n\n% Stateful widgets after states\n\\node[above right=-0.75em and 5.25em of createStateLoop, text width=12em] (stateObjText){Produces a State Object};\n\n% Arrow\n\\draw[lineCustom] (createState.east) to [bend left] (stateObjText);\n\n% State Object\n\\node[draw, rectangle, below = 5em of createState, fill=gray!20] (stateObj){\\textbf{State object}};\n\n\\draw[lineCustom] (stateObjText.south) to [bend right] (stateObj);\n\n% Mounted\n\\node[draw=gray, rectangle, below = 1em of stateObj, fill=gray!20] (mounted){(Mounted)};\n\n% initState()\n\\node[draw=gray, rectangle, below = 1.75em of mounted, fill=gray!50] (initState){initState()};\n\n% mounted -> initState()\n\\draw[lineCustom] (mounted.south) to  (initState);\n\n% Dirty State\n\\node[draw=gray, rectangle, below = 1.75em of initState, fill=gray!20] (dirtyState){(Dirty State)};\n\n\\draw[lineCustom] (initState.south) to  (dirtyState);\n\n\\node[draw=gray, rectangle, below = 2em of dirtyState, fill=gray!50] (statefulBuild){build()};\n\\node[draw=gray, rectangle, left = 2em of statefulBuild, fill=gray!50] (widgetDidUpdate){widgetDidUpdate()};\n\\node[draw=gray, rectangle, right = 2em of statefulBuild, fill=gray!50] (setState){setState()};\n\n\\node[below=4em of widgetDidUpdate, text width=9em, align=center] (configuration){When it recieves new configuration};\n\n% CleanState\n\\node[draw=gray, rectangle, below = 2em of statefulBuild, fill=gray!20] (cleanState){(Clean State)};\n\n\\node[below=4em of setState, text width=6em, align=center] (internalState){When internal State Changes};\n\n% dispose\n\\node[draw=gray, rectangle, below = 2em of cleanState, fill=gray!50] (dispose){dispose()};\n\n% Down Arrows\n\\draw[lineCustom] (dirtyState.south) to (statefulBuild);\n\\draw[lineCustom] (statefulBuild.south) to (cleanState);\n\\draw[lineCustom] (cleanState.south) to  (dispose);\n\n% Right Angle Arrows\n\\draw[lineCustom] (cleanState.west) -| (widgetDidUpdate);\n\\draw[lineCustom] (widgetDidUpdate.north) |- (dirtyState.west);\n\n\\draw[lineCustom] (dirtyState.east) -| (setState.north);\n\\draw[lineCustom] (setState.south) |- (cleanState.east);\n\\end{tikzpicture}\n\\end{document}"}},"/software/ldischemeDiagram":{"title":"Description","data":{"":"The code is a LaTeX document that defines a standalone diagram using the TikZ package. The diagram depicts a pension scheme and the various entities involved in managing it.The document begins with the necessary packages and settings to create the diagram, including the input encoding, TikZ library, and color definitions.The diagram is defined using a tikzpicture environment with a set node distance of 5cm. Several styles are defined using tikzset, such as connector for the arrow styles used to connect the nodes, rectangle connector for the arrows that connect nodes with a right angle, and straight connector for the arrows that connect nodes directly.The diagram includes several nodes, each with a specific shape, draw style, fill color, and text content. The nodes represent the company, defined benefit pension scheme, asset manager, and liability-driven investment fund. The arrows connect these nodes to show the flow of money and management.Finally, the diagram includes four additional nodes that represent various investment options available to the fund: equities, bonds, gilts, and derivatives. These nodes are connected to the fund node using different arrow styles, and a text node is included to explain the investment options.","keywords#Keywords":"latex, tikz, diagram, nodes, styles, positioning, shapes, arrows, fill, text, width, alignment.","source-code#Source Code":"\\documentclass{standalone}\n\\usepackage[utf8]{inputenc}\n\\usepackage{tikz}\n\\usetikzlibrary{positioning}\n\\usepackage{xcolor}\n\\begin{document}\n\\begin{tikzpicture}[node distance=5cm]\n\n\\tikzset{\nconnector/.style={\n-latex,\nfont=\\scriptsize\n},\nconnectorReverse/.style={\n-stealth,\nfont=\\scriptsize\n},\nrectangle connector/.style={\nconnector,\nto path={(\\tikztostart) -- ++(#1,0pt) \\tikztonodes |- (\\tikztotarget) },\npos=0.5\n},\nrectangle connector/.default=-2cm,\nrectangleReverse connector/.style={\nconnector,\nto path={(\\tikztotarget) -- ++(#1,0pt) \\tikztonodes |- (\\tikztostart) },\npos=0.75\n},\nrectangleReverse  connector/.default=-2cm,\nstraight connector/.style={\nconnector,\nto path=--(\\tikztotarget) \\tikztonodes\n}\n}\n\\node (company) [shape=rectangle, draw, fill=blue!5, align=left, text width = 7cm,  inner sep=1cm] {\n\\textbf{Company} \\\\\nEmployers promise to pay their staff a pension\n};\n\\node (pension) [shape=rectangle, draw, fill=blue!5, below of=company, text width = 7cm, align=left, inner sep=1cm] {\n\\textbf{Defined Benefit Pension Scheme} \\\\\nA workplace pension based  on salary and term of employment, rather than how much is paid in. These schemes are increasing rare.\n};\n\\node (asset) [shape=rectangle, draw, fill=blue!5, below of=pension,  text width = 7cm, align=left, inner sep=1cm] { \\textbf{Asset Manager} \\\\\nAppointed by pension scheme trustees to manage assets on their behalf} ;\n\\node (fund) [shape=rectangle, draw, fill=blue!5, below of=asset,  text width = 7cm, align=left, inner sep=1cm] { \\textbf{Liability Driven Investment Fund} \\\\\nA type of fund used by the asset manager to invest the pension scheme's money.\n};\n\\draw [->] (company) -- (pension);\n\\draw [->] (pension) -- (asset);\n\\draw [->] (asset) -- (fund);\n\n\n\\node (equities) [shape=rectangle, draw, fill=red!5, below left=3cm and 2cm of fund, text width = 2cm, align=left, inner sep=1cm] { \\textbf{Equities}};\n\\node (bonds) [shape=rectangle, draw, fill=red!5, right of=equities, text width = 2cm, align=left, inner sep=1cm] { \\textbf{Bonds}};\n\\node (gilts) [shape=rectangle, draw, fill=red!5, right of=bonds, text width = 2cm, align=left, inner sep=1cm] { \\textbf{Gilts}};\n\\node (derivatives) [shape=rectangle, draw, fill=red!5, below, right of=gilts, text width = 2cm, align=left, inner sep=1cm] { \\textbf{Derivatives}};\n\n\\node [above left=2cm and -5.5cm of equities, align=left, text width=2cm] {Funds can invest in a variety of assets};\n\\node (fwaypoint)[draw=none, below =1.75cm of fund] {};\n% \\draw [-] (fund.south) to (fwaypoint);\n\\draw [-stealth, rectangleReverse connector=2cm] (fund.west) to (equities.north west);\n\\draw [-stealth, rectangleReverse connector=2cm] (fund.east) to (derivatives.north west);\n\\draw [->] (bonds.north) to (fund);\n\\draw [->] (gilts.north) to (fund);\n\\end{tikzpicture}\n\n\\end{document}"}},"/software/ml4t":{"title":"Description","data":{"":"The code is a LaTeX document that generates a diagram using the TikZ package. The diagram represents a high-level overview of the process of building a machine learning model for algorithmic trading.The diagram consists of several rectangular nodes and signal nodes connected by arrows, representing the flow of information and processes. The rectangular nodes represent the data sources, which are labeled as \"Market\", \"Fundamental\", and \"Alternative\". These nodes are connected to a series of signal nodes representing \"Point in Time Adjustments\" and \"Factor & Feature Engineering\". The final signal node at the bottom of the diagram represents the \"Machine Learning Models\" and is connected to another signal node representing the \"Predictions\". The final rectangular node at the end of the diagram represents the \"Monitoring & Evaluation\" of the model.The code defines several custom styles for the TikZ nodes, including a database style for the data source nodes and a signal style for the signal nodes. The code also defines several small tables, which are saved in boxes and used in the data source nodes to represent position information and order information.","keywords#Keywords":"tikzpicture, node, draw, rectangle, fill, text, above, right, below, left.","source-code#Source Code":"% Author David Li\n% Inspired by Machine Learning for Algorithmic Trading Second Edition\n% see https://github.com/PacktPublishing/Machine-Learning-for-Algorithmic-Trading-Second-Edition\n% References Shapes from\n% http://tug.ctan.org/info/visualtikz/VisualTikZ.pdf\n\\documentclass[tikz,border=3.14mm]{standalone}\n\\usepackage{enumitem}\n\\usetikzlibrary{shapes.geometric}\n\\usetikzlibrary{shapes.symbols}\n\\tikzset{database/.style={cylinder,aspect=0.5,draw,rotate=90,path picture={\n\\draw (path picture bounding box.160) to[out=180,in=180] (path picture bounding\nbox.20);\n\\draw (path picture bounding box.200) to[out=180,in=180] (path picture bounding\nbox.340);\n}}}\n\n\\newsavebox{\\tptable}\n\\sbox{\\tptable}{\\tiny{\n\\begin{tabular}{c c }\n\\textbf{Symbol} & \\textbf{Position} \\\\\nAMZN & 3800 \\\\\nV & 2300 \\\\\nUBER & -500\n\\end{tabular}\n}}\n\n\\newsavebox{\\lptable}\n\\sbox{\\lptable}{\\tiny{\n\\begin{tabular}{c c }\n\\textbf{Symbol} & \\textbf{Position} \\\\\nAMZN & 5000 \\\\\nV & 1500 \\\\\nUBER & -350\n\\end{tabular}\n}}\n\n\\newsavebox{\\orderstable}\n\\sbox{\\orderstable}{\\tiny{\n\\begin{tabular}{p{0.5cm}p{0.65cm}p{0.45cm}p{0.5cm}}\n\\textbf{Symbol} & \\textbf{Position} & \\textbf{Shares} & {Limit} \\\\\nAMZN & BUY & 200 & 123.45 \\\\\nV & SELL & 50 & 321.23 \\\\\nUBER & SELL & 250 & 145.83\n\\end{tabular}\n}}\n\n\\begin{document}\n\\setlist[itemize]{noitemsep, topsep=2pt}\n\\begin{tikzpicture}\n% data sources\n\\node[rectangle, rounded corners=0.25em,draw=none, minimum width=12em, minimum height=4em, fill=blue!10] (data_source) {};\n\\node[database, label={[label distance=0cm]180:\\tiny{Market}}] (market) at ([xshift=1.5em] data_source.west) {};\n\\node[database, label={[label distance=0cm]180:\\tiny{Fundamental}}] (fundamental) at ([xshift=-0.5em] data_source) {};\n\\node[database, label={[label distance=0cm]180:\\tiny{Alternative}}] (alternative) at ([xshift=-2.0em] data_source.east) {};\n\n\\node[\nsignal,signal to = east,\nfill=blue!10,draw=black,\nsignal pointer angle=155,\ntext width=5em,align=center,\nfont=\\color{black}\\bfseries,\nminimum height=4em\n] (pit_adj) at ([xshift=4.0em] data_source.east) {\\tiny{Point in Time Adjustments}};\n\n\\node[\nsignal,signal to = east,\nfill=blue!10,draw=black,\nsignal pointer angle=155,\ntext width=6em,align=center,\nfont=\\color{black}\\bfseries,\nminimum height=4em\n] (ffe) at ([xshift=4.0em] pit_adj.east) {\\tiny{Factor \\& Feature Engineering}};\n\n\\node[\nsignal,signal to = south,\nsignal pointer angle=155,\nfill=red!10,draw=black,\ntext width=7em,align=center,\nfont=\\color{black},\nminimum height=2em\n] (mml) at ([xshift=5.0em, yshift=-1.75em] ffe.north east) {\n\\tiny{\\textbf{Machine Learning Models}}\n\\tiny{{\\begin{itemize}[leftmargin=*]\n\\item Normal Design\n\\item Parameter Tuning\n\\item Cross-Validation\n\\end{itemize}}}};\n\n\\node[\nsignal,signal to = south,\nsignal pointer angle=155,\nfill=red!10,draw=black,\ntext width=7em,align=center,\nfont=\\color{black},\nminimum height=2em\n] (pred) at ([ yshift=-2.5em] mml.south) {\n\\tiny{\\textbf{Predictions}}\n\\tiny{{\\begin{itemize}[leftmargin=*]\n\\item Risk Factors\n\\item Prices and Returns\n\\item Covariance\n\\end{itemize}}}};\n\n\\node[\nsignal,signal to = east,\nsignal pointer angle=155,\nfill=blue!10,draw=black,\ntext width=11em,align=center,\nfont=\\color{black},\nminimum height=2em,\nanchor=east\n] (monitor_and_eval) at ([xshift=-0.5em] pred.west) {\n\\tiny{\\textbf{Monitoring \\& Evaluation}}\n\\tiny{{\\begin{itemize}[]\n\\item Risk Management\n\\item Performance\n\\item Attribution\n\\end{itemize}}}};\n\n\\node[\nsignal,signal to = east,\nsignal pointer angle=155,\nfill=blue!10,draw=black,\ntext width=7em,align=center,\nfont=\\color{black},\nminimum height=2em,\nanchor=east\n] (live_portfolio) at ([xshift=-0.5em] monitor_and_eval.west) {\n\\tiny{\\textbf{Live Portfolio}}\n{\\usebox{\\lptable}}\n};\n\n\\node[\nsignal,signal to = east,\nsignal pointer angle=155,\nfill=red!10,draw=black,\ntext width=4em,align=center,\nfont=\\color{black},\nminimum height=2em,\nanchor=east\n] (execution) at ([xshift=-0.5em] live_portfolio.west) {\n\\tiny{\\textbf{Execution}}\n\\tiny{Global Markets}\n};\n\n\\node[\nsignal,signal to = north,\nsignal pointer angle=155,\nfill=red!10!blue!10,draw=black,\ntext width=10.75em,align=center,\nfont=\\color{black},\nminimum height=2em,\nanchor=north\n] (orders) at ([xshift=2em, yshift=-1.5em] execution.south) {\n\\tiny{\\textbf{Orders}}\n\\usebox{\\orderstable}\n};\n\\node[\nsignal,signal to = west,\nsignal pointer angle=155,\nfill=red!10,draw=black,\ntext width=7em,align=center,\nfont=\\color{black},\nminimum height=4em,\nanchor=west\n] (target_portfolio) at ([xshift=0.75em, yshift=0.15em] orders.east) {\n\\tiny{\\textbf{Target Portfolio}}\n\\usebox{\\tptable}\n};\n\\node[\nsignal,signal to = west,\nsignal pointer angle=155,\nfill=red!10,draw=black,\ntext width=6.75em,align=center,\nfont=\\color{black},\nminimum height=4em,\nanchor=west\n] (portfolio_optimizer) at ([xshift=0.75em, yshift=-0em] target_portfolio.east) {\n\\tiny{\\textbf{Portfolio Optimizer}}\n\\tiny{{\\begin{itemize}[leftmargin=*]\n\\item Asset Allocation\n\\item Sectors Weight\n\\item Risk-Return Profile\n\\end{itemize}}}\n};\n\\node[\nsignal,signal to = west,\nsignal pointer angle=155,\nfill=red!10,draw=black,\ntext width=5em,align=center,\nfont=\\color{black},\nminimum height=4em,\nanchor=west\n] (asset_selection) at ([xshift=0.75em, yshift=-0em] portfolio_optimizer.east) {\n\\tiny{\\textbf{Asset Selection}}\n\\tiny{{\\begin{itemize}[leftmargin=*]\n\\item Rule-based\n\\item Model-based\n\\item Bet Sizing\n\\end{itemize}}}\n};\n\\end{tikzpicture}\n\\end{document}"}},"/software/stockArchitecture":{"title":"Description","data":{"":"The code is a LaTeX document that defines a stock software architecture using TikZ package to create a graphical representation of the architecture. The architecture is composed of three cloud services: Cloud Run, Google Cloud C#, and App Engine, each represented by a rectangular box with rounded corners and a different color.Inside each cloud service box, there are several colored boxes that represent different functionalities or features of that cloud service. The colors of the inner boxes vary depending on the cloud service they belong to. The boxes are arranged in a hierarchical manner, with the section headers on top and the specific features or functionalities at the bottom.The code defines various styles for the elements in the architecture, such as sectionHeader, sectionContainer, and coloredBox. It also defines the colors used in the architecture, such as cloudrunMain, cloudrunSecond, appengineMain, appengineSecond, and reportsMain.The code uses various TikZ commands to position the elements in the architecture relative to each other, such as above, below, left, and right. It also uses the calc library to perform mathematical operations on coordinates. Finally, the code uses the backgrounds library to add a background color to the architecture.","keywords#Keywords":"tikz, node, foreach, draw, rectangle, above, right, of, fill, black, path, style.","source-code#Source Code":"% Author: David Li\n% Basic Stock Software Architecture\n\\documentclass[tikz, margin=3mm]{standalone}\n\\usetikzlibrary{shapes.multipart}\n\\usetikzlibrary{matrix, fit}\n\\usetikzlibrary{backgrounds}\n\\usetikzlibrary{positioning, calc}\n% Define Colors\n\\definecolor{cloudrunMain}{rgb}{0.3, 0.0, 0.9}\n\\definecolor{cloudrunSecond}{rgb}{0.3, 0.0, 0.6}\n\\definecolor{lightblue}{rgb}{0.68, 0.85, 0.9}\n\\definecolor{dodgerblue}{rgb}{0.12, 0.56, 1.0}\n\\definecolor{appengineMain}{rgb}{1.85,0.45,0.68}\n\\definecolor{appengineSecond}{rgb}{0.72, 0.1, 0.26}\n\\definecolor{reportsMain}{rgb}{0.1, 0.5, 0.2}\n\\definecolor{reportsSecond}{rgb}{0.4, 0.8, 0.3}\n\\usetikzlibrary{fadings, shapes.arrows, shadows,calc}\n\n\\tikzset{\nsectionHeader/.style args = {#1}{\ndraw=none,\nrectangle split, rectangle split horizontal, rectangle split parts=2,\nrectangle split draw splits=false, % figure this out\n%text width=3cm,\nalign=center, thick,\nrectangle split part fill={#1,none}% end of the append after command\n},\nsectionContainer/.style = {\ndraw,\nrectangle,\ninner sep=0.3cm,\nfill=gray,\nminimum height=3cm\n},\ncoloredBox/.style n args={4}{\ntext centered, fill=#4, minimum width = #1, minimum height= #2, text=white,\ntext width = #3,\nrounded corners\n},\n}\n\\begin{document}\n\\begin{tikzpicture}\n% Invisible reference center node\n\\node[draw=none] (stock-arch) {};\n% Cloud stocks\n\\node[rectangle, rounded corners=0.25em,draw=none, minimum width=15em, minimum height=15em, fill=blue!30] (fstocks) at ([xshift=-15em] stock-arch.west) {};\n% Needed to adjust the yshift to get it perfectly positioned\n\\node[sectionHeader={cloudrunMain}, yshift=-0.725em, anchor=west] (title) at (fstocks.north west)        {\\nodepart[color=white]{one} Cloud Run\n\\nodepart{two} \\textcolor{cloudrunSecond}{\\textbf{FStocks Python}}};\n\n\\node[coloredBox={10em}{2.5em}{10em}{cloudrunSecond}, yshift=-4.5em, line width=0.01pt] (fstocks-key) at (fstocks.north) {Key Indicators};\n\\node[coloredBox={10em}{2.5em}{10em}{cloudrunSecond}, yshift=-1em, below of = fstocks-key, line width=0.01pt] (fstocks-data)  {Stock Prices and Data};\n\\node[coloredBox={10em}{2.5em}{10em}{cloudrunSecond}, yshift=-1em, below of = fstocks-data, line width=0.01pt] (fstocks-news)  {Breaking News};\n\n% Google Cloud C# stocks\n\\node[rectangle,rounded corners=0.25em,draw=none, minimum width=15em, minimum height=15em, fill=blue!30] (stocks-app) at ([xshift=15em] stock-arch.east) {};\n% Needed to adjust the yshift to get it perfectly positioned\n\\node[sectionHeader={cloudrunMain}, yshift=-0.725em, anchor=west] (title) at (stocks-app.north west)        {\\nodepart[color=white]{one} Cloud Run\n\\nodepart{two} \\textcolor{cloudrunSecond}{\\textbf{Stocks C\\#}}};\n\\node[coloredBox={10em}{2.5em}{10em}{cloudrunSecond}, yshift=-4.5em, line width=0.01pt] (stocks-app-data) at (stocks-app.north) {Fred Charts};\n\\node[coloredBox={10em}{2.5em}{10em}{cloudrunSecond}, yshift=-1em, below of = stocks-app-data, line width=0.01pt] (stocks-app-profit)  {Profit Calculator};\n\\node[coloredBox={10em}{2.5em}{10em}{cloudrunSecond}, yshift=-1em, below of = stocks-app-profit, line width=0.01pt] (stocks-app-news)  {News Articles};\n\n% GAE Golang library switch colours\n\\node[rectangle,rounded corners=0.25em,draw=none, minimum width=15em, minimum height=15em, fill=red!50] (gae-server) at ([yshift=15em] fstocks.north) {};\n% Needed to adjust the yshift to get it perfectly positioned\n\\node[sectionHeader={appengineMain}, yshift=-0.725em, anchor=west] (title) at (gae-server.north west)        {\\nodepart[color=white]{one} App Engine\n\\nodepart{two} \\textcolor{appengineSecond}{\\textbf{Golang Api}}};\n\\node[coloredBox={10em}{2.5em}{10em}{appengineSecond}, yshift=-4.5em, line width=0.01pt] (gae-server-data) at (gae-server.north) {Sentiment Analysis};\n\\node[coloredBox={10em}{2.5em}{10em}{appengineSecond}, yshift=-1em, below of = gae-server-data, line width=0.01pt] (gae-server-profit)  {Yahoo Finance Tickers};\n\\node[coloredBox={10em}{2.5em}{10em}{appengineSecond}, yshift=-1em, below of = gae-server-profit, line width=0.01pt] (gae-server-news)  {Crypto Prices};\n\n% GAE Golang library switch colours\n\\node[rectangle,rounded corners=0.25em,draw=none, minimum width=15em, minimum height=15em, fill=green!30] (reports) at ([yshift=15em] stocks-app.north) {};\n% Needed to adjust the yshift to get it perfectly positioned\n\\node[sectionHeader={reportsMain}, yshift=-0.725em, anchor=west] (title) at (reports.north west)        {\\nodepart[color=white]{one} Reports\n\\nodepart{two} \\textcolor{reportsMain}{\\textbf{Latex}}};\n\\node[coloredBox={10em}{2.5em}{10em}{reportsSecond}, yshift=-4.5em, line width=0.01pt] (reports-new) at (reports.north) {New Stock Report};\n\\node[coloredBox={10em}{2.5em}{10em}{reportsSecond}, yshift=-1em, below of = reports-new, line width=0.01pt] (reports-mlfinlab)  {mlfinlab};\n\\node[coloredBox={10em}{2.5em}{10em}{reportsSecond}, yshift=-1em, below of = reports-mlfinlab, line width=0.01pt] (reports-prediction)  {Prediction};\n\n\\end{tikzpicture}\n\\end{document}"}},"/software/stockReportArch":{"title":"Description","data":{"":"This is a LaTeX code that generates a diagram using the TikZ package. The diagram consists of two rectangular modules, each containing four nodes. The first module is labeled \"Data APIs\" and has four nodes representing different APIs for obtaining data related to news, stocks, and exchange rates. The second module is labeled \"Analysis\" and has three nodes representing tools for analyzing the obtained data, including sentiment analysis, technical metrics, and generating stock price predictions. The diagram is generated using matrix nodes, and the style of each node is defined using the TikZ \"draw\" and \"text width\" commands. The overall style of the diagram is defined using the \"tikzset\" command, which includes the definition of the \"moduleheader\" style for the rectangular headers of each module.","keywords#Keywords":"tikz, shapes, lato, fontenc, matrix, positioning, fit, rectangle, split, parts, draw, gray, inner, sep, anchor, west, color, white, blue, green, purple, yellow, orange, stock, module, header, node, title.","source-code#Source Code":"% This is an original Diagram\n% License: CC0 or do whatever you want\n% Inspired by diagrams encountered at work, probably not illegal\n\\documentclass{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.multipart}\n\\usepackage[default]{lato}\n\\usepackage[T1]{fontenc}\n\\usetikzlibrary{matrix, positioning, fit}\n\\tikzset{\nmoduleheader/.style args = {#1}{\nrectangle split, rectangle split horizontal, rectangle split parts=2,\ndraw=none,\nthick,\nline width=2,\nrectangle split part fill={#1,white}% end of the append after command\n}% end of the box style definition\n}\n\\begin{document}\n\\begin{tikzpicture}[font=\\ttfamily,\nmymodule/.style={matrix of nodes, nodes=typetag, row sep=5em, column sep=5em},\nmycontainer/.style={draw=gray, inner sep=1ex},\ntypetag/.style={draw=gray, inner sep=1ex, anchor=west},\ntitle/.style={draw=none, color=gray, inner sep=0pt}\n]\n\\matrix[mymodule] (mx1) {\n\\node [moduleheader=red!80] (d1)\n{ \\nodepart[color=white]{one} {\\Huge Data}\\nodepart{two} {\\Huge Apis}}; &  \\\\\n\\node[draw, text width=3.5cm] (gcp) {\n\\textbf{\\small \\textcolor{blue}{GCP}|Bucket} \\newline\n\\newline\nReport Upload\n}; &\n\\node[draw, text width=3.5cm] (newsapi) {\n\\textbf{\\small \\textcolor{green}{NewsApi}|Python} \\newline\n\\newline\nNews from purchased stocks\n};\\\\\n\\node[draw, text width=3.5cm] (yahoo) {\n\\textbf{\\small \\textcolor{purple}{Conversion}|USD $\\leftrightarrow$ CAD} \\newline\n\\newline\nExchanges Rates API\n}; &\n\\node[draw, text width=3.5cm] (test) {\n\\textbf{\\small \\textcolor{red}{Stocks}|Yahoo Api} \\newline\n\\newline\nDaily data\n}; \\\\\n};\n\\matrix[mymodule, right=of mx1.north east, matrix anchor=north west] (mx2) {\n\\node [moduleheader=green!80] (d2)\n{ \\nodepart[color=white]{one} {\\Huge Analysis}\\nodepart{two} {}}; &  \\\\\n\\node[draw, text width=3.5cm] (gcp) {\n\\textbf{\\small \\textcolor{orange}{Stocker}|Charting} \\newline\n\\newline\nGenerate Stock Price Predictions\n}; &\n\\node[draw, text width=3.5cm] (newsapi) {\n\\textbf{\\small \\textcolor{green}{TextBlob}|Python} \\newline\n\\newline\nSentiment Analysis\n};\\\\\n\\node[draw, text width=3.5cm] (yahoo) {\n\\textbf{\\small \\textcolor{purple}{AlphaVantgage}} \\newline\n\\newline\nTechnical metrics (consider streamlit analysis)\n}; &\n\\\\\n};\n\\node[mycontainer, fit=(mx1)] {};\n\\node[mycontainer, fit=(mx2)] {};\n\n\\end{tikzpicture}\n\\end{document}"}},"/software/vscodeArch":{"title":"Description","data":{"":"The code is a LaTeX document that generates a visualization of a development environment in the context of Visual Studio Code's Remote Development feature. The visualization is a diagram created using the TikZ package, which shows the different components and their relationships within the development environment.The diagram consists of two main elements: a \"Local OS\" box on the left-hand side, and a \"Container\" box on the right-hand side. The \"Local OS\" box represents the user's computer, and the \"Container\" box represents a remote container that the user can connect to via Visual Studio Code's Remote Development feature.The diagram shows that Visual Studio Code is running on the user's computer (\"Local OS\"), and that it is connected to a \"VS Code Server\" running in the remote container. The \"VS Code Server\" provides access to the user's code and to the extensions and plugins that the user has installed.The diagram also shows that the user's code is stored in two \"Source Code\" databases: one on the user's computer and one in the remote container. Other components in the diagram include \"Theme/UI Extensions\" and \"Workspace Extensions\" that are installed in Visual Studio Code, as well as \"Terminal Processes,\" \"Running Application,\" \"Debugger,\" and \"File System\" components that are part of the remote container. Arrows and labels are used to show the connections and relationships between the different components.","keywords#Keywords":"tikzpicture, draw, node, circle, edge, style, dotted, loop, left, right, below, above, thick, bend left, bend right.","source-code#Source Code":"% Dupplicated from https://code.visualstudio.com/docs/remote/containers\n\\documentclass[11pt]{standalone}\n\\usepackage[T1]{fontenc}\n\\usepackage{tikz}\n\\usetikzlibrary{calc,positioning,shapes.geometric}\n\\begin{document}\n\\begin{tikzpicture}[\n>=stealth,\nnode distance=1cm,\norange/.style={\nminimum width = 11em,\nfill=orange!50,\ndraw=red!40,\ntext width = 0.35\\textwidth,\ntext centered,\n},\ndatabase/.style={\ncylinder,\ncylinder uses custom fill,\ncylinder body fill=green!60!black!50,\ncylinder end fill=green!10,\nshape border rotate=90,\naspect=0.25,\ndraw\n}\n]\n\n\\node[rounded corners, %fill=black,\ntext depth = 5em,\ndraw=blue!80,\n% double distance =1pt,    %% here\n%font=\\Large,\nminimum height= 20em,\nminimum width= 20em,\nlabel={[anchor=north, color=blue!90, inner sep=0pt, xshift=3em, yshift=-1em] north west:{Local OS}}]  (dw){};\n\n\\node[rounded corners, %fill=black,\ntext depth = 5em,\ndraw=blue!80,\n% double distance =1pt,    %% here\n%font=\\Large,\nminimum height= 20em,\nminimum width= 30em,\nlabel={[anchor=north, color=blue!90, inner sep=0pt, xshift=3em, yshift=-1em] north west:{Container}},\nright = of dw]  (container){};\n\\node[ %fill=black,\ndraw=blue!90,\ntext centered,\ntext width = 0.20\\textwidth,\nfill=blue!50,\nminimum height= 7em,\nminimum width= 15em,\nlabel={[anchor=north, inner sep=0pt, yshift=-0.2em] north:{\\Large \\textcolor{white}{VS Code}}}] at ([yshift=2em] dw.center) (code){};\n\\node[orange] at ([yshift=-1.25em] code.center) (t1) {Theme/UI Extension} ;\n\\node[orange] at ([yshift= 0.75em] code.center) (t2) {Theme/UI Extension};\n\n\\node[ %fill=black,\ndraw=blue!90,\ntext centered,\ntext width = 0.20\\textwidth,\nfill=blue!50,\nminimum height= 7em,\nminimum width= 15em,\nlabel={[anchor=north, inner sep=0pt, yshift=-0.2em] north:{\\Large \\textcolor{white}{VS Code Server}}}] at ([xshift=10em, yshift=2em] container.west) (codeserver){};\n\\node[orange] at ([yshift=-1.25em] codeserver.center) (we1) {WorkSpace Extension} ;\n\\node[orange] at ([yshift= 0.75em] codeserver.center) (we2) {WorkSpace Extension};\n\n% Data Sources\n\n% Source Code\n\\node[database] (db1) at ([yshift=-5em] code.south) (scOS) {Source Code};\n\\node[database, opacity=0.6] (db1) at ([yshift=-5em] codeserver.south) (scContainer) {Source Code};\n% Container Stuff\n\n% Container widgets\n% Configuration Files and Plugin box\n\\node[\ndraw=black!10,\ntext centered,\nfill=green!30,\nminimum width= 10em] at ([xshift=7em, yshift=-3em] codeserver.north east) (tp){Terminal Processes};\n\\node[\ndraw=black!10,\ntext centered,\nfill=green!30,\nminimum width= 10em] at ([xshift=7em, yshift=-5em] codeserver.north east) (ra){Running Application};\n\\node[\ndraw=black!10,\ntext centered,\nfill=green!30,\nminimum width= 10em] at ([xshift=7em, yshift=-7em] codeserver.north east) (debug){Debugger};\n\n\\node[database] (db1) at ([yshift=2em, xshift=7em] codeserver.north east) (fs) {File System};\n\n% Connect and labels\n\n% Arrows\n\\draw[->, very thick, draw=blue!40] (code.east) -> (codeserver.west);\n% Labels\n\\node[rounded corners, %fill=black,\ndraw=none,\nminimum height= 2em,\nfill = white,\n% double distance =1pt,    %% here\n%font=\\Large,\ntext width = 0.11\\textwidth,\ntext centered,\nminimum width=1.5em,\nxshift=3.75em] at (code.east) (dw1){Exposed port};\n\n\\draw[->, very thick, draw=blue!40] (scOS.east) -> (scContainer.west);\n\\node[rounded corners, %fill=black,\ndraw=none,\nminimum height= 2em,\nfill = white,\n% double distance =1pt,    %% here\n%font=\\Large,\ntext width = 0.11\\textwidth,\ntext centered,\nminimum width=1.5em,\nxshift=8.25em] at (scOS.east) (dw1){Volume Mount};\n\\draw[->, very thick, draw=blue!40] (codeserver) -> (fs.west);\n\\draw[->, very thick, draw=blue!40] (codeserver) -> (tp);\n\\draw[->, very thick, draw=blue!40] (codeserver) -> (ra.west);\n\\draw[->, very thick, draw=blue!40] (codeserver) -> (debug.west);\n\\end{tikzpicture}\n\\end{document}"}},"/stonks/netBuyBack":{"title":"Description","data":{"":"This is a LaTeX document that produces a graph using the TikZ and pgfplots packages. The graph shows the estimated profit as a function of the netback per barrel of oil, with the x-axis representing the netback in dollars per barrel and the y-axis representing the profit in millions of Canadian dollars.The graph is generated using the \"axis\" environment provided by the pgfplots package. The \"domain\" option sets the range of values for the x-axis, and the \"title\", \"xlabel\", and \"ylabel\" options are used to set the title and labels for the graph.The \"addplot\" command is used to plot the function that represents the estimated profit, with the \"mark\" option set to \"none\" to remove the markers for each data point, and \"samples\" set to 100 to increase the smoothness of the plotted function.The \"node\" command is used to place a small circle at a specific point on the graph, which is accomplished using the \"pin\" option to provide additional text associated with the node.Finally, the \"fill\" and \"outer sep\" options are used to set the appearance of the node and the text label associated with it, respectively.","keywords#Keywords":"tikzpicture, axis, xlabel, ylabel, addplot, function, samples, node, fill, draw, circle, minimum, width, inner, sep, pin, outer, domain, title.","source-code#Source Code":"\\documentclass{standalone}% 'crop' is the default for v1.0, before it was 'preview'\n%\\usetikzlibrary{...}% tikz package already loaded by 'tikz' option\n\\usepackage{pgfplots}\n\\usepackage{pgfplotstable}\n\\pgfplotsset{compat=1.7}\n\\begin{document}\n\\begin{tikzpicture}\n\\begin{axis}[domain=50:150,  title={Estimated Profit},\nxlabel={Netback per barrel of oil},\nylabel={Million of dollars \\$ (CAD)}]\n\\addplot[mark=none, samples=100, red] function {0.66*x};\n\\node [fill, draw, circle, minimum width=3pt, inner sep=0pt, pin={[fill=white, outer sep=2pt]}] at (0,35) {};\n\\node[outer sep=2pt,fill=white] at (2.5, 155) {\\$90 Oil};\n\\end{axis}\n\\end{tikzpicture}\n\\end{document}"}}}